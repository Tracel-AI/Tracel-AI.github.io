var searchIndex = JSON.parse('{\
"burn_autodiff":{"doc":"Burn Autodiff","t":"DLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOLLLLLLLLLGDLLLLLLLLLLLLLIDDEDQDNDNKFLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLFFLLLLLL","n":["ADBackendDecorator","abs","ad_enabled","adaptive_avg_pool1d","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","arange","argmax","argmin","avg_pool1d","avg_pool2d","avg_pool2d_backward","backward","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_data","bool_to_device","borrow","borrow_mut","cat","clone","clone_into","conv1d","conv2d","conv_transpose1d","conv_transpose2d","cos","default","detach","device","div","div_scalar","embedding","embedding_backward","empty","equal","equal_elem","erf","exp","fmt","from","from_data","from_full_precision","from_inner","gather","gelu","grad","grad_remove","grad_replace","grads","greater","greater_elem","greater_equal","greater_equal_elem","inner","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max","int_max_dim","int_max_dim_with_indices","int_mean","int_mean_dim","int_min","int_min_dim","int_min_dim_with_indices","int_mul","int_mul_scalar","int_neg","int_ones","int_repeat","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_data","int_to_device","int_zeros","into","into_data","into_int","is_require_grad","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max_dim","max_dim_with_indices","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","min_dim","min_dim_with_indices","mul","mul_scalar","name","neg","ones","ops","powf","random","relu","reshape","scatter","seed","select","select_assign","set_require_grad","shape","sin","slice","slice_assign","sqrt","sub","sub_scalar","sum","sum_dim","swap_dims","sync","tanh","testgen_ad_abs","testgen_ad_adaptive_avg_pool1d","testgen_ad_adaptive_avg_pool2d","testgen_ad_add","testgen_ad_aggregation","testgen_ad_avg_pool1d","testgen_ad_avg_pool2d","testgen_ad_broadcast","testgen_ad_cat","testgen_ad_complex","testgen_ad_conv1d","testgen_ad_conv2d","testgen_ad_conv_transpose1d","testgen_ad_conv_transpose2d","testgen_ad_cos","testgen_ad_cross_entropy_loss","testgen_ad_div","testgen_ad_erf","testgen_ad_exp","testgen_ad_gather_scatter","testgen_ad_gelu","testgen_ad_log","testgen_ad_log1p","testgen_ad_mask","testgen_ad_matmul","testgen_ad_max_pool1d","testgen_ad_max_pool2d","testgen_ad_maxmin","testgen_ad_mul","testgen_ad_multithread","testgen_ad_neg","testgen_ad_powf","testgen_ad_relu","testgen_ad_reshape","testgen_ad_select","testgen_ad_sin","testgen_ad_slice","testgen_ad_softmax","testgen_ad_sqrt","testgen_ad_sub","testgen_ad_tanh","testgen_ad_transpose","testgen_all","testgen_gradients","testgen_module_backward","to_data","to_device","to_full_precision","to_owned","try_from","try_into","type_id","vzip","zeros","GradID","Gradients","borrow","borrow_mut","consume","from","get","into","new","register","remove","try_from","try_into","type_id","vzip","Backward","Init","Ops","OpsKind","OpsPrep","State","Tracked","Tracked","UnTracked","UnTracked","backward","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_shape","finish","finish","fmt","from","from","from","from","from","from","into","into","into","into","into","into","new","new","node","parents","prepare","prepare","state","stateful","stateless","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_different_backend","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"burn_autodiff"],[233,"burn_autodiff::grads"],[248,"burn_autodiff::ops"],[323,"burn_tensor::tensor::backend::base"],[324,"core::ops::range"],[325,"alloc::vec"],[326,"burn_tensor::tensor::shape"],[327,"burn_tensor::tensor::data"],[328,"burn_common::reader"],[329,"core::clone"],[330,"core::option"],[331,"burn_tensor::tensor::ops::modules::base"],[332,"burn_tensor::tensor::ops::modules::base"],[333,"core::fmt"],[334,"core::fmt"],[335,"burn_tensor::tensor::data"],[336,"core::any"],[337,"alloc::sync"],[338,"core::ops::function"],[339,"core::marker"],[340,"core::marker"]],"d":["A decorator for a backend that enables automatic …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Gradients module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Operation module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gradient identifier.","Gradients container used during the backward pass.","","","Consumes the gradients for a given tensor.","Returns the argument unchanged.","Gets a grad tensor from the container.","Calls <code>U::from(self)</code>.","Creates a new gradients container.","Register a grad tensor in the container.","Removes a grad tensor from the container.","","","","","Trait for all operations.","Init operation tag.","Operation containing its parent nodes, its own node and …","Enum used before finishing tracked and untracked …","Operation in preparation.","Associated type to compute the backward pass.","Tracked operation tag.","Tracked operation preparation.","Untracked operation tag.","Untracked operation preparation.","The backward pass.","Execute a binary operation during the backward step.","","","","","","","","","","","","","Make sure the grad tensor has the given shape.","Finish the preparation of an untracked operation and …","Finish the preparation of a tracked operation and returns …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>OpsPrep</code>.","Constructs a new <code>Ops</code>.","The node.","Parents nodes.","Prepare the backward ops.","Prepare the backward ops.","The state.","Prepare an operation that requires a state during the …","Prepare a stateless operation.","","","","","","","","","","","","","","","","","","","Execute a unary operation during the backward step.","Execute a unary operation during the backward step where …","","","","","",""],"if":[0,[[[0,[-1]]],[[0,[-1]]],1],[[],2],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],[4,[3]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[5,[3]]]],[[[0,[-1]],3],[],1],[[[0,[-1]],3],[],1],[[[0,[-1]],3,3,3,2],[[0,[-1]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],2],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]],[4,[3]],[4,[3]],[4,[3]],2],[[0,[-1]]],1],[[[0,[-1]]],6,1],[[7,3]],[[]],[8],[[]],[[[9,[2]]]],[[],[[10,[[9,[2]]]]]],[[]],[[]],[[]],[8],[[],8],[[[4,[[5,[3]]]]]],[[[4,[[5,[3]]]]]],[[3,3]],[[],[[10,[[9,[2]]]]]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[[0,[-1]]]],3],[[0,[-1]]],1],[[[11,[-1]]],[[11,[-1]]],12],[[-1,-2],13,[],[]],[[[0,[-1]],[0,[-1]],[14,[[0,[-1]]]],15],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]],[14,[[0,[-1]]]],15],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]],[14,[[0,[-1]]]],16],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]],[14,[[0,[-1]]]],16],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[],[[11,[-1]]],17],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[8,[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[],1],[[[0,[-1]]],[],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[11,[-1]],18],19,20],[-1,-1,[]],[9,[[0,[-1]]],1],0,[[],[[0,[-1]]],1],[[3,[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],6],14,1],[[[0,[-1]],6],14,1],[[[0,[-1]]],13,1],0,[[[0,[-1]],[0,[-1]]],[],1],[[[0,[-1]]],[],1],[[[0,[-1]],[0,[-1]]],[],1],[[[0,[-1]]],[],1],[[[0,[-1]]],[],1],[[]],[[]],[[]],[3],[3],[[7,3]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[[]],[[]],[9],[8],[3],[[]],[[]],[[]],[[]],[[],[[10,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[3,13],[[]],[3],[[]],[3],[3,13],[[]],[[]],[[]],[8],[[3,3]],[8],[3],[3],[3],[[],8],[[[4,[[5,[3]]]]]],[[[4,[[5,[3]]]]]],[[]],[[]],[[]],[3],[[3,3]],[[],[[10,[9]]]],[[]],[8],[-1,-2,[],[]],[[[0,[-1]]],[[10,[9]]],1],[[[0,[-1]]],[],1],[[[0,[-1]]],2,1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[],1],[[[0,[-1]]],[],1],[[[0,[-1]],[0,[-1]]],[],1],[[[0,[-1]]],[],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],3],[[13,[[0,[-1]]]]],1],[[[0,[-1]],3,3,3,3],[[0,[-1]]],1],[[[0,[-1]],3,3,3,3],[[21,[[11,[-1]]]]],1],[[[0,[-1]],3,3,3,3,[0,[-1]]],[[22,[[11,[-1]]]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],[4,[3]]],[[0,[-1]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],[4,[3]]],[[23,[[11,[-1]]]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],[4,[3]],[0,[-1]]],[[24,[[11,[-1]]]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],3],[[13,[[0,[-1]]]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[],25],[[[0,[-1]]],[[0,[-1]]],1],[8,[[0,[-1]]],1],0,[[[0,[-1]],26],[[0,[-1]]],1],[[8,27],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],8],[[0,[-1]]],1],[[3,[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[28,13],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],3,[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],2],[[0,[-1]]],1],[[[0,[-1]]],8,1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[4,[[5,[3]]]]],[[0,[-1]]],1],[[[0,[-1]],[4,[[5,[3]]]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],3,3],[[0,[-1]]],1],[[],13],[[[0,[-1]]],[[0,[-1]]],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[0,[-1]]],[[10,[9]]],1],[[[0,[-1]]],[[0,[-1]]],1],0,[-1,-2,[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,30,[]],[-1,-2,[],[]],[8,[[0,[-1]]],1],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[6,[31,[0]]]],[-1,-1,[]],[[6,[0,[-1]]],14,1],[-1,-2,[],[]],[[[31,[0]]],6],[[6,[31,[0]]],13],[[6,[0,[-1]]],14,1],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,30,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,32,6],13,[]],[[[4,[[14,[[31,[0]]]]]],[31,[0]],6,-1,-2],13,33,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8],[[[35,[-2,-1,-3,34]]],[[0,[-1]]],1,[[36,[-1]]],[12,37,38,20]],[[[35,[-2,-1,-3,39]],-3],[[0,[-1]]],1,[[36,[-1]]],[12,37,38,20]],[[[32,[-1]],18],19,20],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[4,[[14,[[31,[0]]]]]],[31,[0]],-1],[[32,[-1]]],[]],0,0,[[-1,[4,[[31,[0]]]],[4,[0]]],[[35,[-1,-2]]],[],[]],[[-1,[4,[[31,[0]]]],[4,[0]]],[[35,[-1,-2]]],[],[]],0,[[[35,[-2,-1,-3,40]]],[[41,[-2,-1,-3]]],1,[[36,[-1]]],[12,37,38,20]],[[[35,[-2,-1,13,40]]],[[0,[-1]]],1,[[36,[-1]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[4,[[14,[[31,[0]]]]]],[31,[0]],6,-1],13,33],[[[4,[[14,[[31,[0]]]]]],[31,[0]],6,-1],13,33],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[8,"Backend",323],[15,"bool"],[15,"usize"],[15,"array"],[3,"Range",324],[3,"Gradients",233],[3,"Vec",325],[3,"Shape",326],[3,"Data",327],[4,"Reader",328],[3,"ADBackendDecorator",0],[8,"Clone",329],[15,"tuple"],[4,"Option",330],[3,"ConvOptions",331],[3,"ConvTransposeOptions",331],[8,"Default",332],[3,"Formatter",333],[6,"Result",333],[8,"Debug",333],[3,"MaxPool1dWithIndices",331],[3,"MaxPool1dBackward",331],[3,"MaxPool2dWithIndices",331],[3,"MaxPool2dBackward",331],[3,"String",334],[15,"f32"],[4,"Distribution",327],[15,"u64"],[4,"Result",335],[3,"TypeId",336],[3,"Arc",337],[3,"Ops",248],[8,"FnOnce",338],[3,"UnTracked",248],[3,"OpsPrep",248],[8,"Backward",248],[8,"Send",339],[8,"Sync",339],[3,"Tracked",248],[3,"Init",248],[4,"OpsKind",248]]},\
"burn_common":{"doc":"Burn Common Library","t":"AAAAAQIDLLKLLLLKLLKLKLLLLDLLLLLLLLLIQIDLLLLLLLLLLLLLLKLLLFLLFLLLLLLLLLLLLLNENILLLLLKLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["benchmark","id","rand","reader","stub","Args","Benchmark","BenchmarkResult","borrow","borrow_mut","execute","fmt","from","into","median_duration","name","new","num_samples","prepare","run","sync","try_from","try_into","type_id","vzip","IdGenerator","borrow","borrow_mut","from","generate","into","try_from","try_into","type_id","vzip","Rng","Seed","SeedableRng","StdRng","as_rngcore","borrow","borrow_mut","clone","clone_into","eq","equivalent","fill","fill_bytes","fmt","from","from_entropy","from_rng","from_rng","from_seed","from_seed","gen","gen_bool","gen_random","gen_range","gen_ratio","get_seeded_rng","into","next_u32","next_u64","sample","sample_iter","seed_from_u64","to_owned","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","Concrete","Reader","Sync","SyncReader","borrow","borrow_mut","from","into","map","read","read","read_sync","try_from","try_into","type_id","vzip","Mutex","RwLock","ThreadId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","from","hash","into","into","into","lock","new","new","read","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write"],"q":[[0,"burn_common"],[5,"burn_common::benchmark"],[25,"burn_common::id"],[35,"burn_common::rand"],[74,"burn_common::reader"],[90,"burn_common::stub"],[131,"core::fmt"],[132,"core::fmt"],[133,"alloc::string"],[134,"alloc::vec"],[135,"core::result"],[136,"core::any"],[137,"rand_core"],[138,"rand::rng"],[139,"core::marker"],[140,"core::fmt"],[141,"rand::distributions::uniform"],[142,"rand::distributions::uniform"],[143,"rand::distributions::distribution"],[144,"alloc::boxed"],[145,"core::option"],[146,"core::fmt"],[147,"spin::mutex"],[148,"spin::rwlock"],[149,"spin"]],"d":["Module for benchmarking any executable part","Id module contains types for unique identifiers.","Rand module contains types for random number generation …","Useful when you need to read async data without having to …","Stub module contains types for stubs for non-std …","Benchmark arguments.","Benchmark trait.","Results of a benchmark run.","","","Execute the benchmark and returns the time it took to …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the median duration among all durations","Name of the benchmark.","Constructs a new <code>BenchmarkResult</code>.","Number of samples required to have a statistical …","Prepare the benchmark, run anything that is essential for …","Run the benchmark a number of times.","Wait for computations to be over","","","","","Simple ID generator.","","","Returns the argument unchanged.","Generates a new ID in the form of a UUID.","Calls <code>U::from(self)</code>.","","","","","An automatically-implemented extension trait on <code>RngCore</code> …","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","","","","","","","","Fill any type implementing <code>Fill</code> with random data","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","","Create a new PRNG using the given seed.","","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generates random data from a thread-local RNG.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Returns a seeded random number generator using entropy.","Calls <code>U::from(self)</code>.","","","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","","Fill any type implementing <code>Fill</code> with random data","","","","","","Concrete variant.","Define how data is read, sync or async.","Sync data variant.","Allows to create sync reader.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Map the current reader to another type.","Read synchronously.","Read the data.","Read the data only if sync, returns None if an async …","","","","","A mutual exclusion primitive useful for protecting shared …","A reader-writer lock which is exclusively locked for …","A unique identifier for a running thread.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Locks the mutex blocking the current thread until it is …","Creates a new mutex in an unlocked state ready for use.","Creates a new reader-writer lock in an unlocked state …","Locks this rwlock with shared read access, blocking the …","","","","","","","","","","","","","","Locks this rwlock with exclusive write access, blocking …"],"i":[0,0,0,0,0,40,0,0,2,2,40,2,2,2,2,40,2,40,40,40,40,2,2,2,2,0,41,41,41,41,41,41,41,41,41,0,42,0,0,12,12,12,12,12,12,12,43,12,12,12,42,42,12,42,12,43,43,0,43,43,0,12,12,12,43,43,42,12,43,12,12,12,12,12,27,0,27,0,27,27,27,27,27,44,27,27,27,27,27,27,0,0,0,33,35,32,33,35,32,32,32,32,32,33,35,32,33,35,32,32,33,35,32,33,33,35,35,32,33,35,32,33,35,32,33,35,32,33,35,32,35],"f":[0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[]],[[2,3],4],[-1,-1,[]],[-1,-2,[],[]],[2,5],[-1,6,[]],[[[7,[5]]],2],[-1,8,[]],[-1,[],[]],[-1,2,[]],[-1,1,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[],6],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,12],[[-1,-2],1,[],[]],[[12,12],13],[[-1,-2],13,[],[]],[[-1,-2],1,[],[14,15]],[[12,[17,[16]]],1],[[12,3],[[9,[1,18]]]],[-1,-1,[]],[[],-1,[]],[-1,[[9,[-2,19]]],11,[]],[-1,[[9,[12,19]]],11],[[],-1,[]],[[],12],[-1,-2,[],[]],[[-1,20],13,[]],[[],-1,[]],[[-1,-3],-2,[],21,[[22,[-2]]]],[[-1,23,23],13,[]],[[],12],[-1,-2,[],[]],[12,23],[12,24],[[-1,-3],-2,[],[],[[25,[-2]]]],[[-1,-3],[[26,[-3,-1,-2]]],15,[],[[25,[-2]]]],[24,-1,[]],[-1,-2,[],[]],[[-1,-2],[[9,[1,19]]],[],[14,15]],[[12,[17,[16]]],[[9,[1,19]]]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[27,[-1]],-2],[[27,[-3]]],28,[28,29],28],[[[30,[-1]]],-2,[],[]],[[[27,[-1]]],-1,[]],[[[27,[-1]]],[[31,[-1]]],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[32,32],[[-1,-2],1,[],[]],[[32,32],13],[[-1,-2],13,[],[]],[[[33,[-1]],3],4,34],[[[35,[-1]],3],4,34],[[32,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[32,-1],1,36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]]],[[9,[[37,[-1]],6]]],[]],[-1,[[33,[-1]]],[]],[-1,[[35,[-1]]],[]],[[[35,[-1]]],[[9,[[38,[-1]],6]]],[]],[-1,-2,[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1]]],[[9,[[39,[-1]],6]]],[]]],"c":[],"p":[[15,"tuple"],[3,"BenchmarkResult",5],[3,"Formatter",131],[6,"Result",131],[3,"Duration",132],[3,"String",133],[3,"Vec",134],[15,"usize"],[4,"Result",135],[3,"TypeId",136],[8,"RngCore",137],[3,"StdRng",35],[15,"bool"],[8,"Fill",138],[8,"Sized",139],[15,"u8"],[15,"slice"],[3,"Error",131],[3,"Error",140],[15,"f64"],[8,"SampleUniform",141],[8,"SampleRange",141],[15,"u32"],[15,"u64"],[8,"Distribution",142],[3,"DistIter",142],[4,"Reader",74],[8,"Send",139],[8,"FnOnce",143],[3,"Box",144],[4,"Option",145],[3,"ThreadId",90],[3,"Mutex",90],[8,"Debug",131],[3,"RwLock",90],[8,"Hasher",146],[3,"MutexGuard",147],[3,"RwLockReadGuard",148],[6,"RwLockWriteGuard",149],[8,"Benchmark",5],[3,"IdGenerator",25],[8,"SeedableRng",35],[8,"Rng",35],[8,"SyncReader",74]]},\
"burn_compute":{"doc":"Burn compute crate that helps creating high performance …","t":"DLLAALLLOALLAAOLLALLIDDDLLLLLLLLLLLLKLLLKLLLKLLLKLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLNDEQNIINNNNNNEDNDEKLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMIDQQQLLLLLKKKLLLMLKKLLLLLDDINQNDDEKLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLDIDDDKLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLLLL","n":["Compute","borrow","borrow_mut","channel","client","client","from","into","memory_id_type","memory_management","new","register","server","storage","storage_id_type","try_from","try_into","tune","type_id","vzip","ComputeChannel","MpscComputeChannel","MutexComputeChannel","RefCellComputeChannel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","create","create","create","create","empty","empty","empty","empty","execute","execute","execute","execute","execute_autotune","execute_autotune","execute_autotune","execute_autotune","fmt","fmt","fmt","from","from","from","into","into","into","new","new","new","read","read","read","read","sync","sync","sync","sync","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ComputeClient","borrow","borrow_mut","clone","clone_into","create","empty","execute","execute_autotune","fmt","from","into","new","read","sync","to_owned","try_from","try_into","type_id","vzip","Chunk","ChunkId","DeallocStrategy","Handle","MaximumSize","MemoryHandle","MemoryManagement","MinimumSize","Never","Never","PeriodTick","PeriodTime","Ratio","SimpleHandle","SimpleMemoryManagement","Slice","SliceId","SliceStrategy","alloc","alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_mut","can_mut","can_use_chunk","clone","clone","clone","clone_into","clone_into","clone_into","dealloc","dealloc","default","default","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","hash","hash","into","into","into","into","into","into","new","new_period_tick","reserve","reserve","storage","storage","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","period","period","state","state","ComputeServer","Handle","Kernel","MemoryManagement","Storage","borrow","borrow_mut","can_mut","clone","clone_into","create","empty","execute","fmt","from","into","memory","new","read","sync","to_owned","try_from","try_into","type_id","vzip","BytesResource","BytesStorage","ComputeStorage","Full","Resource","Slice","StorageHandle","StorageId","StorageUtilization","alloc","alloc","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dealloc","dealloc","default","default","eq","equivalent","equivalent","fmt","from","from","from","from","from","get","get","hash","id","into","into","into","into","into","new","new","read","size","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utilization","vzip","vzip","vzip","vzip","vzip","write","AutotuneKey","AutotuneOperation","Operation","TuneBenchmark","TuneCache","autotunables","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","equivalent","execute","execute","fastest","fmt","fmt","from","from","from","from","hash","inputs","into","into","into","into","key","name","new","new","new","prepare","sync","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":[[0,"burn_compute"],[20,"burn_compute::channel"],[87,"burn_compute::client"],[107,"burn_compute::memory_management"],[213,"burn_compute::memory_management::DeallocStrategy"],[217,"burn_compute::server"],[242,"burn_compute::storage"],[317,"burn_compute::tune"],[378,"core::hash"],[379,"core::cmp"],[380,"core::cmp"],[381,"core::fmt"],[382,"core::ops::function"],[383,"core::result"],[384,"core::any"],[385,"alloc::boxed"],[386,"core::fmt"],[387,"burn_common::reader"],[388,"core::hash"],[389,"core::option"]],"d":["The compute type has the responsibility to retrieve the …","","","Compute channel module.","Compute client module.","Get the compute client for the given device.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new memory ID type.","Memory management module.","Create a new compute.","Register the compute client for the given device.","Compute server module.","Compute Storage module.","Create a new storage ID type.","","","Autotune module","","","The ComputeChannel trait links the ComputeClient to the …","Create a channel using the multi-producer, single-consumer …","The MutexComputeChannel ensures thread-safety by locking …","A channel using a ref cell to access the server with …","","","","","","","","","","","","","Given a resource as bytes, stores it and returns the …","","","","Reserves <code>size</code> bytes in the storage, and returns a handle …","","","","Executes the <code>kernel</code> over the given <code>handles</code>.","","","","Executes the fastest kernel in the autotune operation, …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new mutex compute channel.","Create a new mpsc compute channel.","Create a new cell compute channel.","Given a handle, returns owned resource as bytes","","","","Wait for the completion of every task in the server.","","","","","","","","","","","","","","","","","","","The ComputeClient is the entry point to require tasks from …","","","","","Given a resource, stores it and returns the resource …","Reserves <code>size</code> bytes in the storage, and returns a handle …","Executes the <code>kernel</code> over the given <code>handles</code>.","Executes the fastest kernel in the autotune operation, …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new client.","Given a handle, returns owned resource as bytes.","Wait for the completion of every task in the server.","","","","","","A whole chunk of memory.","Memory ID.","The strategy defines the frequency at which deallocation …","The associated type Handle must implement MemoryHandle","When the reserved memory less than {} bytes.","The MemoryHandle trait is an abstract way to refer to some …","The MemoryManagement trait encapsulates strategies for …","When the reserved memory is at least {} bytes.","Never deallocate.","Never use slices.","Once every n calls to reserve.","Once every period of time","Ratio needed before the chunk can be used as a slice. …","The SimpleHandle is a memory handle, referring to either a …","Reserves and keeps track of chunks of memory in the …","A slice of a chunk of memory.","Memory ID.","The strategy defines when to reuse chunk with slices.","Bypass the memory allocation algorithm to allocate data …","","","","","","","","","","","","","","Checks if the underlying memory can be safely mutated.","Returns true if referenced by only one tensor, and only …","If the chunk can be used with a slice.","","","","","","","Bypass the memory allocation algorithm to deallocate data …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the resource from the storage at the specified …","Returns the resource from the storage, for the specified …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new instance using the given storage, …","Create a new strategy with the given period.","Finds a spot in memory for a resource with the given size …","Reserves memory of specified size using the reserve …","Fetch the storage used by the memory manager.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of calls to be executed before triggering the …","Number of time before triggering the deallocation.","Current state. Should start at zero.","Current state. Should start at now.","The compute server is responsible for handling resources …","Server handle containing the memory handle.","The kernel type defines the computation algorithms.","The memory management type defines strategies for …","The storage type defines how data is stored and accessed.","","","If the tensor handle can be mut with an inplace operation.","","","Given a resource as bytes, stores it and returns the …","Reserves <code>size</code> bytes in the storage, and returns a handle …","Executes the <code>kernel</code> over the given memory <code>handles</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Handle for the memory in use.","Constructs a new <code>Handle</code>.","Given a handle, returns the owned resource as bytes.","Wait for the completion of every task in the server.","","","","","","This struct is a pointer to a memory chunk or slice.","The bytes storage maps ids to pointers of bytes in a …","Storage types are responsible for allocating and …","Full memory chunk of specified size","The resource associated type determines the way data is …","Slice of memory chunk with start index and size.","Contains the storage id of a resource and the way it is …","Storage ID.","Defines if data uses a full memory chunk or a slice of it.","Allocates <code>size</code> units of memory and returns a handle to it","","","","","","","","","","","","","","","","Deallocates the memory pointed by the given storage id.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the underlying resource for a specified storage …","","","Storage id.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new ID.","Constructs a new <code>StorageHandle</code>.","Returns the resource as an immutable slice of bytes.","Returns the size the handle is pointing to in memory.","","","","","","","","","","","","","","","","","","How the storage is used.","","","","","","Returns the resource as a mutable slice of bytes.","The key used in the tune cache, referring to the operation …","Type of operation for the kernel","Extended kernel that accounts for additional parameters, …","A benchmark that runs on server handles","Use to find and reuse the best kernel for some input","All candidate operations for autotuning this operation type","","","","","","","","","","","","","","","","Executes the operation on given handles and server, with …","","Returns the operation for the given index, matching the …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Inputs generated for benchmarked executions","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key used in the tune cache","","Constructs a new <code>Operation</code>.","Constructs a new <code>AutotuneKey</code>.","Constructs a new <code>TuneBenchmark</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,14,15,16,14,15,16,14,15,16,14,15,16,9,14,15,16,9,14,15,16,9,14,15,16,9,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,9,14,15,16,9,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,30,0,0,47,31,0,0,31,34,31,34,34,31,0,0,30,0,0,47,27,27,32,33,30,34,31,27,32,33,30,34,31,48,30,31,32,33,30,32,33,30,47,27,32,33,32,33,32,32,33,33,27,32,33,30,34,31,27,32,33,30,34,31,47,27,32,33,27,32,33,30,34,31,27,34,47,27,47,27,32,33,30,27,32,33,30,34,31,27,32,33,30,34,31,27,32,33,30,34,31,27,32,33,30,34,31,49,50,49,50,0,0,8,8,8,19,19,19,19,19,8,8,8,19,19,19,19,19,8,8,19,19,19,19,19,0,0,0,39,28,39,0,0,0,28,37,40,38,39,36,37,40,38,39,36,37,38,39,38,39,28,37,38,37,38,38,38,37,40,38,39,36,37,28,37,38,36,40,38,39,36,37,38,36,40,36,38,39,40,38,39,36,37,40,38,39,36,37,40,38,39,36,37,36,40,38,39,36,37,40,0,0,0,0,0,21,41,42,43,44,41,42,43,44,41,42,41,42,42,42,42,41,43,21,42,44,41,42,43,44,42,21,41,42,43,44,21,43,41,42,43,43,43,41,42,41,42,43,44,41,42,43,44,41,42,43,44,41,42,43,44],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[1,[-1,-2,-3]],-1,-4],[[2,[-2,-3]]],[3,4,5,6,7],8,[[9,[-2]]],10],[-1,-1,[]],[-1,-2,[],[]],0,0,[[],[[1,[-1,-2,-3]]],[3,4,5,6,7],8,[[9,[-2]]]],[[[1,[-1,-2,-3]],-1,[2,[-2,-3]]],11,[3,4,5,6,7],8,[[9,[-2]]]],0,0,0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[-1,13,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[14,[-1]]],[]],[[[15,[-1]]],[[15,[-1]]],8],[[[16,[-1]]],[[16,[-1]]],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,[18,[17]]],[[19,[-2]]],[],[]],[[[14,[-1]],[18,[17]]],[[19,[-1]]],8],[[[15,[-1]],[18,[17]]],[[19,[-1]]],8],[[[16,[-1]],[18,[17]]],[[19,[-1]]],8],[[-1,20],[[19,[-2]]],[],[]],[[[14,[-1]],20],[[19,[-1]]],8],[[[15,[-1]],20],[[19,[-1]]],8],[[[16,[-1]],20],[[19,[-1]]],8],[[-1,[18,[[19,[-2]]]]],11,[],[]],[[[14,[-1]],[18,[[19,[-1]]]]],11,8],[[[15,[-1]],[18,[[19,[-1]]]]],11,8],[[[16,[-1]],[18,[[19,[-1]]]]],11,8],[[-1,[22,[21]],[18,[[19,[-2]]]]],11,[],[]],[[[14,[-1]],[22,[21]],[18,[[19,[-1]]]]],11,8],[[[15,[-1]],[22,[21]],[18,[[19,[-1]]]]],11,8],[[[16,[-1]],[22,[21]],[18,[[19,[-1]]]]],11,8],[[[14,[-1]],23],24,7],[[[15,[-1]],23],24,[8,7]],[[[16,[-1]],23],24,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-1]]],8],[[-1,20],[[15,[-1]]],8],[-1,[[16,[-1]]],8],[[-1,[19,[-2]]],[[26,[[25,[17]]]]],[],[]],[[[14,[-1]],[19,[-1]]],[[26,[[25,[17]]]]],8],[[[15,[-1]],[19,[-1]]],[[26,[[25,[17]]]]],8],[[[16,[-1]],[19,[-1]]],[[26,[[25,[17]]]]],8],[-1,11,[]],[[[14,[-1]]],11,8],[[[15,[-1]]],11,8],[[[16,[-1]]],11,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2]]],[[2,[-1,-2]]],8,[[9,[-1]]]],[[-1,-2],11,[],[]],[[[2,[-1,-2]],[18,[17]]],[[19,[-1]]],8,[[9,[-1]]]],[[[2,[-1,-2]],20],[[19,[-1]]],8,[[9,[-1]]]],[[[2,[-1,-2]],[18,[[19,[-1]]]]],11,8,[[9,[-1]]]],[[[2,[-1,-2]],[22,[21]],[18,[[19,[-1]]]]],11,8,[[9,[-1]]]],[[[2,[-1,-2]],23],24,7,7],[-1,-1,[]],[-1,-2,[],[]],[-2,[[2,[-1,-2]]],8,[[9,[-1]]]],[[[2,[-1,-2]],[19,[-1]]],[[26,[[25,[17]]]]],8,[[9,[-1]]]],[[[2,[-1,-2]]],11,8,[[9,[-1]]]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,20],[],[]],[[[27,[-1]],20],[],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[30,29],[[31,20,20],29],[32,32],[33,33],[30,30],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[-1,11,[]],[[[27,[-1]]],11,28],[[],32],[[],33],[[32,32],29],[[33,33],29],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[[27,[-1]],23],24,[]],[[32,23],24],[[33,23],24],[[30,23],24],[[34,23],24],[[31,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[[[27,[-1]]],[],28],[[32,-1],11,35],[[33,-1],11,35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,34,31],[[27,[-1]]],28],[20,34],[[-1,20],[],[]],[[[27,[-1]],20],[],28],[-1,-2,[],[]],[[[27,[-1]]],-1,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[19,[-1]]],29,8],[[[19,[-1]]],[[19,[-1]]],8],[[-1,-2],11,[],[]],[[-1,[18,[17]]],[[19,[-1]]],[]],[[-1,20],[[19,[-1]]],[]],[[-1,[18,[[19,[-1]]]]],11,[]],[[[19,[-1]],23],24,[7,8]],[-1,-1,[]],[-1,-2,[],[]],0,[[],[[19,[-1]]],8],[[-1,[19,[-1]]],[[26,[[25,[17]]]]],[]],[-1,11,[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[-1,20],36,[]],[[37,20],36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[38,38],[39,39],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,38],11,[]],[[37,38],11],[[],38],[[],37],[[38,38],29],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[37,23],24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,36],[],[]],[[37,36]],[[38,-1],11,35],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],38],[[38,39],36],[40,[[18,[17]]]],[36,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,[[18,[17]]]],0,0,0,0,0,[-1,[[25,[[41,[-2]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[41,[-1]]],[[41,[-1]]],8],[42,42],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[42,42],29],[[-1,-2],29,[],[]],[[-1,-2],29,[],[]],[[[41,[-1]],[18,[[19,[-1]]]],-1],11,8],[[[43,[-1]]],11,8],[[-1,20],[[41,[-2]]],[],[]],[[42,23],24],[[[44,[-1]],23],24,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[42,-1],11,35],[-1,[[25,[[25,[17]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,42,[]],[[[43,[-1]]],45,8],[[[46,[[25,[[19,[-1]]]]]]],[[41,[-1]]],8],[[45,45],42],[[[41,[-1]],[25,[[19,[-1]]]],-1],[[43,[-1]]],8],[[[43,[-1]]],[],8],[[[43,[-1]]],11,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Compute",0],[3,"ComputeClient",87],[8,"Hash",378],[8,"PartialEq",379],[8,"Eq",379],[8,"Clone",380],[8,"Debug",381],[8,"ComputeServer",217],[8,"ComputeChannel",20],[8,"Fn",382],[15,"tuple"],[4,"Result",383],[3,"TypeId",384],[3,"MutexComputeChannel",20],[3,"MpscComputeChannel",20],[3,"RefCellComputeChannel",20],[15,"u8"],[15,"slice"],[3,"Handle",217],[15,"usize"],[8,"AutotuneOperation",317],[3,"Box",385],[3,"Formatter",381],[6,"Result",381],[3,"Vec",386],[4,"Reader",387],[3,"SimpleMemoryManagement",107],[8,"ComputeStorage",242],[15,"bool"],[4,"SimpleHandle",107],[4,"SliceStrategy",107],[3,"ChunkId",107],[3,"SliceId",107],[4,"DeallocStrategy",107],[8,"Hasher",378],[3,"StorageHandle",242],[3,"BytesStorage",242],[3,"StorageId",242],[4,"StorageUtilization",242],[3,"BytesResource",242],[3,"Operation",317],[3,"AutotuneKey",317],[3,"TuneBenchmark",317],[3,"TuneCache",317],[3,"String",388],[4,"Option",389],[8,"MemoryManagement",107],[8,"MemoryHandle",107],[13,"PeriodTick",213],[13,"PeriodTime",213]]},\
"burn_dataset":{"doc":"Burn Dataset","t":"NIDNNNDEDNNNNNGNNDNEDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLKLLLLLLLLALLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLANDEDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ConnectionPool","Dataset","DatasetIterator","Err","FailToDownloadPythonDependencies","FileExists","HuggingfaceDatasetLoader","ImporterError","InMemDataset","Io","Ok","Other","PersistDbFile","PythonNotInstalled","Result","Serde","Sql","SqliteDataset","SqliteDataset","SqliteDatasetError","SqliteDatasetStorage","SqliteDatasetWriter","Unknown","VenvNotInitialized","base_dir","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","db_file","db_file","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","exists","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_csv","from_dataset","from_db_file","from_file","from_json_rows","from_name","get","get","get","init","init","init","init","init","init","into","into","into","into","into","into","into_iter","is_empty","is_empty","iter","iter","len","len","len","new","new","new","next","reader","set_completed","source","source","split","to_owned","to_string","transform","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","with_base_dir","write","writer","huggingface","FailToDownloadPythonDependencies","HuggingfaceDatasetLoader","ImporterError","MNISTDataset","MNISTItem","PythonNotInstalled","SqliteDataset","Unknown","VenvNotInitialized","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dataset","db_file","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","from","get","image","init","init","init","init","into","into","into","into","label","len","new","serialize","source","test","to_owned","to_string","train","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","with_base_dir","with_huggingface_cache_dir","with_huggingface_token","with_subset","ComposedDataset","Mapper","MapperDataset","PartialDataset","SamplerDataset","ShuffledDataset","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","get","get","get","get","get","init","init","init","init","init","into","into","into","into","into","len","len","len","len","len","map","new","new","new","new","new","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_replacement","with_seed","without_replacement"],"q":[[0,"burn_dataset"],[145,"burn_dataset::source"],[146,"burn_dataset::source::huggingface"],[227,"burn_dataset::transform"],[313,"std::path"],[314,"core::option"],[315,"core::fmt"],[316,"core::fmt"],[317,"gix_tempfile::handle::persist::error"],[318,"rusqlite::error"],[319,"r2d2"],[320,"rmp_serde::encode"],[321,"std::io::error"],[322,"core::result"],[323,"std::path"],[324,"core::clone"],[325,"serde::de"],[326,"core::marker"],[327,"core::marker"],[328,"serde::ser"],[329,"core::error"],[330,"alloc::string"],[331,"core::any"],[332,"serde::de"],[333,"alloc::sync"]],"d":["Error when creating the connection pool.","The dataset trait defines a basic collection of items with …","Dataset iterator.","Contains the error value","Fail to download python dependencies.","The database file already exists error.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","Dataset where all items are stored in ram.","IO related error.","Contains the success value","Any other error.","Error when persisting the temporary database file.","python3 is not installed.","Result type for the sqlite dataset.","Serde related error.","Sql related error.","This struct represents a dataset where all items are …","Fail to create sqlite dataset.","Sqlite dataset error.","The <code>SqliteDatasetStorage</code> struct represents a SQLite …","This <code>SqliteDatasetWriter</code> struct is a SQLite database …","Unknown error.","venv environment is not initialized.","Determines the base directory for storing the dataset.","","","","","","","","","","","","","","","Get the database file name.","Fetches the database file path.","","","","","","","","","","","","","","","","","","","Checks if the database file exists in the given path.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create from a csv file.","Create from a dataset. All items are loaded in memory.","Initializes a <code>SqliteDataset</code> from a SQLite database file …","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Create from a json rows file (one json per line).","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Gets the item at the given index.","","Get an item from the dataset.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the dataset is empty.","Checks if the dataset is empty.","Returns an iterator over the dataset.","Returns an iterator over the dataset.","Gets the number of items in the dataset.","","Return the number of rows in the dataset.","Creates a new in memory dataset from the given items.","Creates a new dataset iterator.","Creates a new instance of <code>SqliteDatasetWriter</code>.","","Provides a reader instance for the SQLite dataset.","Marks the dataset as completed and persists the temporary …","Sources for datasets.","","Get the split name.","","","Transformations to be used with datasets.","","","","","","","","","","","","","","","","","","","","","","","","","Sets the base directory for storing the dataset.","Serializes and writes an item to the database. The item is …","Provides a writer instance for the SQLite dataset.","Huggingface source","Fail to download python dependencies.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","MNIST dataset from Huggingface.","MNIST item.","python3 is not installed.","Fail to create sqlite dataset.","Unknown error.","venv environment is not initialized.","","","","","","","","","","","Load the dataset.","Get the path to the sqlite database file.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Image as a 2D array of floats.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Label of the image.","","Create a huggingface dataset loader.","","","Creates a new test dataset.","","","Creates a new train dataset.","","","","","","","","","","","","","","","","","Specify a base directory to store the dataset.","Specify a huggingface cache directory to store the …","Specify a huggingface token to download datasets behind …","Create a huggingface dataset loader for a subset of the …","Compose multiple datasets together to create a bigger one.","Basic mapper trait to be used with the mapper dataset.","Dataset mapping each element in an inner dataset to …","Only use a fraction of an existing dataset lazily.","Sample items from a dataset.","Shuffled a dataset, consider using sampler dataset is you …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Maps an item of type I to an item of type O.","Creates a new shuffled dataset.","Creates a new sampler dataset with replacement.","Constructs a new <code>ComposedDataset</code>.","Constructs a new <code>MapperDataset</code>.","Constructs a new <code>PartialDataset</code>.","Splits a dataset into multiple partial datasets.","","","","","","","","","","","","","","","","","","","","","Creates a new sampler dataset with replacement.","Creates a new shuffled dataset with a fixed seed.","Creates a new sampler dataset without replacement."],"i":[8,0,0,27,39,8,0,0,0,8,27,8,8,39,0,8,8,0,39,0,0,0,39,39,3,20,30,8,5,3,12,20,30,8,5,3,12,3,3,5,3,20,30,8,5,3,12,20,30,8,5,3,12,20,30,8,5,3,12,3,8,8,5,3,12,20,30,8,8,8,8,8,8,8,5,3,12,20,20,5,3,20,3,26,20,5,20,30,8,5,3,12,20,30,8,5,3,12,30,26,26,26,26,26,20,5,20,30,12,30,3,12,0,8,5,3,8,0,20,30,8,5,3,12,20,30,8,5,3,12,20,30,8,5,3,12,20,30,8,5,3,12,3,12,3,0,39,0,0,0,0,39,39,39,39,38,41,39,37,38,41,39,37,37,37,38,38,38,41,39,37,38,41,39,37,37,38,41,39,37,39,39,37,38,41,39,39,37,41,37,38,41,39,37,38,41,39,37,37,41,38,37,39,41,37,39,41,38,41,39,37,38,41,39,37,38,41,39,37,38,41,39,37,38,38,38,38,0,0,0,0,0,0,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,47,43,44,45,46,48,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,43,44,45,46,48,44,43,44],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[-1,-2],4,[],[]],[[[5,[-1]]],1,[]],[3,1],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,4],[6,4],[6,4],[6,4],[6,4],[6,4],[3,7],[[8,9],10],[[8,9],10],[[[5,[-1]],9],10,11],[[3,9],10],[[[12,[-1]],9],10,11],[-1,-1,[]],[-1,-1,[]],[[[14,[13]]],8],[15,8],[16,8],[17,8],[-1,-1,[]],[18,8],[19,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[21,[[20,[-2]],18]]],[[23,[22]]],[24,25]],[-2,[[20,[-1]]],[24,25],[[26,[-1]]]],[[-1,19],[[27,[[5,[-2]]]]],[[23,[22]]],[]],[-1,3,[[23,[22]]]],[-1,[[21,[[20,[-2]],18]]],[[23,[22]]],[24,25]],[19,3],[[-1,6],[[2,[-2]]],[],[]],[[[20,[-1]],6],[[2,[-1]]],[24,28,29]],[[[5,[-1]],6],[[2,[-1]]],[24,28,29,25]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,[[30,[-2]]],31,[]],[-1,[[30,[-2]]],31,[]],[-1,6,[]],[[[20,[-1]]],6,[24,28,29]],[[[5,[-1]]],6,[24,28,29,25]],[[[32,[-1]]],[[20,[-1]]],[]],[-2,[[30,[-1]]],[],[[26,[-1]]]],[[-1,7],[[27,[[12,[-2]]]]],[[23,[22]]],[24,28,29,33,25]],[[[30,[-1]]],[[2,[-1]]],[]],[[3,19],[[27,[[5,[-1]]]]],[24,28,29,33,25]],[[[12,[-1]]],[[27,[4]]],[24,28,29,33,25]],0,[8,[[2,[34]]]],[[[5,[-1]]],19,[]],[-1,-2,[],[]],[-1,35,[]],0,[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,-1],3,[[23,[22]]]],[[[12,[-1]],19,-1],[[27,[6]]],[24,28,29,33,25]],[[3,7],[[27,[[12,[-1]]]]],[24,28,29,33,25]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[37,37],[[-1,-2],4,[],[]],[[38,19],[[21,[[5,[-1]],39]]],[25,24]],[38,[[21,[1,39]]]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[21,[37]]],40],[6,4],[6,4],[6,4],[6,4],[[39,9],10],[[39,9],10],[[37,9],10],[-1,-1,[]],[-1,-1,[]],[8,39],[-1,-1,[]],[-1,-1,[]],[[41,6],[[2,[37]]]],0,[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[41,6],[19,38],[[37,-1],21,42],[39,[[2,[34]]]],[[],41],[-1,-2,[],[]],[-1,35,[]],[[],41],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[38,19],38],[[38,19],38],[[38,19],38],[[38,19],38],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,4],[6,4],[6,4],[6,4],[6,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[43,[-2,-1]],6],[[2,[-1]]],[24,28,29],[[26,[-1]]]],[[[44,[-2,-1]],6],[[2,[-1]]],[28,29],[[26,[-1]]]],[[[45,[-2]],6],[[2,[-1]]],24,[[26,[-1]]]],[[[46,[-2,-4,-1]],6],[[2,[-3]]],[28,29],[[26,[-1]]],[28,29],[[47,[-1,-3]],28,29]],[[[48,[-2,-1]],6],[[2,[-1]]],[24,28,29],[[26,[-1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-2,-1]]],6,[24,28,29],[[26,[-1]]]],[[[44,[-2,-1]]],6,[28,29],[[26,[-1]]]],[[[45,[-2]]],6,24,[[26,[-1]]]],[[[46,[-2,-4,-1]]],6,[28,29],[[26,[-1]]],[28,29],[[47,[-1,-3]],28,29]],[[[48,[-2,-1]]],6,[24,28,29],[[26,[-1]]]],[[-1,-2],-3,[],[],[]],[[-2,49],[[43,[-2,-1]]],[],[[26,[-1]]]],[[-2,6],[[44,[-2,-1]]],[28,29],[[26,[-1]]]],[[[32,[-1]]],[[45,[-1]]],[]],[[-1,-2],[[46,[-1,-2,-3]]],[],[],[]],[[-1,6,6],[[48,[-1,-2]]],[],[]],[[-2,6],[[32,[[48,[[50,[-2]],-1]]]]],[],[[26,[-1]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,6],[[44,[-2,-1]]],[28,29],[[26,[-1]]]],[[-2,51],[[43,[-2,-1]]],[],[[26,[-1]]]],[[-2,6],[[44,[-2,-1]]],[28,29],[[26,[-1]]]]],"c":[],"p":[[3,"PathBuf",313],[4,"Option",314],[3,"SqliteDatasetStorage",0],[15,"tuple"],[3,"SqliteDataset",0],[15,"usize"],[15,"bool"],[4,"SqliteDatasetError",0],[3,"Formatter",315],[6,"Result",315],[8,"Debug",315],[3,"SqliteDatasetWriter",0],[3,"Writable",316],[3,"Error",317],[4,"Error",318],[3,"Error",319],[4,"Error",320],[3,"Error",321],[15,"str"],[3,"InMemDataset",0],[4,"Result",322],[3,"Path",313],[8,"AsRef",323],[8,"Clone",324],[8,"DeserializeOwned",325],[8,"Dataset",0],[6,"Result",0],[8,"Send",326],[8,"Sync",326],[3,"DatasetIterator",0],[8,"Sized",326],[3,"Vec",327],[8,"Serialize",328],[8,"Error",329],[3,"String",330],[3,"TypeId",331],[3,"MNISTItem",146],[3,"HuggingfaceDatasetLoader",146],[4,"ImporterError",146],[8,"Deserializer",325],[3,"MNISTDataset",146],[8,"Serializer",328],[3,"ShuffledDataset",227],[3,"SamplerDataset",227],[3,"ComposedDataset",227],[3,"MapperDataset",227],[8,"Mapper",227],[3,"PartialDataset",227],[3,"StdRng",332],[3,"Arc",333],[15,"u64"]]},\
"burn_derive":{"doc":"The derive crate of Burn.","t":"YYY","n":["Config","Module","Record"],"q":[[0,"burn_derive"]],"d":["Derive macro for the config.","Derive macro for the module.","Derive macro for the record."],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"burn_ndarray":{"doc":"Burn ndarray backend.","t":"NIDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLOLLLLLLLL","n":["Cpu","FloatNdArrayElement","NdArrayBackend","NdArrayDevice","abs","ad_enabled","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","argmax","argmin","avg_pool2d","avg_pool2d_backward","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_device","borrow","borrow","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone_into","clone_into","conv2d","conv_transpose2d","cos","default","default","deref","deref","deref_mut","deref_mut","detach","device","div","div_scalar","drop","drop","empty","eq","equal","equal_elem","equivalent","erf","exp","fmt","fmt","from","from","from_data","from_full_precision","gather","greater","greater_elem","greater_equal","greater_equal_elem","init","init","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_mean","int_mean_dim","int_mul","int_mul_scalar","int_neg","int_ones","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_device","int_zeros","into","into","into_data","into_int","iter_par","iter_range_par","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","mul","mul_scalar","name","neg","powf","random","relu","reshape","reshape","run_par","scatter","seed","select","select_assign","shape","sin","slice","slice_assign","sqrt","sub","sub_scalar","sum","sum_dim","swap_dims","tanh","to_device","to_full_precision","to_owned","to_owned","to_typed_dims","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"burn_ndarray"],[184,"alloc::vec"],[185,"burn_tensor::tensor::shape"],[186,"burn_tensor::tensor::data"],[187,"burn_common::reader"],[188,"core::ops::range"],[189,"core::clone"],[190,"core::option"],[191,"burn_tensor::tensor::ops::modules::base"],[192,"burn_tensor::tensor::ops::modules::base"],[193,"core::fmt"],[194,"core::fmt"],[195,"burn_tensor::tensor::data"],[196,"core::any"]],"d":["The CPU device.","A float element for ndarray backend.","The ndarray backend.","The device type for the ndarray backend.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Macro for iterating in parallel.","Macro for iterating over a range in parallel.","","","","","","","","","","","","","","","","","","","","","","","Reshapes an array into a tensor.","Macro for running a function in parallel.","","","","","","","","","","","","","","","","","","","","Converts a slice of usize to a typed dimension.","","","","","","","",""],"if":[0,0,0,0,[[[0,[-1]]],[[0,[-1]]],1],[[],2],[[[0,[-1]],[4,[3]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],-1],[[0,[-1]]],1],[[[0,[-1]],3],[[0,[5]]],1],[[[0,[-1]],3],[[0,[5]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],2],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]],[4,[3]],[4,[3]],[4,[3]],2],[[0,[-1]]],1],[[6,3]],[[]],[7],[[]],[[[8,[2]],9],[[0,[2]]]],[[],[[10,[[8,[2]]]]]],[[]],[[],[[0,[5]]]],[[]],[[[0,[2]],7],[[0,[2]]]],[[],7],[[[0,[2]],[4,[[11,[3]]]]],[[0,[2]]]],[[[4,[[11,[3]]]]]],[[3,3]],[[[0,[2]],9],[[0,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[6,[[0,[-1]]]],3],[[0,[-1]]],1],[[[0,[-1]],-1,-1],[[0,[-1]]],1],[[[0,[-1]],-1],[[0,[-1]]],1],[[[0,[-1]],-1],[[0,[-1]]],1],[9,9],[[[12,[-1]]],[[12,[-1]]],13],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[[0,[-1]],[0,[-1]],[15,[[0,[-1]]]],16],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]],[15,[[0,[-1]]]],17],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[],9],[[],[[12,[-1]]],18],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],9,1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],-1],[[0,[-1]]],1],[3,14],[3,14],[7,[[0,[-1]]],1],[[9,9],2],[[[0,[-1]],[0,[-1]]],[[0,[2]]],1],[[[0,[-1]],-1],[[0,[2]]],1],[[-1,-2],2,[],[]],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[9,19],20],[[[12,[-1]],19],20,21],[-1,-1,[]],[-1,-1,[]],[[[8,[-1]],9],[[0,[-1]]],1],[[[0,[22]]],[[0,[-1]]],1],[[3,[0,[-1]],[0,[5]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[2]]],1],[[[0,[-1]],-1],[[0,[2]]],1],[[[0,[-1]],[0,[-1]]],[[0,[2]]],1],[[[0,[-1]],-1],[[0,[2]]],1],[[],3],[[],3],[[[0,[5]]],[[0,[5]]]],[[[0,[5]],[0,[5]]],[[0,[5]]]],[[[0,[5]],5],[[0,[5]]]],[[[0,[5]],3],[[0,[5]]]],[[[0,[5]],3],[[0,[5]]]],[[[6,[[0,[5]]]],3],[[0,[5]]]],[[[0,[5]],5,5],[[0,[5]]]],[[[0,[5]],5],[[0,[5]]]],[[[0,[5]],5],[[0,[5]]]],[[[0,[5]]]],[[[0,[5]],[0,[5]]],[[0,[5]]]],[[[0,[5]],5],[[0,[5]]]],[7,[[0,[5]]]],[[[0,[5]],[0,[5]]],[[0,[2]]]],[[[0,[5]],5],[[0,[2]]]],[[[8,[5]],9],[[0,[5]]]],[[7,5],[[0,[5]]]],[[3,[0,[5]],[0,[5]]],[[0,[5]]]],[[[0,[5]],[0,[5]]],[[0,[2]]]],[[[0,[5]],5],[[0,[2]]]],[[[0,[5]],[0,[5]]],[[0,[2]]]],[[[0,[5]],5],[[0,[2]]]],[[[0,[5]]],[[10,[[8,[5]]]]]],[[]],[[[0,[5]],[0,[5]]],[[0,[2]]]],[[[0,[5]],5],[[0,[2]]]],[[[0,[5]],[0,[5]]],[[0,[2]]]],[[[0,[5]],5],[[0,[2]]]],[[[0,[5]],[0,[2]],5],[[0,[5]]]],[[[0,[5]],[0,[2]],[0,[5]]],[[0,[5]]]],[[[0,[5]]],[[0,[5]]]],[[[0,[5]],3],[[0,[5]]]],[[[0,[5]],[0,[5]]],[[0,[5]]]],[[[0,[5]],5],[[0,[5]]]],[[[0,[5]]],[[0,[5]]]],[7,[[0,[5]]]],[[[0,[5]],7],[[0,[5]]]],[[3,[0,[5]],[0,[5]],[0,[5]]],[[0,[5]]]],[[[0,[5]],3,[0,[5]]],[[0,[5]]]],[[[0,[5]],3,[0,[5]],[0,[5]]],[[0,[5]]]],[[[0,[5]]],7],[[[0,[5]],[4,[[11,[3]]]]],[[0,[5]]]],[[[0,[5]],[4,[[11,[3]]]],[0,[5]]],[[0,[5]]]],[[[0,[5]],[0,[5]]],[[0,[5]]]],[[[0,[5]],5],[[0,[5]]]],[[[0,[5]]],[[0,[5]]]],[[[0,[5]],3],[[0,[5]]]],[[3,3]],[[[0,[5]],9],[[0,[5]]]],[7,[[0,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[0,[-1]]],[[10,[8]]],1],[[]],0,0,[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[2]]],1],[[[0,[-1]],-1],[[0,[2]]],1],[[[0,[-1]],[0,[-1]]],[[0,[2]]],1],[[[0,[-1]],-1],[[0,[2]]],1],[[[0,[-1]],[0,[2]],-1],[[0,[-1]]],1],[[[0,[-1]],[0,[2]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],[4,[3]]],[[0,[-1]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],[4,[3]]],[[23,[[12,[-1]]]]],1],[[[0,[-1]],[4,[3]],[4,[3]],[4,[3]],[4,[3]],[0,[-1]],[0,[5]]],[[24,[[12,[-1]]]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],-1],[[0,[-1]]],1],[[],25],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],22],[[0,[-1]]],1],[[7,[26,[-1]],9],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],7],[[0,[-1]]],1],0,0,[[3,[0,[-1]],[0,[5]],[0,[-1]]],[[0,[-1]]],1],[27,14],[[[0,[-1]],3,[0,[5]]],[[0,[-1]]],1],[[[0,[-1]],3,[0,[5]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],7,1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[4,[[11,[3]]]]],[[0,[-1]]],1],[[[0,[-1]],[4,[[11,[3]]]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],-1],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],3],[[0,[-1]]],1],[[[0,[-1]],3,3],[[0,[-1]]],1],[[[0,[-1]]],[[0,[-1]]],1],[[[0,[-1]],9],[[0,[-1]]],1],[[[0,[-1]]],[[0,[22]]],1],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[8,"FloatNdArrayElement",0],[15,"bool"],[15,"usize"],[15,"array"],[15,"i64"],[3,"Vec",184],[3,"Shape",185],[3,"Data",186],[4,"NdArrayDevice",0],[4,"Reader",187],[3,"Range",188],[3,"NdArrayBackend",0],[8,"Clone",189],[15,"tuple"],[4,"Option",190],[3,"ConvOptions",191],[3,"ConvTransposeOptions",191],[8,"Default",192],[3,"Formatter",193],[6,"Result",193],[8,"Debug",193],[15,"f32"],[3,"MaxPool2dWithIndices",191],[3,"MaxPool2dBackward",191],[3,"String",194],[4,"Distribution",186],[15,"u64"],[4,"Result",195],[3,"TypeId",196]]},\
"burn_tensor":{"doc":"This library provides multiple tensor implementations …","t":"INNDNSSDDNIDEDENLLSSSSQIIIILLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSDNNSSDLLSSLLSSLLSSLLSSLLSSLLSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSOOIDNNISSNLLSSEQDSSEILLSSDNNDDQINNSSKLLLLLLLLLLLLLLLLLLLLLAKLLLLLLLLLLLLLLLLLKLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLOKLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLKLLLLLLMKLLLLLLLLLLLLLLLLLKLLLMKLLLLKLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLKLLLKLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAKLLLKLLLKLLLKLLLLLOOLKLLLKLLLLLKLLLLLLLLLLLKLLLKLLLLLLLLLLLLLKLLLKLLLKLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLAKLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLALLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLKLLLKLLLKLLLLLLLLLLLFLKLLLLLMMLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLKLLLLLLLKLLLKLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOMLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLFFFFFFFFIIQQQQQQQQQQLLKKKKKKKKLLQIDLLKLLLLKLLKLLFLLLLLDLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFIIDDDDIDDDDIIDKLLLLKKKKLLLLKKLLLLKKMMKKKKKKKKKLLKKKKKLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLALLLLKLLLLLLKLLKLLKMMMKKLLLLKKKKKLLLLLLLLLLLLKKLLKLLLLKKKKMMMMKKKKKKLLLLLLKKKKKKKLLKKKKKKKKKKKKKLLLLLLLLKLLLLLLKKLLKLLKKKKKKKKKKKKLLKLLKLLLLLLLLLKKLLKKKKKKKKKLLLLLLLLLLLLKKKLLKLLLLLLKKLLLLLLLLLLLLLMMMMMMAKKLLLLLLKKKKLLKKKKKMMMKKKKKKLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLFF","n":["BasicOps","Bernoulli","Bernoulli","Bool","Concrete","DIGITS","DIGITS","Data","DataSerialize","Default","Dim","DimIter","Distribution","DistributionSampler","DistributionSamplerKind","Double","E","E","E","E","EPSILON","EPSILON","Elem","Element","ElementConversion","ElementPrecision","ElementRandom","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","Float","Full","Half","INFINITY","INFINITY","Int","LN_10","LN_10","LN_10","LN_10","LN_2","LN_2","LN_2","LN_2","LOG10_2","LOG10_2","LOG10_2","LOG10_2","LOG10_E","LOG10_E","LOG10_E","LOG10_E","LOG2_10","LOG2_10","LOG2_10","LOG2_10","LOG2_E","LOG2_E","LOG2_E","LOG2_E","MANTISSA_DIGITS","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_10_EXP","MAX_EXP","MAX_EXP","MAX_SUBNORMAL","MAX_SUBNORMAL","MIN","MIN","MIN_10_EXP","MIN_10_EXP","MIN_EXP","MIN_EXP","MIN_POSITIVE","MIN_POSITIVE","MIN_POSITIVE_SUBNORMAL","MIN_POSITIVE_SUBNORMAL","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ZERO","NEG_ZERO","NamedDim","NamedDim","NamedDims","NamedTensor","Normal","Normal","Numeric","ONE","ONE","Other","PI","PI","PI","PI","Precision","Primitive","PrintOptions","RADIX","RADIX","Reader","ReshapeArgs","SQRT_2","SQRT_2","SQRT_2","SQRT_2","Shape","Standard","Sync","T","Tensor","Tensor","TensorKind","Uniform","Uniform","ZERO","ZERO","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acos","acosh","acosh","acosh","acosh","activation","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_scalar","add_scalar","add_scalar","add_scalar","arange","arange_device","arange_step","arange_step_device","argmax","argmax","argmax","argmax","argmin","argmin","argmin","argmin","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","asin","asin","asin","asin","asinh","asinh","asinh","asinh","assert_approx_eq","assert_within_range","atan","atan","atan","atan","atan2","atan2","atan2","atan2","atanh","atanh","atanh","atanh","backend","backward","benchmark","bf16","bitxor","bool_not","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","cat","cat","cat","cat","cbrt","cbrt","cbrt","cbrt","ceil","ceil","ceil","ceil","ceil","ceil","check","clamp","clamp","clamp","clamp","clamp","clamp","clamp_max","clamp_max","clamp_max","clamp_max","clamp_min","clamp_min","clamp_min","clamp_min","classify","classify","classify","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","container","convert","convert","convert","convert","copysign","copysign","cos","cos","cos","cos","cos","cosh","cosh","cosh","cosh","cov","default","default","deserialize","deserialize","deserialize","detach","device","device","device","device","device","diagonal","dims","dims","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_scalar","div_scalar","div_scalar","div_scalar","edge_items","elem","elem","elem","elem_type_name","elem_type_name","empty","empty","empty","empty","empty","empty_device","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal_elem","equal_elem","equal_elem","equal_elem","equivalent","equivalent","equivalent","equivalent","erf","exp","exp","exp","exp","exp","exp2","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","exp_m1","f16","flatten","float","float","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_bits","from_bits","from_bool","from_bool_device","from_data","from_data","from_data","from_data","from_data","from_data_device","from_elem","from_elem","from_elem","from_f32","from_f32","from_f32","from_f32","from_f32_const","from_f32_const","from_f64","from_f64","from_f64","from_f64","from_f64_const","from_f64_const","from_floats","from_full_precision","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i8","from_i8","from_inner","from_ints","from_le_bytes","from_le_bytes","from_ne_bytes","from_ne_bytes","from_primitive","from_str","from_str","from_str_radix","from_str_radix","from_tensor","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u8","from_u8","from_usize","full","full","full","full","full","full_device","gather","gather","gather","gather","ge","ge","grad","grad_remove","grad_replace","greater","greater","greater","greater","greater_elem","greater_elem","greater_elem","greater_elem","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","gt","gt","hypot","hypot","hypot","hypot","infinity","infinity","infinity","infinity","inner","inplace","int","int","integer_decode","integer_decode","integer_decode","integer_decode","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_data","into_data","into_data","into_data","into_data","into_iter","into_primitive","into_scalar","into_shape","into_shape","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_normal","is_normal","is_normal","is_require_grad","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_valid_bit_pattern","is_valid_bit_pattern","is_zero","is_zero","iter_dim","le","le","ln","ln","ln","ln","ln_1p","ln_1p","ln_1p","ln_1p","log","log","log","log","log","log10","log10","log10","log10","log1p","log2","log2","log2","log2","loss","lower","lower","lower","lower","lower_elem","lower_elem","lower_elem","lower_elem","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","lt","lt","make_element","make_element","map","mask_fill","mask_fill","mask_fill","mask_fill","mask_where","mask_where","mask_where","mask_where","matmul","matmul","max","max","max","max","max","max","max","max","max","max","max","max","max_dim","max_dim","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","mean","mean","mean","mean","mean_dim","mean_dim","mean_dim","mean_dim","min","min","min","min","min","min","min","min","min","min","min","min","min_dim","min_dim","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","module","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_scalar","mul_scalar","mul_scalar","mul_scalar","name","name","name","name","nan","nan","nan","nan","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg_infinity","neg_infinity","neg_infinity","neg_infinity","neg_zero","neg_zero","neg_zero","neg_zero","new","new","new","new","new","next","num_elements","one","one","one_hot","ones","ones","ones","ones","ones","ones_device","ones_like","ops","partial_cmp","partial_cmp","powf","powf","powf","powf","powf","powi","powi","powi","powi","powi","powi","precision","precision","precision","product","product","product","product","random","random","random","random","random","random","random_device","random_like","read","read_sync","recip","recip","recip","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","repeat","repeat","repeat","repeat","repeat","require_grad","reshape","reshape","reshape","reshape","reshape","reshape","round","round","round","round","round","round","sample","sampler","scatter","scatter","scatter","scatter","select","select","select","select","select_assign","select_assign","select_assign","select_assign","serialize","serialize","serialize","serialize","serialize_as_f32","serialize_as_f32","serialize_as_string","serialize_as_string","set_print_options","set_require_grad","shape","shape","shape","shape","shape","shape","shape","shape","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin","sin","sin_cos","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sinh","slice","slice","slice","slice","slice","slice_assign","slice_assign","slice_assign","slice_assign","slice_assign","sqrt","sqrt","sqrt","sqrt","sqrt","squeeze","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sum","sum","sum","sum","sum","sum","sum","sum","sum_dim","sum_dim","sum_dim","sum_dim","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","tan","tan","tan","tan","tanh","tanh","tanh","tanh","tanh","testgen_abs","testgen_add","testgen_aggregation","testgen_all","testgen_arange","testgen_arange_step","testgen_arg","testgen_cast","testgen_cat","testgen_clamp","testgen_clone_invariance","testgen_cos","testgen_cov","testgen_create_like","testgen_diagonal","testgen_display","testgen_div","testgen_erf","testgen_exp","testgen_flatten","testgen_full","testgen_gather_scatter","testgen_gelu","testgen_init","testgen_iter_dim","testgen_log","testgen_log1p","testgen_map_comparison","testgen_mask","testgen_matmul","testgen_maxmin","testgen_module_adaptive_avg_pool1d","testgen_module_adaptive_avg_pool2d","testgen_module_avg_pool1d","testgen_module_avg_pool2d","testgen_module_conv1d","testgen_module_conv2d","testgen_module_conv_transpose1d","testgen_module_conv_transpose2d","testgen_module_forward","testgen_module_max_pool1d","testgen_module_max_pool2d","testgen_module_unfold4d","testgen_mul","testgen_neg","testgen_one_hot","testgen_powf","testgen_random","testgen_relu","testgen_repeat","testgen_reshape","testgen_select","testgen_sigmoid","testgen_silu","testgen_sin","testgen_slice","testgen_softmax","testgen_sqrt","testgen_squeeze","testgen_sub","testgen_tanh","testgen_tanh_activation","testgen_transpose","testgen_var","threshold","to_be_bytes","to_be_bytes","to_bits","to_bits","to_data","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_device","to_device","to_device","to_device","to_device","to_f32","to_f32","to_f32","to_f32","to_f32_const","to_f32_const","to_f64","to_f64","to_f64","to_f64","to_f64_const","to_f64_const","to_full_precision","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_radians","to_radians","to_radians","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","total_cmp","total_cmp","transpose","transpose","transpose","transpose","transpose","trunc","trunc","trunc","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsqueeze","value","value","var","var_bias","var_mean","var_mean_bias","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros_device","zeros_like","gelu","log_sigmoid","log_softmax","relu","sigmoid","silu","softmax","tanh","ADBackend","Backend","BoolTensorPrimitive","Device","FloatElem","FullPrecisionBackend","FullPrecisionElem","Gradients","InnerBackend","IntElem","IntTensorPrimitive","TensorPrimitive","ad_enabled","ad_enabled","backward","from_inner","grad","grad_remove","grad_replace","inner","name","seed","sync","sync","Args","Benchmark","BenchmarkResult","borrow","borrow_mut","execute","fmt","fmt","from","into","name","num_samples","num_samples","prepare","run","run","run_benchmark","to_string","try_from","try_into","type_id","vzip","TensorContainer","borrow","borrow_mut","default","fmt","from","get","into","is_empty","len","new","register","remove","try_from","try_into","type_id","vzip","cross_entropy_with_logits","adaptive_avg_pool1d","adaptive_avg_pool2d","avg_pool1d","avg_pool2d","conv1d","conv2d","conv_transpose1d","conv_transpose2d","embedding","max_pool1d","max_pool1d_with_indices","max_pool2d","max_pool2d_with_indices","unfold4d","ActivationOps","BoolTensorOps","Conv1dBackward","Conv2dBackward","ConvOptions","ConvTransposeOptions","IntTensorOps","MaxPool1dBackward","MaxPool1dWithIndices","MaxPool2dBackward","MaxPool2dWithIndices","ModuleOps","TensorOps","UnfoldOptions","abs","adaptive_avg_pool1d","adaptive_avg_pool1d","adaptive_avg_pool1d_backward","adaptive_avg_pool1d_backward","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","arange","arange","arange_step","arange_step","argmax","argmin","avg_pool1d","avg_pool1d","avg_pool1d_backward","avg_pool1d_backward","avg_pool2d","avg_pool2d_backward","bias_grad","bias_grad","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_repeat","bool_repeat","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_data","bool_to_data","bool_to_device","bool_transpose","bool_transpose","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp","clamp_max","clamp_max","clamp_min","clamp_min","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv1d","conv1d","conv1d_backward","conv1d_backward","conv2d","conv2d_backward","conv2d_backward","conv_transpose1d","conv_transpose1d","conv_transpose1d_backward","conv_transpose1d_backward","conv_transpose2d","conv_transpose2d_backward","conv_transpose2d_backward","cos","detach","detach","device","dilation","dilation","dilation","div","div_scalar","embedding","embedding","embedding_backward","embedding_backward","empty","equal","equal_elem","erf","exp","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_data","from_full_precision","full","full","gather","gelu","gelu","gelu_backward","gelu_backward","greater","greater_elem","greater_equal","greater_equal_elem","groups","groups","indices","indices","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp","int_clamp_max","int_clamp_max","int_clamp_min","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max","int_max","int_max_dim","int_max_dim","int_max_dim_with_indices","int_max_dim_with_indices","int_mean","int_mean","int_mean_dim","int_min","int_min","int_min_dim","int_min_dim","int_min_dim_with_indices","int_min_dim_with_indices","int_mul","int_mul_scalar","int_neg","int_neg","int_ones","int_repeat","int_repeat","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_data","int_to_data","int_to_device","int_transpose","int_transpose","int_zeros","into","into","into","into","into","into","into","into","into","into_data","into_int","is_require_grad","is_require_grad","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max","max","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_pool1d","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool1d_with_indices_backward","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean","mean_dim","min","min","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","mul","mul_scalar","neg","neg","new","new","new","new","new","new","new","new","new","ones","ones","output","output","padding","padding","padding","padding_out","pool","powf","random","relu","relu","relu_backward","relu_backward","repeat","repeat","reshape","scatter","select","select_assign","set_require_grad","set_require_grad","shape","sin","slice","slice_assign","sqrt","stride","stride","stride","sub","sub_scalar","sum","sum_dim","swap_dims","tanh","to_data","to_data","to_device","to_full_precision","to_owned","to_owned","to_owned","transpose","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold4d","unfold4d","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights_grad","weights_grad","x_grad","x_grad","x_grad","x_grad","zeros","zeros","calculate_conv_output_size","calculate_conv_padding"],"q":[[0,"burn_tensor"],[1357,"burn_tensor::activation"],[1365,"burn_tensor::backend"],[1389,"burn_tensor::benchmark"],[1411,"burn_tensor::container"],[1428,"burn_tensor::loss"],[1429,"burn_tensor::module"],[1443,"burn_tensor::ops"],[1819,"burn_tensor::ops::conv"],[1821,"core::ops::range"],[1822,"core::convert"],[1823,"core::clone"],[1824,"core::fmt"],[1825,"core::cmp"],[1826,"alloc::vec"],[1827,"core::num"],[1828,"core::result"],[1829,"serde::de"],[1830,"serde::de"],[1831,"num_traits::cast"],[1832,"core::marker"],[1833,"core::num::dec2flt"],[1834,"num_traits::cast"],[1835,"core::marker"],[1836,"rand_core"],[1837,"core::cmp"],[1838,"core::marker"],[1839,"serde::ser"],[1840,"core::any"],[1841,"core::hash"],[1842,"core::cmp"]],"d":["Trait that list all operations that can be applied on all …","Bernoulli distribution.","Bernoulli distribution with the given probability.","A type-level representation of the kind of a bool tensor.","Concrete variant.","Approximate number of <code>bf16</code> significant digits in base 10","Approximate number of <code>f16</code> significant digits in base 10","Data structure for tensors.","Data structure for serializing and deserializing tensor …","Uniform distribution from 0 (inclusive) to 1 (exclusive).","Dimension trait.","Iterator given by (Tensor::iter_dim).","Distribution for random value of a tensor.","Distribution sampler for random value of a tensor.","Distribution sampler kind for random value of a tensor.","Double precision, e.g. f64.","","","<code>bf16</code> Euler’s number (ℯ)","<code>f16</code> Euler’s number (ℯ)","<code>bf16</code> machine epsilon value","<code>f16</code> machine epsilon value","The type of the tensor elements.","Element trait for tensor.","Element conversion trait for tensor.","Element precision trait for tensor.","Element trait for random value of a tensor.","","","<code>bf16</code> 1/π","<code>f16</code> 1/π","","","<code>bf16</code> 1/√2","<code>f16</code> 1/√2","","","<code>bf16</code> 2/π","<code>f16</code> 2/π","","","<code>bf16</code> 2/√π","<code>f16</code> 2/√π","","","<code>bf16</code> π/2","<code>f16</code> π/2","","","<code>bf16</code> π/3","<code>f16</code> π/3","","","<code>bf16</code> π/4","<code>f16</code> π/4","","","<code>bf16</code> π/6","<code>f16</code> π/6","","","<code>bf16</code> π/8","<code>f16</code> π/8","A type-level representation of the kind of a float tensor","Full precision, e.g. f32.","Half precision, e.g. f16.","<code>bf16</code> positive Infinity (+∞)","<code>f16</code> positive Infinity (+∞)","A type-level representation of the kind of a int tensor.","","","<code>bf16</code> 𝗅𝗇 10","<code>f16</code> 𝗅𝗇 10","","","<code>bf16</code> 𝗅𝗇 2","<code>f16</code> 𝗅𝗇 2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀2","<code>f16</code> 𝗅𝗈𝗀₁₀2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀ℯ","<code>f16</code> 𝗅𝗈𝗀₁₀ℯ","","","<code>bf16</code> 𝗅𝗈𝗀₂10","<code>f16</code> 𝗅𝗈𝗀₂10","","","<code>bf16</code> 𝗅𝗈𝗀₂ℯ","<code>f16</code> 𝗅𝗈𝗀₂ℯ","Number of <code>bf16</code> significant digits in base 2","Number of <code>f16</code> significant digits in base 2","Largest finite <code>bf16</code> value","Largest finite <code>f16</code> value","Maximum possible <code>bf16</code> power of 10 exponent","Maximum possible <code>f16</code> power of 10 exponent","Maximum possible <code>bf16</code> power of 2 exponent","Maximum possible <code>f16</code> power of 2 exponent","Maximum subnormal <code>bf16</code> value","Maximum subnormal <code>f16</code> value","Smallest finite <code>bf16</code> value","Smallest finite <code>f16</code> value","Minimum possible normal <code>bf16</code> power of 10 exponent","Minimum possible normal <code>f16</code> power of 10 exponent","One greater than the minimum possible normal <code>bf16</code> power of …","One greater than the minimum possible normal <code>f16</code> power of …","Smallest positive normal <code>bf16</code> value","Smallest positive normal <code>f16</code> value","Minimum positive subnormal <code>bf16</code> value","Minimum positive subnormal <code>f16</code> value","<code>bf16</code> Not a Number (NaN)","<code>f16</code> Not a Number (NaN)","<code>bf16</code> negative infinity (-∞).","<code>f16</code> negative infinity (-∞)","<code>bf16</code> -1","<code>f16</code> -1","<code>bf16</code> -0","<code>f16</code> -0","Named dimension macro.","Named dimension macro.","Named dimensions trait.","A tensor with named dimensions.","Normal distribution.","Normal distribution with the given mean and standard …","Trait that list all operations that can be applied on all …","<code>bf16</code> 1","<code>f16</code> 1","Other precision.","","","<code>bf16</code> Archimedes’ constant (π)","<code>f16</code> Archimedes’ constant (π)","Element precision trait for tensor.","The primitive type of the tensor.","Options for Tensor pretty printing","The radix or base of the internal representation of <code>bf16</code>","The radix or base of the internal representation of <code>f16</code>","Define how data is read, sync or async.","Trait used for reshape arguments.","","","<code>bf16</code> √2","<code>f16</code> √2","Shape of a tensor.","Standard distribution.","Sync data variant.","Transpose marker (zero-size type). Used to sugar the …","A tensor with a given backend, shape and data type.","Tensor type.","A type-level representation of the kind of a tensor.","Uniform distribution.","Uniform distribution. The range is inclusive.","<code>bf16</code> 0","<code>f16</code> 0","Calculate absolute value on all elements of a tensor","","","","","","","Apply element wise absolute value operation","","","","","","","","","","","","","","","The activation module.","Adds two tensors together.","","","","","","","","","","Applies element wise addition operation.","","","","","","","","Adds a scalar to a tensor element-wise.","Applies element wise addition operation with a scalar.","","","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Gets the indices of the maximum elements of a tensor along …","Applies the argmax function along the given dimension and …","","","Gets the indices of the minimum elements of a tensor along …","Applies the argmin function along the given dimension and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Asserts the data is approximately equal to another data.","Asserts each value is within a given range.","","","","","","","","","","","","","The backend module.","Backward pass of the tensor.","This module provides benchmark utilities for easily and …","A 16-bit floating point type implementing the <code>bfloat16</code> …","","Inverses boolean values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Concatenates the given tensors along the given dimension.","Concatenates all tensors into a new one along the given …","","","","","","","","","","","","","","We use a macro for all checks, since the panic message …","Clamp the tensor between the given min and max values.","Restrict a value to a certain interval unless it is NaN.","Restrict a value to a certain interval unless it is NaN.","Clamp the tensor between the given min and max values.","","","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","","","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","","","","","Returns the floating point category of the number.","","","Returns the floating point category of the number.","","","","","","","","","","","","","","","","","","","","","","","","","The container module.","Converts the data to a different element type.","Converts the data to a different element type.","Converts the data to a different element type.","Converts the distribution to a different element type.","Returns a number composed of the magnitude of <code>self</code> and the …","Returns a number composed of the magnitude of <code>self</code> and the …","","","","","Applies element wise cosine operation.","","","","","Calculate covaraince matrix between different entries …","","","","","","Detach the current tensor from the autodiff graph. This …","Returns the device on which the tensor is allocated.","Returns the device of the current tensor.","","","","Create diagonal matrix.","Returns the dimensions of the current tensor.","The dimensions of the tensor.","Divides two tensors.","","","","","","","","","Applies element wise division operation.","","","","","","","","","Divides a tensor by a scalar element-wise.","Applies element wise division operation with a scalar.","","","number of starting elements and ending elements to display","Converts and returns the converted element.","","","Returns the name of the element type.","Returns the name of the element type.","Creates an empty tensor with the given shape.","Create an empty tensor of the given shape.","","","","Create an empty tensor of the given shape.","","","","","","","","","","","","","Equates the given tensors.","Applies element wise equal comparison and returns a …","","","","Element-wise equality between two tensors.","Applies element wise equal comparison and returns a …","","","","","","","Applies the error function element wise.","","","","","Applies element wise exponential operation.","","","","","","","","","A 16-bit floating point type implementing the IEEE …","Flatten the tensor along a given range of dimensions.","Returns a new tensor with the same shape and device as the …","Convert the bool tensor into an float tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Constructs a <code>bf16</code> value from the raw bits.","Constructs a 16-bit floating point value from the raw bits.","Create a boolean tensor from data.","Create a boolean tensor from data on the given device.","Creates a tensor from the given data.","Create a tensor from the given data.","","","","Create a tensor from the given data on the given device.","Converts an element to another element.","","","","Constructs a <code>bf16</code> value from a 32-bit floating point value.","","Constructs a 16-bit floating point value from a 32-bit …","Constructs a <code>bf16</code> value from a 32-bit floating point value.","Constructs a 16-bit floating point value from a 32-bit …","","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","Create a tensor from floats (f32).","Returns a tensor on the selected backend from a full …","","","","","","","","","Convert a tensor to the autodiff backend.","Create a tensor from integers (i32).","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Converts from a primitive tensor into a tensor.","","","","","Create a named tensor from a tensor.","","","","","","","","","Converts the usize data to a different element type.","Creates a tensor filled with elements equal to the given …","Create a tensor of the given shape where each element is …","","","Populates the data with the given value","Create a tensor of the given shape where each element is …","Gathers elements from a tensor along an axis.","Gather tensor elements corresponding to the given indices …","","","","","Get the gradients of a tensor if it exist.","Remove the grad tensor from the grads struct returning the …","Replace the grad tensor from the grads struct with the …","Element-wise greater than comparison between two tensors.","Applies element wise greater comparison and returns a …","","","Element-wise greater than comparison between a tensor and …","Applies element wise greater comparison and returns a …","","","Element-wise greater than or equal comparison between two …","Applies element wise greater-equal comparison and returns …","","","Element-wise greater than or equal comparison between a …","Applies element wise greater-equal comparison and returns …","","","","","","","","","","","","","Returns the inner tensor without the autodiff information.","Executes an operation on the tensor and modifies its value.","Returns a new tensor with the same shape and device as the …","Convert the bool tensor into an int tensor.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the data from the tensor.","Returns the data of the current tensor.","","","","","Converts the tensor into a primitive tensor.","Convert the tensor into a scalar.","Converts to a shape.","","","","Returns <code>true</code> if this number is neither infinite nor NaN.","","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","","Returns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.","","","Returns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.","","","Returns <code>true</code> if this value is NaN and <code>false</code> otherwise.","Returns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.","","","","","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","","","Returns true if the tensor requires gradients during the …","","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","","","","","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","","","Iterate over slices of tensors alongside a given dimension.","","","","","","","","","","","","","","","Applies element wise natural log operation <em>ln</em>.","","","","","Applies the natural logarithm of one plus the input …","","","","","The loss module.","Element-wise less than comparison between two tensors.","Applies element wise lower comparison and returns a …","","","Element-wise less than comparison between a tensor and a …","Applies element wise lower comparison and returns a …","","","Element-wise less than or equal comparison between two …","Applies element wise lower-equal comparison and returns a …","","","Element-wise less than or equal comparison between a …","Applies element wise lower-equal comparison and returns a …","","","","","Macro to implement the element trait for a type.","Macro to implement the element trait for a type.","Map the current reader to another type.","Fills elements of a tensor based on a boolean mask.","Update the given tensor with the value where the mask is …","","","Selects elements from a tensor based on a boolean mask.","Update the given tensor with the value tensor where the …","","","Applies the matrix multiplication operation.","Applies the matrix multiplication operation.","Gets the maximum elements of a tensor along an axis.","","Returns the maximum of the two numbers.","","","","","","Returns the maximum of the two numbers.","Find the maximum value.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","","","","","","","","","","","Computes the mean of all the elements of the tensor.","Aggregate all elements in the tensor with the mean …","","","Computes the mean of all the elements of the tensor along …","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Gets the minimum elements of a tensor along an axis.","Returns the minimum of the two numbers.","","","","","","","Returns the minimum of the two numbers.","Find the minimum value.","","","Gets the minimum elements of a tensor along an axis.","Find the minimum value along the given dimension.","","","Gets the minimum elements and indices of a tensor along an …","Find the minimum value along the given dimension.","","","","","","","","","","","","","","","","","","","The burn module.","Multiplies two tensors.","","","","","","","","","Applies element wise multiplication operation.","","","","","Applies element wise multiplication operation.","","","","","","","","","Multiplies a tensor by a scalar element-wise.","Applies element wise multiplication operation with a …","","","The name of the tensor kind.","","","","","","","","Negates a tensor.","","","","","","Switch sign of each element in the tensor.","","","","","","","","","","","Constructs a new <code>Tensor</code>.","Constructs a new <code>DataSerialize</code>.","Constructs a new <code>Data</code>.","Constructs a new <code>DistributionSampler</code>.","Constructs a new <code>Shape</code>.","","Returns the total number of elements of a tensor having …","","","Create a one hot tensor.","Creates a tensor filled with ones.","Create a tensor of the given shape where each element is …","","","Populates the data with ones.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Operations on tensors module.","","","","","","","Applies element wise power operation.","","","","","","","Returns the precision of the element.","","","","","","","Returns a random value for the given distribution.","","","Create a random tensor of the given shape where each …","Populates the data with random values.","Create a random named tensor of the given shape where each …","Create a random tensor of the given shape on the given …","Returns a new tensor with the same shape and device as the …","Read the data.","Read the data only if sync, returns None if an async …","","","","","","","","","","","","","","","","","","","Repeat the tensor along the given dimension.","Repeat the tensor along the given dimension.","","","","Mark the tensor to keep gradients during the backward pass.","Reshapes the tensor.","Reshape the tensor to have the given shape.","","","","Reshape the tensor to have the given shape.","","","","","","","Sames a random value from the distribution.","Creates a new distribution sampler.","Scatters elements into a tensor along an axis.","Assign the gathered elements corresponding to the given …","","","Select tensor elements along the given dimension …","Select the tensor elements along the given dimension …","","","Assign the selected elements along the given dimension …","Assign the selected elements along the given dimension …","","","","","","Serializes the data.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a string.","Alternate serialize adapter for serializing as a string.","Set print options","Mark the tensor as tracked or untracked depending on the …","Returns the shape of the tensor.","Returns the shape of the current tensor.","","","","Returns the shape of the current tensor.","The shape of the tensor.","The shape of the tensor.","","","Returns a number that represents the sign of <code>self</code>.","","Returns a number that represents the sign of <code>self</code>.","","","","","","","","Applies element wise sine operation.","","","","","","","","","Select tensor elements corresponding for the given ranges.","Returns a tensor containing the elements selected from the …","","","","Assigns the given value to the tensor elements …","Returns a copy of the current tensor with the selected …","","","","","","","","Applies element wise root square operation.","Squeeze the tensor along the given dimension, removing the …","Subtracts two tensors.","","","","","","","","","Applies element wise subtraction operation.","","","","","","","","","Subtracts a scalar from a tensor element-wise.","Applies element wise subtraction operation with a scalar.","","","Sums all the elements of the tensor.","","","","","Aggregate all elements in the tensor with the sum …","","","Sums all the elements of the tensor along a dimension.","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Swaps two dimensions of a tensor.","Swaps two dimensions of a tensor.","","","","Swap two dimensions.","","","","","","","","","Applies element wise hyperbolic tangent operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of elements to start summarizing tensor","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Converts a <code>bf16</code> into the underlying bit representation.","Converts a <code>f16</code> into the underlying bit representation.","Returns the data of the current tensor without taking …","","","","","","","Moves the tensor to the given device.","Returns a new tensor on the given device.","","","","","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f32</code> value.","","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f32</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","","","Converts a <code>f16</code> value into a <code>f64</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","Converts a <code>f16</code> value into a <code>f64</code> value.","Returns a tensor with full precision based on the selected …","","","","","","","","","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","","","","","","","","","","","","","","","","","","","Converts the dimension to a string.","Converts the named dimensions to a string.","","","","","","","","","","","","","","Returns the ordering between <code>self</code> and <code>other</code>.","Returns the ordering between <code>self</code> and <code>other</code>.","Transposes a tensor.","Transpose the tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsqueeze the current tensor. Create new dimensions to fit …","The values of the tensor.","The values of the tensor.","Calculate the variance along the given dimension.","Calculate the variance along the given dimension without …","Calculate the variance along the given dimension and also …","Calculate the variance along the given dimension without …","","","","","","","","","","","","","","","","","","","","","Creates a tensor filled with zeros.","Create a tensor of the given shape where each element is …","","","Populates the data with zeros.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Applies the Gaussian Error Linear Units function as …","Applies the log sigmoid function.","Applies the log softmax function on the input tensor along …","Applies the rectified linear unit function.","Applies the sigmoid function.","Applies the silu function","Applies the softmax function on the input tensor along the …","Applies the tanh function","Trait that allows a backend to support autodiff.","This trait defines all types and functions needed for a …","Tensor primitive to be used for all bool operations.","Device type.","Float element type.","Pointer to another backend that have a full precision …","Full precision float element type.","Gradients type.","The inner backend type.","Int element type.","Tensor primitive to be used for all int operations.","Tensor primitive to be used for all float operations.","If autodiff is enabled.","If autodiff is enabled.","Backward pass.","Converts the inner backend tensor to the autodiff backend …","Returns the gradients of a tensor.","Pops the gradients of a tensor and returns them.","Replace the gradients of a tensor with the one provided.","Returns the tensor with inner backend type.","Name of the backend.","Seed the backend.","Sync the backend, ensure that all computation are finished.","Sync the backend, ensure that all computation are finished.","Benchmark arguments.","Benchmark trait.","Results of a benchmark run.","","","Execute the benchmark and returns the time it took to …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Name of the benchmark.","Number of samples required to have a statistical …","Number of samples required to have a statistical …","Prepare the benchmark, run anything that is essential for …","Run the benchmark a number of times.","Run the benchmark a number of times.","Runs the given benchmark on the device and prints result …","","","","","","Contains tensor of arbitrary dimension.","","","","","Returns the argument unchanged.","Get a tensor with the given ID.","Calls <code>U::from(self)</code>.","If any tensor is contained.","The number of tensors registered.","Create an empty container.","Register a new tensor for the given ID.","Remove a tensor for the given ID and returns it.","","","","","Computes the log softmax cross entropy between logits and …","Applies a 1D adaptive avg pooling.","Applies a 2D adaptive avg pooling.","Applies a 1D avg pooling.","Applies a 2D avg pooling.","Applies a 1D convolution.","Applies a 2D convolution.","Applies a 1D transposed convolution.","Applies a 2D transposed convolution.","Applies the embedding module.","Applies a 1D max pooling.","Applies a 1D max pooling.","Applies a 2D max pooling.","Applies a 2D max pooling with indices.","Applies a 4D to 3D unfold.","Activation function operations.","Bool Tensor API for basic operations, see tensor for …","Gradient computed during the backward pass for each tensor …","Gradient computed during the backward pass for each tensor …","Convolution options.","Transposed convolution options.","Int Tensor API for basic and numeric operations, see tensor","Gradient computed during the backward pass for each tensor …","Results from max_pool1d.","Gradient computed during the backward pass for each tensor …","Results from max_pool2d.","Module operations trait.","Operations on float tensors.","Unfold operation options.","Returns a new tensor with absolute values.","One dimensional adaptive avg pooling.","One dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 1d operation.","Backward pass for the adaptive avg pooling 1d operation.","Two dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 2d operation.","Adds two tensors together.","Adds a scalar to a tensor.","Creates a new tensor with values from the given range.","Creates a new tensor with values from the given range.","Creates a new tensor with values from the given range with …","Creates a new tensor with values from the given range with …","Gets the indices of the maximum elements of a tensor along …","Gets the indices of the minimum elements of a tensor along …","One dimensional avg pooling.","One dimensional avg pooling.","Backward pass for the avg pooling 1d operation.","Backward pass for the avg pooling 1d operation.","Two dimensional avg pooling.","Backward pass for the avg pooling 2d operation.","Bias gradient.","Bias gradient.","Concatenates the tensors along the given dimension.","Gets the device of the tensor.","Creates a new bool tensor.","Equates the two tensors.","Creates a tensor from the data structure.","Converts the tensor to a data structure.","Converts bool tensor to float tensor.","Converts bool tensor to int tensor.","Inverses boolean values.","Repeats one dimension of the tensor a given number of …","Repeats one dimension of the tensor a given number of …","Reshapes the tensor.","Returns the shape of the tensor.","Gets the values from the tensor for the given ranges.","Sets the values in the tensor for the given ranges.","Swaps two dimensions of a bool tensor.","Gets the data from the tensor.","Gets the data from the tensor.","Moves the tensor to the device.","Transposes a bool tensor.","Transposes a bool tensor.","","","","","","","","","","","","","","","","","","","Catcatenates tensors along a dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","","","","","","","Module with convolution operations.","One dimensional convolution.","One dimensional convolution.","Backward pass for the conv1d operation.","Backward pass for the conv1d operation.","Two dimensional convolution.","Backward pass for the conv2d operation.","Backward pass for the conv2d operation.","One dimensional transposed convolution.","One dimensional transposed convolution.","Backward pass for the conv transpose 1d operation.","Backward pass for the conv transpose 1d operation.","Two dimensional transposed convolution.","Backward pass for the conv transpose 2d operation.","Backward pass for the conv transpose 2d operation.","Returns a new tensor with cosine values.","Detaches a tensor from the computation graph.","Detaches a tensor from the computation graph.","Gets the device of the tensor.","Dilation.","Dilation.","The spacing between the blocks (patches) in the original …","Divides two tensors element-wise.","Divides a tensor by a scalar.","Embedding operation.","Embedding operation.","Embedding backward operation.","Embedding backward operation.","Creates an empty tensor with the given shape.","Equal comparison of two tensors.","Equal comparison of a tensor and a scalar.","Returns a new tensor with the error function values.","Returns a new tensor with exponential values.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new tensor from the data structure.","Converts a tensor from full precision.","Creates a tensor filled with given value.","Creates a tensor filled with given value.","Gather elements from a tensor.","Applies the Gelu activation function.","Applies the Gelu activation function.","Applies the Gelu activation function backward.","Applies the Gelu activation function backward.","Greater than comparison of two tensors.","Greater than comparison of a tensor and a scalar.","Greater than or equal comparison of two tensors.","Greater than or equal comparison of a tensor and a scalar.","Groups.","Groups.","The indices tensor.","The indices tensor.","Returns a new tensor with absolute values.","Elementwise addition.","Elementwise addition with a scalar.","Gets the indices of the maximum elements along a dimension.","Gets the indices of the minimum elements along a dimension.","Concatenates the given tensors along the given dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","Gets the device of the tensor.","Elementwise division.","Elementwise division with a scalar.","Creates a new int tensor.","Elementwise equality comparison.","Elementwise equality comparison with a scalar.","Creates a tensor from the data structure.","Creates a tensor filled with given value.","Creates a tensor filled with given value.","Gather elements from the tensor at the given indices.","Elementwise greater than comparison.","Elementwise greater than comparison with a scalar.","Elementwise greater than or equal comparison.","Elementwise greater than or equal comparison with a scalar.","Converts the tensor to a data structure.","Converts int tensor to float tensor.","Elementwise less than comparison.","Elementwise less than comparison with a scalar.","Elementwise less than or equal comparison.","Elementwise less than or equal comparison with a scalar.","Fills the tensor with the given value if the mask is true …","Fills the tensor with values from the source tensor if the …","Gets the maximum element in the tensor.","Gets the maximum element in the tensor.","Gets the maximum element in the tensor along a dimension.","Gets the maximum element in the tensor along a dimension.","Gets the maximum elements and corresponding indices along …","Gets the maximum elements and corresponding indices along …","Computes the mean of all elements in the tensor.","Computes the mean of all elements in the tensor.","Computes the mean of all elements in the tensor along a …","Gets the minimum element in the tensor.","Gets the minimum element in the tensor.","Gets the minimum elements in the tensor along a dimension.","Gets the minimum elements in the tensor along a dimension.","Gets the minimum elements and corresponding indices along …","Gets the minimum elements and corresponding indices along …","Elementwise multiplication.","Elementwise multiplication with a scalar.","Elementwise negation.","Elementwise negation.","Creates a tensor of ones.","Repeats the tensor along the given dimension the given …","Repeats the tensor along the given dimension the given …","Reshapes the tensor.","Scatter a given value to the tensor at the given indices.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Returns the shape of the tensor.","Gets the element at the given indices.","Sets the element at the given indices.","Elementwise subtraction.","Elementwise subtraction with a scalar.","Sums all elements in the tensor.","Sums all elements in the tensor along a dimension.","Swaps two dimensions of an int tensor.","Gets the data from the tensor.","Gets the data from the tensor.","Moves the tensor to the given device.","Transposes an int tensor.","Transposes an int tensor.","Creates a tensor of zeros.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the tensor to a data structure.","Converts float tensor to int tensor.","Returns the <code>require_grad</code> flag of a tensor.","Returns the <code>require_grad</code> flag of a tensor.","Returns a new tensor with natural logarithm values.","Returns a new tensor with logarithm values of (1 + Xi).","Less than comparison of two tensors.","Less than comparison of a tensor and a scalar.","Less than or equal comparison of two tensors.","Less than or equal comparison of a tensor and a scalar.","Update the given tensor with the value where the mask is …","Update the given tensor with the value tensor where the …","Multiplies two tensors together using matrix …","Gets the maximum element of a tensor.","Gets the maximum element of a tensor.","Gets the maximum elements of a tensor along an axis.","Gets the maximum elements of a tensor along an axis.","Gets the maximum elements of a tensor along an axis and …","Gets the maximum elements of a tensor along an axis and …","One dimensional max pooling.","One dimensional max pooling.","One dimensional max pooling with indices.","One dimensional max pooling with indices.","Backward pass for the max pooling 1d operation.","Backward pass for the max pooling 1d operation.","Two dimensional max pooling.","Two dimensional max pooling with indices.","Backward pass for the max pooling 2d operation.","Mean of all elements in a tensor.","Mean of all elements in a tensor.","Mean of all elements in a tensor along a dimension.","Gets the minimum element of a tensor.","Gets the minimum element of a tensor.","Gets the minimum elements of a tensor along an axis.","Gets the minimum elements of a tensor along an axis.","Gets the minimum elements of a tensor along an axis and …","Gets the minimum elements of a tensor along an axis and …","Multiplies two tensors together element-wise.","Multiplies a tensor by a scalar.","Negates a tensor element-wise.","Negates a tensor element-wise.","Constructs a new <code>Conv2dBackward</code>.","Constructs a new <code>MaxPool1dBackward</code>.","Constructs a new <code>MaxPool1dWithIndices</code>.","Constructs a new <code>MaxPool2dBackward</code>.","Constructs a new <code>MaxPool2dWithIndices</code>.","Constructs a new <code>Conv1dBackward</code>.","Constructs a new <code>ConvOptions</code>.","Constructs a new <code>ConvTransposeOptions</code>.","Constructs a new <code>UnfoldOptions</code>.","Creates a new tensor with ones.","Creates a new tensor with ones.","The output tensor.","The output tensor.","Padding.","Padding.","The number of zero-padding pixels added to each side of …","Padding out.","Module with pooling operations.","Returns a new tensor with values raised to the power of …","Creates a new tensor with random values.","Applies the ReLU activation function.","Applies the ReLU activation function.","Applies the ReLU activation function backward.","Applies the ReLU activation function backward.","Repeat the tensor along the given dimension.","Repeat the tensor along the given dimension.","Reshapes a tensor.","Scatter elements into a tensor.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Sets the <code>require_grad</code> flag of a tensor.","Sets the <code>require_grad</code> flag of a tensor.","Gets the shape of the tensor.","Returns a new tensor with sine values.","Select tensor elements corresponding for the given ranges.","Assign the selected elements corresponding for the given …","Returns a new tensor with square root values.","Stride.","Stride.","The number of positions to slide over the input tensor in …","Subtracts two tensors.","Subtracts a scalar from a tensor.","Sum of all elements in a tensor.","Sum of all elements in a tensor along a dimension.","Swaps two dimensions of a tensor.","Returns a new tensor with tangent values.","Converts the tensor to a data structure.","Converts the tensor to a data structure.","Moves the tensor to the given device.","Converts a tensor to full precision.","","","","Transposes a tensor.","Transposes a tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Four-dimensional unfolding.","Four-dimensional unfolding.","","","","","","","","","","Weights gradient.","Weights gradient.","Gradient.","Gradient.","Gradient.","Gradient.","Creates a new tensor with zeros.","Creates a new tensor with zeros.","Calculate the expected output size when doing a …","Calculate the expected padding size required when applying …"],"i":[0,61,37,0,58,1,2,0,0,37,0,0,0,0,0,38,1,2,1,2,1,2,32,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,38,38,1,2,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,0,0,61,37,0,1,2,38,1,2,1,2,0,34,0,1,2,0,0,1,2,1,2,0,61,58,0,0,41,0,61,37,1,2,5,1,1,1,2,2,2,3,35,10,1,1,2,2,1,1,2,2,1,1,2,2,0,5,1,1,1,1,2,2,2,2,3,3,3,35,10,1,1,2,2,5,3,35,10,3,3,3,3,5,3,35,10,5,3,35,10,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,1,2,2,22,22,1,1,2,2,1,1,2,2,1,1,2,2,0,3,0,0,3,3,58,59,71,29,61,1,1,2,2,3,35,10,30,36,22,37,62,38,39,40,58,59,71,29,61,1,2,3,35,10,30,36,22,37,62,38,39,40,32,3,35,10,30,1,1,2,2,1,1,1,2,2,2,0,5,1,2,3,35,10,5,3,35,10,5,3,35,10,1,1,1,2,2,2,1,2,3,35,10,30,36,22,37,38,39,40,1,2,3,35,10,30,36,22,37,38,39,40,0,36,22,22,37,1,2,1,1,2,2,3,1,1,2,2,3,1,2,1,2,36,3,32,3,35,10,30,3,3,39,5,1,1,1,1,2,2,2,2,3,3,3,35,10,1,1,2,2,5,3,35,10,71,6,1,2,32,32,32,3,35,10,30,3,1,1,1,2,2,2,1,2,36,22,38,39,32,3,35,10,30,5,3,35,10,36,22,38,39,3,1,1,2,2,3,1,1,2,2,1,1,2,2,0,3,3,3,1,1,1,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,35,10,30,36,22,22,38,39,40,40,1,1,1,2,2,2,58,59,71,29,61,1,1,1,1,2,2,2,2,3,3,35,10,30,36,22,22,22,22,22,22,22,22,37,62,38,39,39,39,39,39,40,40,1,2,1,2,3,3,32,3,35,10,30,3,6,1,2,1,1,2,2,1,2,1,1,2,2,1,2,3,3,1,2,1,2,1,2,1,2,3,3,1,2,1,2,3,1,2,1,2,40,1,2,1,2,1,2,1,2,22,5,3,35,10,22,3,5,3,35,10,1,2,3,3,3,5,3,35,10,5,3,35,10,5,3,35,10,5,3,35,10,1,2,1,1,2,2,1,1,2,2,3,3,3,3,1,1,2,2,58,59,71,29,61,1,2,3,35,10,30,36,22,37,62,38,39,40,32,3,35,10,30,59,3,3,68,39,1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,2,2,2,3,1,1,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,2,1,2,3,1,2,1,1,2,2,1,1,2,2,1,1,2,2,3,1,1,2,2,3,1,1,2,2,0,5,3,35,10,5,3,35,10,5,3,35,10,5,3,35,10,1,2,0,0,58,5,3,35,10,5,3,35,10,3,40,5,1,1,1,1,2,2,2,2,3,35,10,5,3,35,10,5,3,35,10,1,1,1,1,1,2,2,2,2,2,5,3,35,10,5,3,35,10,5,1,1,1,1,2,2,2,2,3,35,10,5,3,35,10,5,3,35,10,1,1,1,2,2,2,1,1,1,1,1,2,2,2,2,2,0,5,1,1,1,1,2,2,2,2,3,3,3,35,10,40,1,1,2,2,1,1,2,2,5,3,35,10,34,35,10,30,1,1,2,2,5,1,1,2,2,3,3,35,10,1,1,2,2,1,1,2,2,3,36,22,62,39,59,39,1,2,3,5,3,35,10,22,3,3,0,1,2,1,1,2,2,3,1,1,1,2,2,2,88,1,2,1,1,2,2,89,1,2,3,22,40,3,3,58,58,1,1,1,2,2,2,1,1,1,1,2,2,2,2,1,1,2,2,32,3,35,10,30,3,32,3,35,10,30,40,1,1,1,2,2,2,62,37,5,3,35,10,5,3,35,10,5,3,35,10,1,2,36,22,1,2,1,2,0,3,32,3,35,10,30,40,36,22,1,1,1,1,2,2,2,2,1,1,2,2,3,1,1,2,2,1,1,2,2,32,3,35,10,30,32,3,35,10,30,1,1,2,2,3,3,5,1,1,1,1,2,2,2,2,3,3,3,35,10,1,1,2,2,5,3,35,10,5,1,1,2,2,3,35,10,5,3,35,10,32,3,35,10,30,40,1,1,2,2,1,1,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,1,2,1,2,3,1,1,1,2,2,2,32,3,35,10,30,1,1,2,2,1,2,1,1,2,2,1,2,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,35,10,30,36,22,37,38,39,40,1,1,1,2,2,2,90,41,1,2,3,22,40,1,2,1,2,1,2,1,2,1,2,32,3,35,10,30,1,1,1,2,2,2,58,59,71,29,61,1,2,3,35,10,30,36,22,37,62,38,39,40,58,59,71,29,61,1,2,3,35,10,30,36,22,37,62,38,39,40,58,59,71,29,61,1,2,3,35,10,30,36,22,37,62,38,39,40,3,36,22,3,3,3,3,58,59,71,29,61,1,2,3,35,10,30,36,22,37,62,38,39,40,1,2,5,3,35,10,22,3,3,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,28,28,4,4,4,4,4,28,28,28,28,28,28,4,4,4,4,75,0,0,74,74,75,74,74,74,74,75,75,75,75,75,75,0,74,74,74,74,74,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,92,92,92,92,92,92,91,91,91,91,91,91,91,91,92,92,92,92,92,92,83,82,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,83,85,84,87,86,82,79,80,81,83,85,84,87,86,82,79,80,81,91,91,91,91,91,91,91,79,80,81,79,80,81,0,92,92,92,92,92,92,92,92,92,92,92,92,92,92,91,91,91,91,79,80,81,91,91,92,92,92,92,91,91,91,91,91,79,80,81,83,85,84,87,86,82,79,80,81,91,91,91,91,91,94,94,94,94,91,91,91,91,79,80,84,86,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,83,85,84,87,86,82,79,80,81,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,91,91,91,91,91,91,91,91,91,91,91,91,91,83,85,84,87,86,82,79,80,81,91,91,84,86,79,80,81,80,0,91,91,94,94,94,94,91,91,91,91,91,91,91,91,91,91,91,91,91,79,80,81,91,91,91,91,91,91,91,91,91,91,79,80,81,91,91,83,85,84,87,86,82,79,80,81,83,85,84,87,86,82,79,80,81,83,85,84,87,86,82,79,80,81,92,92,83,85,84,87,86,82,79,80,81,83,82,83,85,87,82,91,91,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[2,2],[-1,-2,[],[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[[1,1],1],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[2,2],2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],0,[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],[[[9,[8]]],[[3,[-1,10]]],4],[[[9,[8]]],[[3,[-1,10]]],4],[[[9,[8]],8],[[3,[-1,10]]],4],[[[9,[8]],8],[[3,[-1,10]]],4],[8],[[[3,[-1,-2]],8],[[3,[-1,10]]],4,[[5,[-1]]]],[8],[8],[8],[[[3,[-1,-2]],8],[[3,[-1,10]]],4,[[5,[-1]]]],[8],[8],[1,1],[1,11],[1,12],[1,13],[1,14],[1,15],[1,16],[1,8],[1,17],[1,18],[1,19],[1,20],[1,21],[2,17],[2,21],[2,19],[2,14],[2,15],[2,8],[2,18],[2,13],[2,16],[2,2],[2,20],[2,11],[2,12],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[[22,[-1]],[22,[-1]],8],7,[[23,[11]],24,25,26]],[[[22,[-1]],[9,[-2]]],7,27,27],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[1,1],1],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[2,2],2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],0,[[[3,[-1]]],[],28],0,0,[[[3,[-1]],29],[],4],[[[3,[-1,30]]],[[3,[-1,30]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[31,8]],[[[31,[[3,[-1,-2]]]],8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[31,8]],[[31,8]],[[31,8]],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[-1,-2,[],[]],[2,2],0,[[]],[[1,1,1],1],[[2,2,2],2],[[[3,[-1,-2]],-3,-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[1,33],[1,33],[1,33],[2,33],[2,33],[2,33],[1,1],[2,2],[[[3,[-1,-2]]],[[3,[-1,-2]]],[4,24],[[34,[-1]],24]],[35,35],[10,10],[30,30],[[[36,[-1]]],[[36,[-1]]],24],[[[22,[-1]]],[[22,[-1]]],24],[[[37,[-1]]],[[37,[-1]]],24],[38,38],[39,39],[[[40,[-1,-2]]],[[40,[-1,-2]]],[24,4],[24,[41,[-1]]]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[[36,[-1]]],[[36,[-2]]],27,27],[[[22,[42]]],[[22,[-1]]],27],[[[22,[-1]]],[[22,[-2]]],27,27],[[[37,[-1]]],[[37,[-2]]],27,27],[[1,1],1],[[2,2],2],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[[3,[-1]],8,8],[[3,[-1]]],4],[[],1],[[],2],[-1,[[43,[1]]],44],[-1,[[43,[2]]],44],[-1,[[43,[[36,[-2]]]]],44,45],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[[3,[-1,-2]]],[],4,[[32,[-1]]]],[[]],[[]],[[]],[8,[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]]],[[46,[8]]],4,[[32,[-1]]]],0,[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],0,[-1,-2,[],27],[1,-1,27],[2,-1,27],[[],47],[[],47],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[32,[-2]]]],[39],[39],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[32,[-2]]]],[[],-1,[]],[[],1],[[],1],[[],-1,[]],[[],2],[[],2],[[1,1],42],[[2,2],42],[[[36,[-1]],[36,[-1]]],42,26],[[[22,[-1]],[22,[-1]]],42,26],[[38,38],42],[[39,39],42],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[32,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],27],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],0,[[[3,[-1,-2]],8,8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[[3,[-1,10]]],[[3,[-1,35]]],4],[[[3,[-1,30]]],[[3,[-1]]],4],[1,1],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[2,2],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[[3,[-1,-2]],48],50,4,[[32,[-1]]]],[[[3,[-1,-2]],48],50,[4,25],[[34,[-1]],25]],[[35,48],50],[[10,48],50],[[30,48],50],[[[36,[-1]],48],50,25],[[[22,[-1]],48],50,25],[[[22,[-1]],48],50,25],[[38,48],50],[[39,48],50],[[[40,[-1,-2]],48],50,4,[[41,[-1]],[41,[-1]]]],[[[40,[-1,-2]],48],50,[25,4],[25,[41,[-1]]]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[-1,-2,[],[]],[2,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[21,1],[-1,-1,[]],[20,1],[-1,[[51,[1]]],52],[21,2],[20,2],[-1,[[51,[2]]],52],[-1,-1,[]],[[[40,[-1,-2]]],[[3,[-1]]],4,[[41,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[36,[-1]]],[[22,[-1]]],24],[[[46,[[46,[-1]]]]],[[22,[-1]]],[25,53]],[[[36,[-1]]],[[22,[-1]]],[]],[[[46,[[46,[[46,[[46,[-1]]]]]]]]],[[22,[-1]]],[25,53]],[[[54,[-1]]],[[22,[-1]]],[25,53]],[[[46,[[46,[[46,[-1]]]]]]],[[22,[-1]]],[25,53]],[-1,-1,[]],[[[46,[-1]]],[[22,[-1]]],[25,53]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[31,[19]]],39],[[[46,[8]]],39],[[[31,[8]]],39],[[[31,[12]]],39],[-1,-1,[]],[-1,-1,[]],[[[3,[-1]]],[[40,[-1,-2]]],4,[[41,[-1]]]],[[[46,[21]]],1],[[[46,[21]]],2],[13,1],[13,2],[[[22,[42]]],[[3,[-1,30]]],4],[[[22,[42]]],[[3,[-1,30]]],4],[22],[-1,[[3,[-2,-3]]],[[23,[22]]],4,[[32,[-2]]]],[22],[22],[22],[-1,[[3,[-2,-3]]],[[23,[22]]],4,[[32,[-2]]]],[-1,-2,52,[]],[-1,1,52],[-1,2,52],[15,[[51,[1]]]],[15,1],[15,[[51,[2]]]],[15,2],[15,1],[15,2],[11,[[51,[1]]]],[11,1],[11,2],[11,[[51,[2]]]],[11,1],[11,2],[-1,[[3,[-2]]],[[23,[[22,[15]]]]],4],[3,[[3,[-1]]],4],[18,[[51,[1]]]],[18,[[51,[2]]]],[16,[[51,[1]]]],[16,[[51,[2]]]],[12,[[51,[1]]]],[12,[[51,[2]]]],[20,[[51,[1]]]],[20,[[51,[2]]]],[3,[[3,[-1]]],28],[-1,[[3,[-2,10]]],[[23,[[22,[16]]]]],4],[[[46,[21]]],1],[[[46,[21]]],2],[[[46,[21]]],1],[[[46,[21]]],2],[[],[[3,[-1,-2]]],4,[[32,[-1]]]],[47,[[43,[1,55]]]],[47,[[43,[2,55]]]],[[47,17],[[43,[1]]]],[[47,17],[[43,[2]]]],[[[3,[-1]]],[[40,[-1,-2]]],4,[[41,[-1]]]],[13,[[51,[1]]]],[13,[[51,[2]]]],[17,[[51,[1]]]],[17,[[51,[2]]]],[19,[[51,[1]]]],[19,[[51,[2]]]],[21,[[51,[1]]]],[21,[[51,[2]]]],[[[22,[8]]],[[22,[-1]]],56],[[39,-1],[],6],[[-1,-2],[[3,[-3,-4]]],[[23,[39]]],6,4,[[5,[-3]]]],[[39,-1],[],6],[[39,-1],[],6],[[39,-1],[[22,[-1]]],[27,25]],[[-1,-2],[[3,[-3,-4]]],[[23,[39]]],6,4,[[5,[-3]]]],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[1,1],42],[[2,2],42],[[[3,[-1]]],[[51,[3]]],28],[[[3,[-1]]],[[51,[3]]],28],[[[3,[-1]],3],7,28],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[1,1],42],[[2,2],42],[[-1,-2],-2,[],[]],[[1,1],1],[[-1,-2],-2,[],[]],[[2,2],2],[[],1],[[],1],[[],2],[[],2],[[[3,[-1]]],3,28],[[[3,[-1]],-2],7,4,57],[[[3,[-1]]],[[3,[-1,10]]],4],[[[3,[-1,30]]],[[3,[-1,10]]],4],[1,[[7,[19,18,20]]]],[1,[[7,[19,18,20]]]],[2,[[7,[19,18,20]]]],[2,[[7,[19,18,20]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[58,[22]]]],[[[3,[-1,-2]]],22,4,[[32,[-1]]]],[[],[[58,[22]]]],[[],[[58,[22]]]],[[],[[58,[22]]]],[-1,-2,[],[]],[[[3,[-1,-2]]],[],4,[[32,[-1]]]],[[[3,[-1,-2]]],[],4,[[5,[-1]]]],[[-1,[3,[-2,-3]]],39,[],4,[[32,[-2]]]],[[39,[3,[-1,-2]]],39,4,[[32,[-1]]]],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[[[3,[-1]]],42,4],[1,42],[1,42],[1,42],[-1,42,[]],[2,42],[-1,42,[]],[2,42],[2,42],[1,42],[-1,42,[]],[1,42],[1,42],[2,42],[-1,42,[]],[2,42],[2,42],[-1,42,[]],[-1,42,[]],[1,42],[2,42],[[[3,[-1,-2]],8],[[59,[-1,-2]]],4,[[32,[-1]]]],[[1,1],42],[[2,2],42],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[1,1],1],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[2,2],2],[[[3,[-1]]],[[3,[-1]]],4],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],0,[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[1,1],42],[[2,2],42],0,0,[[[58,[-1]],-2],[[58,[-3]]],60,[57,60],60],[[[3,[-1,30]]],[],[]],[[[3,[-1,-2]],[3,[-1,30]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[[3,[-1,30]]],[],4],[[[3,[-1,30]]],[],4],[[[3,[-1,30]]],[],[]],[[[3,[-1,-2]],[3,[-1,30]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,30]]],[],4],[[[3,[-1,30]]],[],4],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[[40,[-1,-2]],[40,[-1,-3]]],[[40,[-1,-4]]],4,[[41,[-1]]],[[41,[-1]]],[[41,[-1]]]],[[]],[[1,1],1],[[1,1],1],[[-1,-2],-2,[],[]],[[1,1],1],[[2,2],2],[[-1,-2],-2,[],[]],[[2,2],2],[[2,2],2],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[8,7],[[[3,[-1,-2]],8],[[7,[[3,[-1,-2]],[3,[-1,10]]]]],4,[[5,[-1]]]],[8,7],[8,7],[[],1],[[],1],[[],1],[[],-1,[]],[[],-1,[]],[[],2],[[],-1,[]],[[],2],[[],2],[[],-1,[]],[[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[[]],[[1,1],1],[[1,1],1],[[-1,-2],-2,[],[]],[[1,1],1],[[-1,-2],-2,[],[]],[[2,2],2],[[2,2],2],[[2,2],2],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[8,7],[[[3,[-1,-2]],8],[[7,[[3,[-1,-2]],[3,[-1,10]]]]],4,[[5,[-1]]]],[8,7],[8,7],[[],1],[[],1],[[],-1,[]],[[],2],[[],2],[[],-1,[]],[[],1],[[],-1,[]],[[],1],[[],1],[[],-1,[]],[[],2],[[],2],[[],-1,[]],[[],2],[[],-1,[]],0,[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[[[40,[-1,-2]],[40,[-1,-2]]],[[40,[-1,-2]]],4,[[41,[-1]]]],[[-1,-2,-2],-2,[],[]],[[1,1,1],1],[[-1,-2,-2],-2,[],[]],[[2,2,2],2],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],[[],47],[[],47],[[],47],[[],47],[[],1],[[],1],[[],2],[[],2],[[]],[1],[1],[2],[2],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[[],1],[[],1],[[],2],[[],2],[[],1],[[],1],[[],2],[[],2],[[],[[3,[-1,-2]]],4,[[34,[-1]]]],[[[31,[-1]],[31,[8]]],[[36,[-1]]],[]],[[[31,[-1]],39],[[22,[-1]]],[]],[[[61,[-1]],-2],[[62,[-1,-2]]],63,64],[[[46,[8]]],39],[[[59,[-1,-2]]],51,4,[[32,[-1]]]],[39,8],[[],1],[[],2],[[8,8],[[3,[-1]]],4],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[39],[39],[39,[[22,[-1]]],[27,25]],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[[[3,[-1]]],[[3,[-1]]],4],0,[[1,1],[[51,[65]]]],[[2,2],[[51,[65]]]],[[-1,-2],-2,[],[]],[[1,1],1],[[2,2],2],[[-1,-2],-2,[],[]],[[[3,[-1]],15],[[3,[-1]]],4],[[-1,16],-2,[],[]],[[1,16],1],[[1,16],1],[[-1,16],-2,[],[]],[[2,16],2],[[2,16],2],[[],38],[[],38],[[],38],[-1,1,66],[-1,1,66],[-1,2,66],[-1,2,66],[[[37,[-1]],-2],-1,67,64],[[[37,[1]],-1],1,64],[[[37,[2]],-1],2,64],[[-1,37],[[3,[-2]]],[[23,[39]]],4],[[39,[37,[-1]],-2],[[22,[-1]]],27,64],[[-1,37],[[40,[-2,-3]]],[[23,[39]]],4,[[41,[-2]]]],[[-1,37],[[3,[-2]]],[[23,[39]]],4],[[[3,[-1]],37],[[3,[-1]]],4],[[[58,[-1]]],-1,[]],[[[58,[-1]]],[[51,[-1]]],[]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[2,2],[-1,-2,[],[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[[8,8]],[[[3,[-1,-2]],8,8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[8,8]],[[8,8]],[[8,8]],[[[3,[-1]]],[[3,[-1]]],4],[39],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[32,[-1]]],68],[39],[39],[39],[[[40,[-1,-2]],-3,-4],[[40,[-1,-4]]],4,[[41,[-1]]],[[23,[39]]],[[41,[-1]]]],[-1,-2,[],[]],[1,1],[1,1],[-1,-2,[],[]],[2,2],[2,2],[[[62,[-1,-2]]],-1,[63,27],64],[[[37,[-1]],-2],[[62,[-1,-2]]],63,64],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[1,-1],43,69],[[2,-1],43,69],[[[36,[-1]],-2],43,70,69],[[[22,[-1]]],[[36,[-1]]],[25,53]],[[1,-1],43,69],[[2,-1],43,69],[[1,-1],43,69],[[2,-1],43,69],[71,7],[[[3,[-1]],42],[[3,[-1]]],4],[[],39],[[[3,[-1,-2]]],39,4,[[32,[-1]]]],[[],39],[[],39],[[],39],[[[40,[-1,-2]]],39,4,[[41,[-1]]]],0,0,[1,1],[-1,-2,[],[]],[1,1],[1,1],[2,2],[-1,-2,[],[]],[2,2],[2,2],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[-1,[[7,[-2,-2]]],[],[]],[1,[[7,[1,1]]]],[2,[[7,[2,2]]]],[-1,[[7,[-2,-2]]],[],[]],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],[[[46,[[9,[8]]]]]],[[[3,[-1,-2]],[46,[[9,[8]]]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[3,[-1,-2]],[46,[[9,[8]]]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],[[]],[-1,1,66],[-1,1,66],[-1,2,66],[-1,2,66],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[[8,8]],[[[3,[-1,-2]],8,8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[8,8]],[[8,8]],[[8,8]],[[[40,[-1,-2]]],[[40,[-1,-3]]],4,[[41,[-1]]],[[41,[-1]]]],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[[[3,[-1]]],[[3,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[46,[21]]]],[2,[[46,[21]]]],[1,13],[2,13],[[[3,[-1,-2]]],22,4,[[32,[-1]]]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[-1,-2,[],[]],[2,2],[[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[]],[[]],[[]],[1,[[51,[15]]]],[1,15],[2,15],[2,[[51,[15]]]],[1,15],[2,15],[1,11],[1,[[51,[11]]]],[2,[[51,[11]]]],[2,11],[1,11],[2,11],[[[3,[-1]]],3,4],[1,[[51,[18]]]],[2,[[51,[18]]]],[1,[[51,[16]]]],[2,[[51,[16]]]],[1,[[51,[12]]]],[2,[[51,[12]]]],[1,[[51,[20]]]],[2,[[51,[20]]]],[1,[[46,[21]]]],[2,[[46,[21]]]],[1,[[46,[21]]]],[2,[[46,[21]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[1,1],[-1,-2,[],[]],[2,2],[2,2],[[],72],[[],72],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[-1,72,[]],[1,[[51,[13]]]],[2,[[51,[13]]]],[1,[[51,[17]]]],[2,[[51,[17]]]],[1,[[51,[19]]]],[2,[[51,[19]]]],[1,[[51,[21]]]],[2,[[51,[21]]]],[[1,1],65],[[2,2],65],[[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[]],[[]],[[]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[-1,-2,[],[]],[2,2],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],0,0,[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]],8],[[7,[[3,[-1]],[3,[-1]]]]],4],[[[3,[-1]],8],[[7,[[3,[-1]],[3,[-1]]]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],2],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[39],[39],[-1,[[22,[-2]]],[[23,[39]]],[27,25]],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,[[],42],[[],42],[[]],[[]],[[],51],[[],51],[[],7],[[]],[[],72],[19,7],[[],7],[[],7],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,7,[]],[[74,48],50],[[74,48],50],[-1,-1,[]],[-1,-2,[],[]],[-1,72,[]],[-1,8,[]],[-1,8,[]],[-1,[],[]],[-1,74,[]],[-1,74,[]],[-2,7,4,[[75,[-1]]]],[-1,72,[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,73,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[76,[-1]]],[77,26,78,25]],[[[76,[-1]],48],50,25],[-1,-1,[]],[[[76,[-1]],-1],[[51,[[3,[-2]]]]],[77,26,78,25],4],[-1,-2,[],[]],[[[76,[-1]]],42,[77,26,78,25]],[[[76,[-1]]],8,[77,26,78,25]],[[],[[76,[-1]]],[77,26,78,25]],[[[76,[-1]],-1,[3,[-2]]],7,[77,26,78,25],4],[[[76,[-1]],-1],[[51,[[3,[-2]]]]],[77,26,78,25],4],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,73,[]],[-1,-2,[],[]],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]],[46,[8]]],[[3,[-1]]],4],[[[3,[-1]],8,8,8,42],[[3,[-1]]],4],[[[3,[-1]],[46,[8]],[46,[8]],[46,[8]],42],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],79],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],79],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],80],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],80],[[3,[-1]]],4],[[[3,[-1]],[3,[-1,10]]],[[3,[-1]]],4],[[[3,[-1]],8,8,8,8],[[3,[-1]]],4],[[[3,[-1]],8,8,8,8],[[7,[[3,[-1]],[3,[-1,10]]]]],4],[[[3,[-1]],[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[3,[-1]]],4],[[[3,[-1]],[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[7,[[3,[-1]],[3,[-1,10]]]]],4],[[[3,[-1]],[46,[8]],81],[[3,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[8],[8],[[]],[[]],[[[46,[8]]]],[[]],[[]],[[]],[[[9,[8]]]],[[[9,[8]]]],[[[9,[8]],8]],[[[9,[8]],8]],[8],[8],[[8,8,8,42]],[[8,8,8,42]],[[8,8,8,42]],[[8,8,8,42]],[[[46,[8]],[46,[8]],[46,[8]],42]],[[[46,[8]],[46,[8]],[46,[8]],42]],0,0,[[31,8]],[[]],[39],[[]],[[[22,[42]]]],[[],[[58,[[22,[42]]]]]],[[]],[[]],[[]],[[8,8]],[[8,8]],[39],[[],39],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[8,8]],[[],[[58,[[22,[42]]]]]],[[],[[58,[[22,[42]]]]]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[31,8]],[[]],[[]],[[]],[[]],[[]],[[]],[79,79],[80,80],[81,81],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[51,79]],[[51,79]],[[51,79],[[82,[-1]]],[]],[[51,79],[[82,[-1]]],[]],[[51,79]],[[51,79],[[83,[-1]]],[]],[[51,79],[[83,[-1]]],[]],[[51,80]],[[51,80]],[[51,80],[[82,[-1]]],[]],[[51,80],[[82,[-1]]],[]],[[51,80]],[[51,80],[[83,[-1]]],[]],[[51,80],[[83,[-1]]],[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[39],[[]],[[]],[[]],[[]],[[79,48],50],[[80,48],50],[[81,48],50],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[22],[[]],[39],[39],[8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[8],[8],[[31,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39],[[]],[[]],[22],[39],[39],[8],[[]],[[]],[[]],[[]],[[],[[58,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[8],[8,7],[8,7],[[]],[[]],[8],[[]],[[]],[8],[8],[8,7],[8,7],[[]],[[]],[[]],[[]],[39],[[8,8]],[[8,8]],[39],[8],[8],[8],[[],39],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[]],[[]],[[]],[8],[[8,8]],[[],[[58,[22]]]],[[],[[58,[22]]]],[[]],[[]],[[]],[39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[58,[22]]]],[[]],[[],42],[[],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[8],[8,7],[8,7],[[8,8,8,8]],[[8,8,8,8]],[[8,8,8,8],[[84,[-1]]],[]],[[8,8,8,8],[[84,[-1]]],[]],[[8,8,8,8],[[85,[-1]]],[]],[[8,8,8,8],[[85,[-1]]],[]],[[[46,[8]],[46,[8]],[46,[8]],[46,[8]]]],[[[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[86,[-1]]],[]],[[[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[87,[-1]]],[]],[[]],[[]],[8],[[]],[[]],[8],[8],[8,7],[8,7],[[]],[[]],[[]],[[]],[51,[[83,[-1]]],4],[[],[[85,[-1]]],4],[[],[[84,[-1]]],4],[[],[[87,[-1]]],4],[[],[[86,[-1]]],4],[51,[[82,[-1]]],4],[[[46,[8]],[46,[8]],[46,[8]],8],79],[[[46,[8]],[46,[8]],[46,[8]],[46,[8]],8],80],[[[46,[8]],[46,[8]],[46,[8]]],81],[39],[39],0,0,0,0,0,0,0,[15],[[39,37]],[[]],[[]],[[]],[[]],[[8,8]],[[8,8]],[39],[8],[8],[8],[42],[42],[[],39],[[]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[]],0,0,0,[[]],[[]],[[]],[8],[[8,8]],[[]],[[],[[58,[22]]]],[[],[[58,[22]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[]],[[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[[[46,[8]],81]],[[[46,[8]],81]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[39],[39],[[8,8,8,8,8],8],[[8,8,8,8],8]],"c":[],"p":[[3,"bf16",0],[3,"f16",0],[3,"Tensor",0],[8,"Backend",1365],[8,"Numeric",0],[8,"ElementConversion",0],[15,"tuple"],[15,"usize"],[3,"Range",1821],[3,"Int",0],[15,"f64"],[15,"i64"],[15,"u16"],[15,"isize"],[15,"f32"],[15,"i32"],[15,"u32"],[15,"i16"],[15,"u64"],[15,"i8"],[15,"u8"],[3,"Data",0],[8,"Into",1822],[8,"Clone",1823],[8,"Debug",1824],[8,"PartialEq",1825],[8,"Element",0],[8,"ADBackend",1365],[3,"T",0],[3,"Bool",0],[3,"Vec",1826],[8,"BasicOps",0],[4,"FpCategory",1827],[8,"TensorKind",0],[3,"Float",0],[3,"DataSerialize",0],[4,"Distribution",0],[4,"Precision",0],[3,"Shape",0],[3,"NamedTensor",0],[8,"NamedDims",0],[15,"bool"],[4,"Result",1828],[8,"Deserializer",1829],[8,"Deserialize",1829],[15,"array"],[15,"str"],[3,"Formatter",1824],[3,"Error",1824],[6,"Result",1824],[4,"Option",1830],[8,"ToPrimitive",1831],[8,"Copy",1832],[15,"slice"],[3,"ParseFloatError",1833],[8,"FromPrimitive",1831],[8,"FnOnce",1834],[4,"Reader",0],[3,"DimIter",0],[8,"Send",1832],[4,"DistributionSamplerKind",0],[3,"DistributionSampler",0],[8,"SampleUniform",1835],[8,"RngCore",1836],[4,"Ordering",1825],[8,"Iterator",1837],[8,"Sized",1832],[8,"ReshapeArgs",0],[8,"Serializer",1838],[8,"Serialize",1838],[3,"PrintOptions",0],[3,"String",1839],[3,"TypeId",1840],[3,"BenchmarkResult",1389],[8,"Benchmark",1389],[3,"TensorContainer",1411],[8,"Hash",1841],[8,"Eq",1825],[3,"ConvOptions",1443],[3,"ConvTransposeOptions",1443],[3,"UnfoldOptions",1443],[3,"Conv1dBackward",1443],[3,"Conv2dBackward",1443],[3,"MaxPool1dWithIndices",1443],[3,"MaxPool1dBackward",1443],[3,"MaxPool2dWithIndices",1443],[3,"MaxPool2dBackward",1443],[8,"ElementPrecision",0],[8,"ElementRandom",0],[8,"Dim",0],[8,"TensorOps",1443],[8,"ModuleOps",1443],[8,"BoolTensorOps",1443],[8,"ActivationOps",1443],[8,"IntTensorOps",1443]]},\
"burn_tensor_testgen":{"doc":"","t":"X","n":["testgen"],"q":[[0,"burn_tensor_testgen"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"burn_wgpu":{"doc":"Burn WGPU Backend","t":"DNNNDDIIINDDNDDDELLLLLLLLLLKLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOOOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAOLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOOOLLLLLLLLLLLLLLLLLLLDNINDGGDEDDDLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLKLLFLLLLLLLMMLLLLLLLLLLFLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMMMDDDDDIDDIDDDDLFOFFOFLLLLLLLLLLLLLLLLLLLLLLFFLALLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLFOALLLLLLLLLLAALKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFOFFOFFOFFOFLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLAALLLLLLFFFFFFLLLLAALLLLLLLLALLFFFFFFFFDLLLLLFFLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFDLLLLMLLLMLLLMLLLMMLLLLLLL","n":["AutoGraphicsApi","BestAvailable","Cpu","DiscreteGpu","Dx11","Dx12","FloatElement","GraphicsApi","IntElement","IntegratedGpu","Metal","OpenGl","VirtualGpu","Vulkan","WebGpu","WgpuBackend","WgpuDevice","abs","ad_enabled","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","argmax","argmin","avg_pool2d","avg_pool2d_backward","backend","backend","backend","backend","backend","backend","backend","backend","binary_elemwise","binary_elemwise_inplace","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_device","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comparison","comparison_elem","comparison_elem_inplace","comparison_inplace","compute","conv2d","conv_transpose2d","cos","default","default","default","default","default","default","default","default","default","device","div","div_scalar","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","empty","eq","equal","equal_elem","equivalent","equivalent","equivalent","erf","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_data","from_full_precision","full","gather","greater","greater_elem","greater_equal","greater_equal_elem","hash","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_mean_dim","int_mul","int_mul_scalar","int_ones","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_device","int_zeros","into","into","into","into","into","into","into","into","into","into_data","into_int","kernel","kernel_wgsl","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","matmul_tile_2d","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean_dim","mul","mul_scalar","name","ones","powf","random","relu","reshape","scatter","seed","select","select_assign","shape","sin","slice","slice_assign","sqrt","sub","sub_scalar","sum","sum_dim","swap_dims","sync","tanh","tensor","to_device","to_full_precision","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_inplace","unary_scalar","unary_scalar_inplace","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zeros","DynamicKernel","Full","Kernel","Slice","StaticKernel","WgpuComputeClient","WgpuHandle","WgpuResource","WgpuResourceKind","WgpuServer","WgpuStorage","WorkGroup","alloc","as_binding","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone_into","compute_client","create","dealloc","downcast","downcast","downcast","downcast","downcast","downcast","downcast","empty","execute","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","id","id","id","init_async","into","into","into","into","into","into","into","kind","memory","new","new","new","new","new","new","num_invocations","offset","perform_deallocations","read","select_device","size","source","source","source","sync","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","workgroup","workgroup","workgroup","x","y","z","BinaryElemwiseInplaceRaw","BinaryElemwiseRaw","CastRaw","ContiguousRaw","DynamicKernelSettings","DynamicKernelSource","KernelSettings","SourceTemplate","StaticKernelSource","UnaryInplaceRaw","UnaryRaw","UnaryScalarInplaceRaw","UnaryScalarRaw","add_template","binary_elemwise","binary_elemwise","binary_elemwise_default","binary_elemwise_inplace","binary_elemwise_inplace","binary_elemwise_inplace_default","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_info","cast","complete","conv","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","fmt","from","from","from","from","from","from","from","from","from","from","from","id","id","into","into","into","into","into","into","into","into","into","into","into","into_contiguous","kernel_wgsl","matmul","new","new","new","new","new","new","new","new","new","new","pool","prng","register","source","source","source","source","source","source","source","source","source","source","source","source","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary","unary_default","unary_inplace","unary_inplace","unary_inplace_default","unary_scalar","unary_scalar","unary_scalar_default","unary_scalar_inplace","unary_scalar_inplace","unary_scalar_inplace_default","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Conv2d","ConvTranspose2d","borrow","borrow","borrow_mut","borrow_mut","downcast","downcast","from","from","into","into","new","new","source","source","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","MatmulMemCoalescingRaw","MatmulNaiveRaw","borrow","borrow","borrow_mut","borrow_mut","contiguous","contiguous_vectorized","downcast","downcast","from","from","into","into","matmul_mem_coalescing","matmul_mem_coalescing_default","matmul_naive","matmul_naive_default","matmul_tiling_2d","matmul_tiling_2d_default","new","new","source","source","tile","tile_vectorized","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vec4_primitive","vzip","vzip","matmul_tiling_2d","matmul_tiling_2d_default","matmul_tiling_2d","matmul_tiling_2d_default","matmul_tiling_2d","matmul_tiling_2d_default","matmul_tiling_2d","matmul_tiling_2d_default","MatmulTiling2Dvec4PrimitiveRaw","borrow","borrow_mut","downcast","from","into","matmul_tiling_2d_vec4_primitive","matmul_tiling_2d_vec4_primitive_default","new","source","try_from","try_into","type_id","upcast","vzip","AvgPool2dBackwardRaw","AvgPool2dRaw","MaxPool2d","MaxPool2dWithIndices","MaxPool2dWithIndicesBackward","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","downcast","downcast","downcast","downcast","downcast","from","from","from","from","from","into","into","into","into","into","new","new","new","new","new","source","source","source","source","source","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","random_bernoulli","random_normal","random_uniform","WgpuTensor","assert_is_on_same_device","borrow","borrow_mut","can_mut","client","clone","clone_into","copy","device","downcast","fmt","from","handle","into","is_contiguous","new","shape","strides","to_client","to_owned","try_from","try_into","type_id","upcast","vzip"],"q":[[0,"burn_wgpu"],[317,"burn_wgpu::compute"],[444,"burn_wgpu::kernel"],[621,"burn_wgpu::kernel::conv"],[647,"burn_wgpu::kernel::matmul"],[684,"burn_wgpu::kernel::matmul::contiguous"],[686,"burn_wgpu::kernel::matmul::contiguous_vectorized"],[688,"burn_wgpu::kernel::matmul::tile"],[690,"burn_wgpu::kernel::matmul::tile_vectorized"],[692,"burn_wgpu::kernel::matmul::vec4_primitive"],[707,"burn_wgpu::kernel::pool"],[772,"burn_wgpu::kernel::prng"],[775,"burn_wgpu::tensor"],[801,"wgpu_types"],[802,"alloc::vec"],[803,"burn_tensor::tensor::shape"],[804,"burn_tensor::tensor::data"],[805,"burn_common::reader"],[806,"core::ops::range"],[807,"core::clone"],[808,"core::option"],[809,"burn_tensor::tensor::ops::modules::base"],[810,"burn_tensor::tensor::ops::modules::base"],[811,"core::fmt"],[812,"core::fmt"],[813,"burn_tensor::tensor::ops::modules::base"],[814,"burn_tensor::tensor::data"],[815,"core::any"],[816,"burn_compute::storage::base"],[817,"wgpu"],[818,"burn_compute::memory_management::simple"],[819,"burn_compute::channel::mutex"],[820,"burn_compute::client"],[821,"burn_compute::server"],[822,"burn_compute::memory_management::base"],[823,"burn_compute::storage::base"],[824,"wgpu"],[825,"burn_tensor::tensor::element"]],"d":["Automatic graphics API based on OS.","The best available device found with the current graphics …","CPU.","Discrete GPU with the given index. The index is the index …","DirectX 11 graphics API.","DirectX 12 graphics API.","The float element type for the wgpu backend.","The basic trait to specify which graphics API to use as …","The int element type for the wgpu backend.","Integrated GPU with the given index. The index is the …","Metal graphics API.","OpenGL graphics API.","Virtual GPU with the given index. The index is the index …","Vulkan graphics API.","WebGpu graphics API.","Wgpu backend.","The device struct when using the <code>wgpu</code> backend.","","","","","","","","","","","The wgpu backend.","","","","","","","","Creates a binary elementwise kernel.","Creates a binary elementwise inplace kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a comparison kernel.","Creates a comparison elementwise kernel.","Creates a comparison elementwise inplace kernel.","Creates a comparison inplace kernel.","Compute related module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Kernel module","Generates kernel source code by replacing some information …","","","","","","","","","","Create a source template for tile 2d matmul.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tensor module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a unary kernel.","Creates a unary inplace kernel.","Creates a unary scalar kernel.","Creates a unary scalar inplace kernel.","","","","","","","","","","","","","","","","","","","","Wraps a dynamic kernel source into a kernel with launch …","Represents an entire buffer.","Kernel trait with the source that will be compiled and …","A slice over a buffer.","Wraps a static kernel source into a kernel with launch …","Wgpu compute client to communicate with the compute server.","Wgpu server handle.","The memory resource that can be allocated for wgpu.","How the resource is used, either as a slice or fully.","Wgpu compute server.","Buffer storage for wgpu.","Provides launch information specifying the number of work …","","Return the binding view of the buffer.","","","","","","","","","","","","","","","The wgpu buffer.","","","Get the compute client for the given device.","When we create a new handle from existing data, we use …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Identifier for the kernel, used for caching kernel …","","","Init the client async, necessary for wasm.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How the resource is used.","Handle for the memory in use.","Create a new storage on the given device.","Constructs a new <code>WorkGroup</code>.","Constructs a new <code>DynamicKernel</code>.","Constructs a new <code>StaticKernel</code>.","Create a new server.","Constructs a new <code>WgpuResource</code>.","Calculate the number of invocations of a compute shader.","Return the buffer offset.","Actually deallocates buffers tagged to be deallocated.","","Select the wgpu device and queue based on the provided …","Return the buffer size.","Source template for the kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Launch information.","","","Work groups for the x axis.","Work groups for the y axis.","Work groups for the z axis.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generate kernel source code by replacing some information …","Dynamic wgpu kernel to create a source template.","Generates kernel source code by replacing some information …","Kernel source code abstraction allowing for templating.","Static wgpu kernel to create a source template.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Add a new template.","Execute a binary kernel using the provided WORKGROUP.","Creates a binary elementwise kernel.","Execute a binary kernel using the default settings.","Execute a binary inplace kernel using the provided …","Creates a binary elementwise inplace kernel.","Execute a binary inplace kernel using the default settings.","","","","","","","","","","","","","","","","","","","","","","","Create a vector containing the dimension, strides and …","Cast a tensor to the given element type.","Complete the template and returns the source code.","Convolution kernels","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Identifier for the kernel, used for caching kernel …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make a wgpu tensor contiguous.","Generates kernel source code by replacing some information …","Matmul kernels","Constructs a new <code>ContiguousRaw</code>.","Constructs a new <code>DynamicKernelSettings</code>.","Constructs a new <code>BinaryElemwiseRaw</code>.","Constructs a new <code>BinaryElemwiseInplaceRaw</code>.","Constructs a new <code>CastRaw</code>.","Create a new source template.","Constructs a new <code>UnaryRaw</code>.","Constructs a new <code>UnaryInplaceRaw</code>.","Constructs a new <code>UnaryScalarRaw</code>.","Constructs a new <code>UnaryScalarInplaceRaw</code>.","Pooling kernels","Pseudo-random number generator kernels","Register the value for a placeholder item.","Source template for the kernel.","Source template for the kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute a unary kernel using the provided WORKGROUP.","Creates a unary kernel.","Execute a unary kernel using the default settings.","Execute a unary inplace kernel using the provided …","Creates a unary inplace kernel.","Execute a unary inplace kernel using the default settings.","Execute a unary scalar kernel using the provided WORKGROUP.","Creates a unary scalar kernel.","Execute a unary scalar kernel using the default settings.","Execute a unary scalar inplace kernel using the provided …","Creates a unary scalar inplace kernel.","Execute a unary scalar inplace kernel using the default …","","","","","","","","","","","","","","","","","","","","","","","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>Conv2d</code>.","Constructs a new <code>ConvTranspose2d</code>.","","","","","","","","","","","","","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","Loading to shared memory is done in a contiguous manner","Loading is done in a contiguous manner, with left hand …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Matrix multiplication using memory coalescing algorithm …","Matrix multiplication using memory coalescing algorithm …","Matrix multiplication using naive algorithm with custom …","Matrix multiplication using naive algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Constructs a new <code>MatmulMemCoalescingRaw</code>.","Constructs a new <code>MatmulNaiveRaw</code>.","","","Loading is done in a tile manner","Loading is done in a tile manner, with left hand tensor …","","","","","","","","","WGSL vec4 primitives are used on left hand tensor","","","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Matrix multiplication using tiling 2D algorithm with …","Generated kernel from wgsl file.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","vec4 multiplication using tiling 2d algorithm with vec4 …","vec4 multiplication using tiling 2d algorithm with vec4 …","Constructs a new <code>MatmulTiling2Dvec4PrimitiveRaw</code>.","","","","","","","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>AvgPool2dRaw</code>.","Constructs a new <code>AvgPool2dBackwardRaw</code>.","Constructs a new <code>MaxPool2d</code>.","Constructs a new <code>MaxPool2dWithIndicesBackward</code>.","Constructs a new <code>MaxPool2dWithIndices</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pseudo-random generator for bernoulli","Pseudo-random generator for normal distribution","Pseudo-random generator for uniform distribution","The basic tensor primitive struct.","Assert that both tensors are on the same device.","","","Check if the tensor is safe to mutate.","Compute client for wgpu.","","","Copy the current tensor.","The device of the current tensor.","","","Returns the argument unchanged.","The buffer where the data are stored.","Calls <code>U::from(self)</code>.","Check if the current tensor is contiguous.","Create a new tensor.","The shape of the current tensor.","The strides of the current tensor.","Change the context of the current tensor and return the …","","","","","",""],"i":[0,10,10,10,0,0,0,0,0,10,0,0,10,0,0,0,0,11,11,11,11,11,11,11,11,11,11,13,16,17,18,19,20,21,22,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,16,17,18,19,20,21,22,10,11,16,17,18,19,20,21,22,11,11,11,11,10,11,16,17,18,19,20,21,22,10,11,16,17,18,19,20,21,22,0,0,0,0,0,11,11,11,10,11,16,17,18,19,20,21,22,11,11,11,10,11,16,17,18,19,20,21,22,11,10,11,11,10,10,10,11,11,10,11,16,17,18,19,20,21,22,10,11,16,17,18,19,20,21,22,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,16,17,18,19,20,21,22,11,11,0,0,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,11,16,17,18,19,20,21,22,10,11,16,17,18,19,20,21,22,10,11,16,17,18,19,20,21,22,10,11,16,17,18,19,20,21,22,0,0,0,0,10,11,16,17,18,19,20,21,22,10,11,16,17,18,19,20,21,22,11,0,54,0,54,0,0,0,0,0,0,0,0,40,42,40,44,55,57,46,42,54,40,44,55,57,46,42,54,42,44,44,0,46,40,40,44,55,57,46,42,54,46,46,40,44,46,42,54,40,44,55,57,46,42,54,40,90,55,57,0,40,44,55,57,46,42,54,42,89,40,44,55,57,46,42,44,42,40,46,0,42,90,55,57,46,44,40,44,55,57,46,42,54,40,44,55,57,46,42,54,40,44,55,57,46,42,54,40,44,55,57,46,42,54,40,44,55,57,46,42,54,90,55,57,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,91,69,68,70,71,72,65,73,74,75,76,91,69,68,70,71,72,65,73,74,75,76,0,0,65,0,91,69,68,70,71,72,65,73,74,75,76,65,91,69,68,70,71,72,65,73,74,75,76,56,68,91,69,68,70,71,72,65,73,74,75,76,0,0,0,69,68,70,71,72,65,73,74,75,76,0,0,65,58,56,91,69,68,70,71,72,73,74,75,76,91,69,68,70,71,72,65,73,74,75,76,91,69,68,70,71,72,65,73,74,75,76,91,69,68,70,71,72,65,73,74,75,76,0,0,0,0,0,0,0,0,0,0,0,0,91,69,68,70,71,72,65,73,74,75,76,91,69,68,70,71,72,65,73,74,75,76,0,0,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,0,0,80,81,80,81,0,0,80,81,80,81,80,81,0,0,0,0,0,0,80,81,80,81,0,0,80,81,80,81,80,81,80,81,0,80,81,0,0,0,0,0,0,0,0,0,82,82,82,82,82,0,0,82,82,82,82,82,82,82,0,0,0,0,0,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,0,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],1],[[[3,[2]]]],[[]],[[]],[[]],[2],[2],[[[3,[2]],[3,[2]],[3,[2]],1]],[[[3,[2]],[3,[2]],[3,[2]],1]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,0,[[5,2]],[[]],[6],[[]],[[[7,[1]]]],[[],[[8,[[7,[1]]]]]],[[]],[[]],[[]],[6],[[],6],[[[3,[[9,[2]]]]]],[[[3,[[9,[2]]]]]],[[2,2]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,2]],[[]],[[]],[[]],[10,10],[[[11,[-1,-2,-3]]],[[11,[-1,-2,-3]]],[12,13],[12,14],[12,15]],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],[[-1,-2],23,[],[]],0,0,0,0,0,[[24,25]],[[24,26]],[[]],[[],10],[[],[[11,[-1,-2,-3]]],[27,13],[27,14],[27,15]],[[],16],[[],17],[[],18],[[],19],[[],20],[[],21],[[],22],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6],[[10,10],1],[[]],[[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[]],[[]],[[10,28],29],[[[11,[-1,-2,-3]],28],29,[30,13],[30,14],[30,15]],[[16,28],29],[[17,28],29],[[18,28],29],[[19,28],29],[[20,28],29],[[21,28],29],[[22,28],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[7],[[]],[[6,10]],[2],[[]],[[]],[[]],[[]],[[10,-1],23,31],[[]],[[]],[[]],[2],[2],[[5,2]],[[]],[[]],[[]],[[]],[[]],[[]],[6],[[]],[[]],[[[7,[-1]]],[],15],[2],[[]],[[]],[[]],[[]],[[],[[8,[[7,[-1]]]]],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[[]],[[]],[6],[6],[2],[2],[2],[[],6],[[[3,[[9,[2]]]]]],[[[3,[[9,[2]]]]]],[[]],[[]],[[]],[2],[[2,2]],[[]],[6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[7]]]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[3,[2]],[3,[2]],[3,[2]],[3,[2]]]],[[[3,[2]],[3,[2]],[3,[2]],[3,[2]]],[[32,[[11,[-1,-2,-3]]]]],13,14,15],[[[3,[2]],[3,[2]],[3,[2]],[3,[2]]],[[33,[[11,[-1,-2,-3]]]]],13,14,15],[2],[[]],[[]],[[],34],[6],[35],[[6,36]],[[]],[6],[2],[37,23],[2],[2],[[],6],[[]],[[[3,[[9,[2]]]]]],[[[3,[[9,[2]]]]]],[[]],[[]],[[]],[[]],[2],[[2,2]],[[],23],[[]],0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,0,0,0,[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6],0,0,0,0,0,0,0,0,0,0,0,0,[[40,2],41],[42,43],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[44,44],[[-1,-2],23,[],[]],[10,[[48,[[46,[[45,[40]]]],[47,[[46,[[45,[40]]]]]]]]]],[[[46,[-1]],[50,[49]]],[[51,[[46,[-1]]]]],[[52,[40]]]],[[40,53],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[46,[-1]],2],[[51,[[46,[-1]]]]],[[52,[40]]]],[[[46,[-1]],[50,[[51,[[46,[-1]]]]]]],23,[[52,[40]]]],[[40,28],29],[[44,28],29],[[[46,[-1]],28],29,[30,[52,[40]]]],[[42,28],29],[[54,28],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[40,41]],[-1,34,[]],[[[55,[-1]]],34,56],[[[57,[-1]]],34,58],[10,23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[60,[59]]],40],[[61,61,61],44],[[-1,44],[[55,[-1]]],[]],[44,[[57,[-1]]],[]],[[-1,[60,[59]],62,2],[[46,[-1]]],[[52,[40]]]],[[[60,[63]],54],42],[44,2],[42,37],[40,23],[[[46,[-1]],[51,[[46,[-1]]]]],[[8,[[5,[49]]]]],[[52,[40]]]],[10,[[23,[59,62,64]]]],[42,37],[-1,65,[]],[[[55,[-1]]],65,56],[[[57,[-1]]],65,58],[[[46,[-1]]],23,[[52,[40]]]],[-1,-2,[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,44,[]],[[[55,[-1]]],44,56],[[[57,[-1]]],44,58],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[65,-1],65,[[66,[34]]]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],0],0,[[[67,[-1]],[67,[-1]]],[[67,[-1]]],0],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],0],0,[[[67,[-1]],[67,[-1]]],[[67,[-1]]],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[[67,[-1]]]]],[[5,[61]]],0],[[[67,[-1]]],[[67,[-2]]],0,0],[65,34],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[65,28],29],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,34,[]],[[[68,[-1,-2,-3]]],34,58,0,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1]]],[[67,[-1]]],0],0,0,[[],69],[[2,2,2],[[68,[-1,-2,-3]]],58,0,0],[[],70],[[],71],[[],72],[-1,65,[[66,[34]]]],[[],73],[[],74],[[],75],[[],76],0,0,[[65,-1,-2],65,[[66,[34]]],[[66,[34]]]],[[],65],[-1,65,[]],[[],65],[[],65],[[[68,[-1,-2,-3]]],65,58,0,0],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[67,[-1]]],[[67,[-1]]],0],0,[[[67,[-1]]],[[67,[-1]]],0],[[[67,[-1]]],[[67,[-1]]],0],0,[[[67,[-1]]],[[67,[-1]]],0],[[[67,[-1]],-1],[[67,[-1]]],0],0,[[[67,[-1]],-1],[[67,[-1]]],0],[[[67,[-1]],-1],[[67,[-1]]],0],0,[[[67,[-1]],-1],[[67,[-1]]],0],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],77],[[],78],[[],65],[[],65],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1]],[67,[-1]],2,2],[[67,[-1]]],0],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],0],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],0],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],0],[[[67,[-1]],[67,[-1]],2,2,2,2,2,2,2],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],[0,79]],[[],80],[[],81],[[],65],[[],65],0,0,[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1]],[67,[-1]],2,2,2,2,2,2,2],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]],2,2,2,2,2,2,2],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]],2,2,2,2,2,2,2],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]],2,2,2,2,2,2,2],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],[0,79]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],[0,79]],[[[67,[-1]],[67,[-1]]],[[67,[-1]]],[0,79]],[[],82],[[],65],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],83],[[],84],[[],85],[[],86],[[],87],[[],65],[[],65],[[],65],[[],65],[[],65],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,10,-1],[[67,[-1]]],0],[[6,10,-1,-1],[[67,[-1]]],0],[[6,10,-1,-1],[[67,[-1]]],0],0,[[[67,[-1]],[67,[-1]]],23,0],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1]]],1,0],0,[[[67,[-1]]],[[67,[-1]]],[12,0]],[[-1,-2],23,[],[]],[[[67,[-1]]],[[67,[-1]]],0],0,[-1,-2,[],[]],[[[67,[-1]],28],29,[30,0]],[-1,-1,[]],0,[-1,-2,[],[]],[[[67,[-1]]],1,0],[[88,10,6,89],[[67,[-1]]],0],0,0,[[[67,[-1]],88,10],[[67,[-1]]],0],[-1,-2,[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"bool"],[15,"usize"],[15,"array"],[4,"Backend",801],[3,"Vec",802],[3,"Shape",803],[3,"Data",804],[4,"Reader",805],[3,"Range",806],[4,"WgpuDevice",0],[3,"WgpuBackend",0],[8,"Clone",807],[8,"GraphicsApi",0],[8,"FloatElement",0],[8,"IntElement",0],[3,"Vulkan",0],[3,"Metal",0],[3,"OpenGl",0],[3,"Dx11",0],[3,"Dx12",0],[3,"WebGpu",0],[3,"AutoGraphicsApi",0],[15,"tuple"],[4,"Option",808],[3,"ConvOptions",809],[3,"ConvTransposeOptions",809],[8,"Default",810],[3,"Formatter",811],[6,"Result",811],[8,"Debug",811],[8,"Hasher",812],[3,"MaxPool2dWithIndices",809],[3,"MaxPool2dBackward",809],[3,"String",813],[15,"f32"],[4,"Distribution",804],[15,"u64"],[4,"Result",814],[3,"TypeId",815],[3,"WgpuStorage",317],[3,"StorageHandle",816],[3,"WgpuResource",317],[4,"BindingResource",817],[3,"WorkGroup",317],[3,"SimpleMemoryManagement",818],[3,"WgpuServer",317],[3,"MutexComputeChannel",819],[3,"ComputeClient",820],[15,"u8"],[15,"slice"],[3,"Handle",821],[8,"MemoryManagement",822],[3,"StorageId",816],[4,"WgpuResourceKind",317],[3,"DynamicKernel",317],[8,"DynamicKernelSource",444],[3,"StaticKernel",317],[8,"StaticKernelSource",444],[3,"Device",817],[3,"Arc",823],[15,"u32"],[3,"Queue",817],[3,"Buffer",817],[3,"AdapterInfo",801],[3,"SourceTemplate",444],[8,"Into",824],[3,"WgpuTensor",775],[3,"DynamicKernelSettings",444],[3,"ContiguousRaw",444],[3,"BinaryElemwiseRaw",444],[3,"BinaryElemwiseInplaceRaw",444],[3,"CastRaw",444],[3,"UnaryRaw",444],[3,"UnaryInplaceRaw",444],[3,"UnaryScalarRaw",444],[3,"UnaryScalarInplaceRaw",444],[3,"Conv2d",621],[3,"ConvTranspose2d",621],[8,"Element",825],[3,"MatmulMemCoalescingRaw",647],[3,"MatmulNaiveRaw",647],[3,"MatmulTiling2Dvec4PrimitiveRaw",692],[3,"AvgPool2dRaw",707],[3,"AvgPool2dBackwardRaw",707],[3,"MaxPool2d",707],[3,"MaxPool2dWithIndicesBackward",707],[3,"MaxPool2dWithIndices",707],[6,"WgpuComputeClient",317],[6,"WgpuHandle",317],[8,"Kernel",317],[3,"KernelSettings",444]]},\
"onnx_tests":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"xtask":{"doc":"","t":"DENNLLLLLLLLLMLLLLLLLLLLLFAALLLLLLLLLLMMRFFFFFRNENNDNNRLLLLLFFFFFFFFFFFLLLLLLLLLLFLLFMFFFFLLLLLLLLLL","n":["Args","Command","Publish","RunChecks","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","publish","runchecks","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","env","name","CRATES_IO_API_TOKEN","cargo_publish","local_version","publish","remote_version","run","ARM_TARGET","All","CheckType","Examples","NoStd","Params","Std","Typos","WASM32_TARGET","add","borrow","borrow","borrow_mut","borrow_mut","build_and_test_no_std","burn_core_std","burn_dataset_features_std","cargo_build","cargo_clippy","cargo_doc","cargo_fmt","cargo_install","cargo_test","check_examples","check_typos","clone","clone_into","default","eq","equivalent","fmt","from","from","from","from","handle_child_process","into","into","no_std_checks","params","run","run_cargo","rustup","std_checks","to_owned","to_possible_value","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value_variants"],"q":[[0,"xtask"],[38,"xtask::Command"],[40,"xtask::publish"],[46,"xtask::runchecks"],[100,"clap_builder::builder::command"],[101,"clap_builder::parser::matches::arg_matches"],[102,"clap_builder"],[103,"core::result"],[104,"clap_builder::util::id"],[105,"core::option"],[106,"anyhow"],[107,"core::any"],[108,"alloc::string"],[109,"core::convert"],[110,"core::fmt"],[111,"core::fmt"],[112,"clap_builder::builder::possible_value"]],"d":["","","Publish a crate to crates.io","Run the specified <code>burn</code> tests and checks locally.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This script publishes a crate on <code>crates.io</code>.","This script is run before a PR is created.","","","","","","","","","","","The environment to run checks against","The name of the crate to publish on crates.io","","","","","","","","Run all checks.","","Test the examples","Run <code>no-std</code> environment checks","","Run <code>std</code> environment checks","Check for typos","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,6,6,3,3,6,6,3,6,3,6,3,3,3,3,6,3,6,3,6,3,6,3,6,0,0,0,3,6,3,6,3,6,3,6,3,6,24,25,0,0,0,0,0,0,0,19,0,19,19,0,19,19,0,16,16,19,16,19,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,16,16,16,16,19,0,16,19,0,16,0,0,0,0,19,19,16,16,19,16,19,16,19,19],"f":[0,0,0,0,[1,1],[1,1],[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],0,[[],1],[-1,-1,[]],[-1,-1,[]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[[],[[8,[7]]]],[9,10],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[12,[11]]]],0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[3,2],[[5,[11,4]]]],[[6,2],[[5,[11,4]]]],[[3,2],[[5,[11,4]]]],[[6,2],[[5,[11,4]]]],0,0,0,[[[14,[9]]],11],[9,15],[15,11],[9,[[8,[15]]]],[15,[[12,[11]]]],0,0,0,0,0,0,0,0,0,[[16,-1],[],[[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,[18,[9]]],11],[[],11],[[],11],[16,11],[[],11],[16,11],[[],11],[16,11],[16,11],[[],11],[[],11],[19,19],[[-1,-2],11,[],[]],[[],19],[[19,19],10],[[-1,-2],10,[],[]],[[16,20],21],[[[18,[9]]],16],[-1,-1,[]],[9,16],[-1,-1,[]],[[22,9],11],[-1,-2,[],[]],[-1,-2,[],[]],[[],11],0,[19,[[12,[11]]]],[[9,16,9],11],[9,11],[[],11],[-1,-2,[],[]],[19,[[8,[23]]]],[-1,15,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[],[[14,[19]]]]],"c":[],"p":[[3,"Command",100],[3,"ArgMatches",101],[3,"Args",0],[6,"Error",102],[4,"Result",103],[4,"Command",0],[3,"Id",104],[4,"Option",105],[15,"str"],[15,"bool"],[15,"tuple"],[6,"Result",106],[3,"TypeId",107],[15,"slice"],[3,"String",108],[3,"Params",46],[8,"Into",109],[15,"array"],[4,"CheckType",46],[3,"Formatter",110],[6,"Result",110],[3,"Child",111],[3,"PossibleValue",112],[13,"RunChecks",38],[13,"Publish",38]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
