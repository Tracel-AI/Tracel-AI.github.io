var searchIndex = JSON.parse('{\
"backend_comparison":{"doc":"","t":"O","n":["bench_on_backend"],"q":[[0,"backend_comparison"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"burn":{"doc":"Burn","tn":["LearningRate","backend","config","constant","data","grad_clipping","lr_scheduler","module","nn","optim","record","tensor","train","Autodiff","Fusion","LibTorch","NdArray","Wgpu","abs","abs","abs","abs","abs","ad_enabled","ad_enabled","ad_enabled","ad_enabled","adapt","adapt","adapt","adapt","adapt","adaptive_avg_pool1d","adaptive_avg_pool1d","adaptive_avg_pool1d","adaptive_avg_pool1d_backward","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","add","add","add","add","add","add_scalar","add_scalar","add_scalar","add_scalar","add_scalar","arange","arange","argmax","argmax","argmax","argmax","argmax","argmin","argmin","argmin","argmin","argmin","avg_pool1d","avg_pool1d","avg_pool1d","avg_pool1d_backward","avg_pool2d","avg_pool2d","avg_pool2d","avg_pool2d","avg_pool2d","avg_pool2d_backward","avg_pool2d_backward","avg_pool2d_backward","avg_pool2d_backward","avg_pool2d_backward","backward","bool_cat","bool_cat","bool_cat","bool_cat","bool_cat","bool_device","bool_device","bool_device","bool_device","bool_device","bool_empty","bool_empty","bool_empty","bool_empty","bool_empty","bool_equal","bool_equal","bool_equal","bool_equal","bool_equal","bool_from_data","bool_from_data","bool_from_data","bool_from_data","bool_from_data","bool_from_inner","bool_inner","bool_into_data","bool_into_data","bool_into_data","bool_into_data","bool_into_data","bool_into_float","bool_into_float","bool_into_float","bool_into_float","bool_into_float","bool_into_int","bool_into_int","bool_into_int","bool_into_int","bool_into_int","bool_not","bool_not","bool_not","bool_not","bool_not","bool_repeat","bool_reshape","bool_reshape","bool_reshape","bool_reshape","bool_reshape","bool_shape","bool_shape","bool_shape","bool_shape","bool_shape","bool_slice","bool_slice","bool_slice","bool_slice","bool_slice","bool_slice_assign","bool_slice_assign","bool_slice_assign","bool_slice_assign","bool_slice_assign","bool_swap_dims","bool_swap_dims","bool_swap_dims","bool_swap_dims","bool_swap_dims","bool_tensor","bool_tensor_handle","bool_to_data","bool_to_device","bool_to_device","bool_to_device","bool_to_device","bool_to_device","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","cat","cat","cat","cat","clamp","clamp","clamp","clamp","clamp_max","clamp_max","clamp_max","clamp_max","clamp_min","clamp_min","clamp_min","clamp_min","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","conv1d","conv1d","conv1d","conv2d","conv2d","conv2d","conv2d","conv2d","conv_transpose1d","conv_transpose1d","conv_transpose1d","conv_transpose2d","conv_transpose2d","conv_transpose2d","conv_transpose2d","conv_transpose2d","cos","cos","cos","cos","cos","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","detach","detach","device","device","device","device","device","div","div","div","div","div","div_scalar","div_scalar","div_scalar","div_scalar","div_scalar","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","embedding","embedding","embedding_backward","embedding_backward","empty","empty","empty","empty","empty","equal","equal","equal","equal","equal","equal_elem","equal_elem","equal_elem","equal_elem","equal_elem","erf","erf","erf","erf","erf","exp","exp","exp","exp","exp","float_tensor","float_tensor_handle","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_data","from_data","from_data","from_data","from_data","from_full_precision","from_full_precision","from_full_precision","from_full_precision","from_full_precision","from_inner","full","full","gather","gather","gather","gather","gather","gelu","gelu","gelu_backward","grad","grad_remove","grad_replace","greater","greater","greater","greater","greater","greater_elem","greater_elem","greater_elem","greater_elem","greater_elem","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","init","init","init","init","init","inner","int_abs","int_abs","int_abs","int_abs","int_abs","int_add","int_add","int_add","int_add","int_add","int_add_scalar","int_add_scalar","int_add_scalar","int_add_scalar","int_add_scalar","int_argmax","int_argmax","int_argmax","int_argmax","int_argmax","int_argmin","int_argmin","int_argmin","int_argmin","int_argmin","int_cat","int_cat","int_cat","int_cat","int_cat","int_clamp","int_clamp","int_clamp","int_clamp","int_clamp","int_clamp_max","int_clamp_max","int_clamp_max","int_clamp_max","int_clamp_max","int_clamp_min","int_clamp_min","int_clamp_min","int_clamp_min","int_clamp_min","int_device","int_device","int_device","int_device","int_device","int_div","int_div","int_div","int_div","int_div","int_div_scalar","int_div_scalar","int_div_scalar","int_div_scalar","int_div_scalar","int_empty","int_empty","int_empty","int_empty","int_empty","int_equal","int_equal","int_equal","int_equal","int_equal","int_equal_elem","int_equal_elem","int_equal_elem","int_equal_elem","int_equal_elem","int_from_data","int_from_data","int_from_data","int_from_data","int_from_data","int_from_inner","int_full","int_full","int_full","int_gather","int_gather","int_gather","int_gather","int_gather","int_greater","int_greater","int_greater","int_greater","int_greater","int_greater_elem","int_greater_elem","int_greater_elem","int_greater_elem","int_greater_elem","int_greater_equal","int_greater_equal","int_greater_equal","int_greater_equal","int_greater_equal","int_greater_equal_elem","int_greater_equal_elem","int_greater_equal_elem","int_greater_equal_elem","int_greater_equal_elem","int_inner","int_into_data","int_into_data","int_into_data","int_into_data","int_into_data","int_into_float","int_into_float","int_into_float","int_into_float","int_into_float","int_lower","int_lower","int_lower","int_lower","int_lower","int_lower_elem","int_lower_elem","int_lower_elem","int_lower_elem","int_lower_elem","int_lower_equal","int_lower_equal","int_lower_equal","int_lower_equal","int_lower_equal","int_lower_equal_elem","int_lower_equal_elem","int_lower_equal_elem","int_lower_equal_elem","int_lower_equal_elem","int_mask_fill","int_mask_fill","int_mask_fill","int_mask_fill","int_mask_fill","int_mask_where","int_mask_where","int_mask_where","int_mask_where","int_mask_where","int_max","int_max","int_max_dim","int_max_dim","int_max_dim","int_max_dim_with_indices","int_max_dim_with_indices","int_max_dim_with_indices","int_mean","int_mean","int_mean","int_mean","int_mean_dim","int_mean_dim","int_mean_dim","int_mean_dim","int_mean_dim","int_min","int_min","int_min_dim","int_min_dim","int_min_dim","int_min_dim_with_indices","int_min_dim_with_indices","int_min_dim_with_indices","int_mul","int_mul","int_mul","int_mul","int_mul","int_mul_scalar","int_mul_scalar","int_mul_scalar","int_mul_scalar","int_mul_scalar","int_neg","int_neg","int_neg","int_ones","int_ones","int_ones","int_ones","int_ones","int_repeat","int_repeat","int_reshape","int_reshape","int_reshape","int_reshape","int_reshape","int_scatter","int_scatter","int_scatter","int_scatter","int_scatter","int_select","int_select","int_select","int_select","int_select","int_select_assign","int_select_assign","int_select_assign","int_select_assign","int_select_assign","int_shape","int_shape","int_shape","int_shape","int_shape","int_slice","int_slice","int_slice","int_slice","int_slice","int_slice_assign","int_slice_assign","int_slice_assign","int_slice_assign","int_slice_assign","int_sub","int_sub","int_sub","int_sub","int_sub","int_sub_scalar","int_sub_scalar","int_sub_scalar","int_sub_scalar","int_sub_scalar","int_sum","int_sum","int_sum","int_sum","int_sum","int_sum_dim","int_sum_dim","int_sum_dim","int_sum_dim","int_sum_dim","int_swap_dims","int_swap_dims","int_swap_dims","int_swap_dims","int_swap_dims","int_tensor","int_tensor_handle","int_to_data","int_to_device","int_to_device","int_to_device","int_to_device","int_to_device","int_zeros","int_zeros","int_zeros","int_zeros","int_zeros","into","into","into","into","into","into_data","into_data","into_data","into_data","into_data","into_int","into_int","into_int","into_int","into_int","is_require_grad","log","log","log","log","log","log1p","log1p","log1p","log1p","log1p","lower","lower","lower","lower","lower","lower_elem","lower_elem","lower_elem","lower_elem","lower_elem","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","mask_fill","mask_fill","mask_fill","mask_fill","mask_fill","mask_where","mask_where","mask_where","mask_where","mask_where","matmul","matmul","matmul","matmul","matmul","max","max_dim","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_pool1d","max_pool1d","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool1d_with_indices_backward","max_pool2d","max_pool2d","max_pool2d","max_pool2d","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","mean","mean","mean","mean","mean_dim","mean_dim","mean_dim","mean_dim","mean_dim","min","min_dim","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","mul","mul","mul","mul","mul","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","name","name","name","name","name","neg","neg","neg","ones","ones","ones","ones","operations","powf","powf","powf","powf","powf","random","random","random","random","random","recip","recip","recip","recip","recip","relu","relu","relu","relu","repeat","reshape","reshape","reshape","reshape","reshape","scatter","scatter","scatter","scatter","scatter","seed","seed","seed","seed","seed","select","select","select","select","select","select_assign","select_assign","select_assign","select_assign","select_assign","set_require_grad","shape","shape","shape","shape","shape","sin","sin","sin","sin","sin","slice","slice","slice","slice","slice","slice_assign","slice_assign","slice_assign","slice_assign","slice_assign","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sum","sum","sum","sum","sum","sum_dim","sum_dim","sum_dim","sum_dim","sum_dim","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","sync","sync","sync","sync","tanh","tanh","tanh","tanh","tanh","to_data","to_device","to_device","to_device","to_device","to_device","to_full_precision","to_full_precision","to_full_precision","to_full_precision","to_full_precision","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","zeros","zeros","zeros","zeros","Autodiff","grads","ops","testgen_ad_abs","testgen_ad_adaptive_avg_pool1d","testgen_ad_adaptive_avg_pool2d","testgen_ad_add","testgen_ad_aggregation","testgen_ad_avg_pool1d","testgen_ad_avg_pool2d","testgen_ad_broadcast","testgen_ad_cat","testgen_ad_complex","testgen_ad_conv1d","testgen_ad_conv2d","testgen_ad_conv_transpose1d","testgen_ad_conv_transpose2d","testgen_ad_cos","testgen_ad_cross_entropy_loss","testgen_ad_div","testgen_ad_erf","testgen_ad_exp","testgen_ad_gather_scatter","testgen_ad_gelu","testgen_ad_log","testgen_ad_log1p","testgen_ad_mask","testgen_ad_matmul","testgen_ad_max_pool1d","testgen_ad_max_pool2d","testgen_ad_maxmin","testgen_ad_mul","testgen_ad_multithread","testgen_ad_neg","testgen_ad_powf","testgen_ad_recip","testgen_ad_relu","testgen_ad_reshape","testgen_ad_select","testgen_ad_sin","testgen_ad_slice","testgen_ad_softmax","testgen_ad_sqrt","testgen_ad_sub","testgen_ad_tanh","testgen_ad_transpose","testgen_all","testgen_gradients","testgen_module_backward","GradID","Gradients","adapt","borrow","borrow_mut","consume","deref","deref_mut","downcast","drop","from","get","init","into","new","register","remove","try_from","try_into","type_id","upcast","vzip","Backward","Init","Ops","OpsKind","OpsPrep","State","Tracked","Tracked","UnTracked","UnTracked","adapt","adapt","adapt","adapt","adapt","adapt","backward","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_shape","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","finish","finish","fmt","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","new","new","node","parents","prepare","state","stateful","stateless","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_different_backend","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","Cpu","Cuda","LibTorch","LibTorchDevice","Mps","StorageRef","TchElement","TchShape","TchTensor","Vulkan","adapt","adapt","adapt","add","binary_ops_tensor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","dims","downcast","downcast","downcast","drop","drop","drop","empty","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","from","from","from","from_data","from_existing","init","init","init","into","into","into","mut_ops","new","storage","tensor","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unary_ops","upcast","upcast","upcast","vzip","vzip","vzip","Cpu","FloatNdArrayElement","NdArray","NdArrayDevice","NdArrayTensor","adapt","adapt","array","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","from_data","init","init","into","into","iter_par","iter_range_par","new","reshape","run_par","to_owned","to_owned","to_typed_dims","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","AutoGraphicsApi","BestAvailable","Cpu","DiscreteGpu","Dx11","Dx12","FloatElement","GraphicsApi","IntElement","IntegratedGpu","Metal","OpenGl","VirtualGpu","Vulkan","WebGpu","Wgpu","WgpuDevice","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","backend","backend","backend","backend","backend","backend","backend","backend","binary_elemwise","binary_elemwise_inplace","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comparison","comparison_elem","comparison_elem_inplace","comparison_inplace","compute","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","id","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","kernel","kernel_wgsl","reduce_tune_ops","tensor","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_inplace","unary_scalar","unary_scalar_inplace","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","DynamicKernel","Full","Kernel","Matmul","MeanDim","Server","Slice","StaticKernel","SumDim","WgpuAutotuneKey","WgpuComputeClient","WgpuHandle","WgpuResource","WgpuResourceKind","WgpuServer","WgpuStorage","WorkGroup","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","alloc","as_binding","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone","clone_into","clone_into","compute_client","create","dealloc","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","empty","eq","equivalent","equivalent","equivalent","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","hash","id","id","id","init","init","init","init","init","init","init","init","init_async","into","into","into","into","into","into","into","into","kind","memory","new","new","new","new","new","new","num_invocations","offset","perform_deallocations","read","select_device","size","source","source","source","sync","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","workgroup","workgroup","workgroup","x","y","z","BinaryElemwiseInplaceRaw","BinaryElemwiseRaw","CastRaw","ContiguousRaw","DynamicKernelSettings","DynamicKernelSource","KernelSettings","SourceTemplate","StaticKernelSource","UnaryInplaceRaw","UnaryRaw","UnaryScalarInplaceRaw","UnaryScalarRaw","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","add_template","binary_elemwise","binary_elemwise_default","binary_elemwise_inplace","binary_elemwise_inplace_default","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_info","build_info_dyn","cast","complete","conv","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","from","from","from","from","from","from","from","from","from","from","from","id","id","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into_contiguous","into_contiguous_dyn","matmul","new","new","new","new","new","new","new","new","new","new","pool","prng","reduce","register","source","source","source","source","source","source","source","source","source","source","source","source","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_default","unary_inplace","unary_inplace_default","unary_scalar","unary_scalar_default","unary_scalar_inplace","unary_scalar_inplace_default","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Conv2d","ConvTranspose2d","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","init","init","into","into","new","new","source","source","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","MatmulAutotuneKey","MatmulAutotuneOperationSet","MatmulMemCoalescingRaw","MatmulNaiveRaw","adapt","adapt","adapt","adapt","autotunables","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","fastest","fmt","fmt","from","from","from","from","hash","init","init","init","init","init_matmul_output","into","into","into","into","key","matmul_autotune","matmul_mem_coalescing","matmul_mem_coalescing_default","matmul_naive","matmul_naive_default","new","new","new","source","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unpadded","upcast","upcast","upcast","upcast","utils","vec4","vec4_lhs","vzip","vzip","vzip","vzip","MatmulTiling2DUnpaddedRaw","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","init","into","matmul_tiling_2d_unpadded","new","source","try_from","try_into","type_id","upcast","vzip","init_matmul_output","MatmulTiling2Dvec4Raw","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","init","into","matmul_tiling_2d_vec4","new","source","try_from","try_into","type_id","upcast","vzip","MatmulTiling2DVec4LhsRaw","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","init","into","matmul_tiling_2d_vec4_lhs","new","source","try_from","try_into","type_id","upcast","vzip","AvgPool2dBackwardRaw","AvgPool2dRaw","MaxPool2d","MaxPool2dWithIndices","MaxPool2dWithIndicesBackward","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","new","new","new","new","new","source","source","source","source","source","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","random_bernoulli","random_like_uniform","random_normal","random_uniform","MeanDimAutotuneOperationSet","RecursiveSumRaw","ReduceAutotuneKey","ReductionArgsRaw","ReductionDimRaw","ReductionDimSharedMemoryRaw","SumDimAutotuneOperationSet","adapt","adapt","adapt","adapt","adapt","adapt","adapt","argmax","argmin","autotunables","autotunables","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","fastest","fastest","fmt","fmt","from","from","from","from","from","from","from","hash","init","init","init","init","init","init","init","init_reduce_output","into","into","into","into","into","into","into","key","key","mean_dim","mean_dim_autotune","mean_dim_shared_memory","new","new","new","new","new","source","source","source","source","sum","sum_dim","sum_dim_autotune","sum_dim_shared_memory","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","WgpuTensor","adapt","assert_is_on_same_device","borrow","borrow_mut","can_mut","client","clone","clone_into","copy","deref","deref_mut","device","downcast","drop","fmt","from","handle","init","into","is_contiguous","new","shape","strides","to_client","to_owned","try_from","try_into","type_id","upcast","vzip","Config","Config","ConfigError","FileNotFound","InvalidFormat","adapt","borrow","borrow_mut","config_to_json","deref","deref_mut","downcast","drop","fmt","fmt","from","init","into","load","load_binary","save","to_string","try_from","try_into","type_id","upcast","vzip","dataloader","dataset","Batch","BatchDataLoader","BatchStrategy","DataLoader","DataLoaderBuilder","DataLoaderIterator","Dataset","DatasetIterator","Done","FixBatchStrategy","Message","MultiThreadDataLoader","Progress","adapt","adapt","adapt","adapt","adapt","adapt","add","add","batch","batch","batch_size","batcher","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from","get","init","init","init","init","init","init","into","into","into","into","into","into","is_empty","items_processed","items_total","iter","iter","iter","iter","len","multi_thread","new","new","new","new","new_like","new_like","num_workers","progress","shuffle","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","Batcher","batch","ConnectionPool","Dataset","DatasetIterator","Err","FailToDownloadPythonDependencies","FileExists","HuggingfaceDatasetLoader","ImporterError","InMemDataset","Io","Ok","Other","PersistDbFile","PythonNotInstalled","Result","Serde","Sql","SqliteDataset","SqliteDataset","SqliteDatasetError","SqliteDatasetStorage","SqliteDatasetWriter","Unknown","VenvNotInitialized","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","base_dir","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dataset","db_file","db_file","db_file","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","exists","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_csv","from_dataset","from_db_file","from_file","from_json_rows","from_name","get","get","get","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_fallible","into_iter","is_empty","iter","len","len","len","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","new","new","new","next","reader","set_completed","source","source","source","split","to_owned","to_string","to_string","transform","transpose_into_fallible","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_base_dir","with_base_dir","with_huggingface_cache_dir","with_huggingface_token","with_subset","write","writer","huggingface","FailToDownloadPythonDependencies","HuggingfaceDatasetLoader","ImporterError","MNISTDataset","MNISTItem","PythonNotInstalled","SqliteDataset","Unknown","VenvNotInitialized","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","fmt","from","from","get","image","init","init","into","into","label","len","serialize","test","to_owned","train","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","ComposedDataset","Mapper","MapperDataset","PartialDataset","SamplerDataset","ShuffledDataset","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","from","from","from","from","from","get","get","get","get","get","init","init","init","init","init","into","into","into","into","into","len","len","len","len","len","map","new","new","new","new","new","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","with_replacement","with_seed","without_replacement","GradientClipping","GradientClippingConfig","Norm","Norm","Value","Value","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","clip_gradient","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","fmt","from","from","init","init","init","into","into","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","LrScheduler","Record","constant","load_record","noam","step","to_record","ConstantLr","adapt","borrow","borrow_mut","clone","clone_into","deref","deref_mut","downcast","drop","fmt","from","from","init","into","load_record","new","step","to_owned","to_record","try_from","try_into","type_id","upcast","vzip","NoamLrScheduler","NoamLrSchedulerConfig","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","fmt","fmt","from","from","init","init","init","into","into","load_record","new","serialize","step","to_owned","to_owned","to_record","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","with_model_size","with_warmup_steps","AutodiffModule","ConstantRecord","Devices","InnerModule","Module","Module","ModuleMapper","ModuleVisitor","Param","ParamId","Record","RunningState","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","devices","devices","devices","devices","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","fork","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","from_record","hash","init","init","init","init","into","into","into","into","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","into_record","into_string","list_param_ids","load_file","load_record","load_record","load_record","load_record","load_record","map","map","map","map","map","map","map_bool","map_float","map_int","new","new","new","new","no_grad","num_params","save_file","serialize","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","update","val","valid","valid","valid","valid","valid","value","value_sync","visit","visit","visit","visit","visit","visit_bool","visit_float","visit_int","vzip","vzip","vzip","vzip","with_id","BatchNorm","BatchNormConfig","BatchNormRecord","BatchNormRecordItem","Constant","Dropout","DropoutConfig","Embedding","EmbeddingConfig","EmbeddingRecord","EmbeddingRecordItem","Explicit","Explicit","GELU","GateController","GateControllerRecord","GateControllerRecordItem","GroupNorm","GroupNormConfig","GroupNormRecord","GroupNormRecordItem","Initializer","KaimingNormal","KaimingUniform","LayerNorm","LayerNormConfig","LayerNormRecord","LayerNormRecordItem","Linear","LinearConfig","LinearRecord","LinearRecordItem","Lstm","LstmConfig","LstmRecord","LstmRecordItem","Normal","Ones","PaddingConfig1d","PaddingConfig2d","PositionalEncoding","PositionalEncodingConfig","PositionalEncodingRecord","PositionalEncodingRecordItem","ReLU","Same","Same","Unfold4d","Unfold4dConfig","Uniform","Valid","Valid","XavierNormal","XavierUniform","Zeros","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","affine","affine","attention","beta","beta","beta","beta","beta","beta","bias","bias","bias","bias","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cell_gate","cell_gate","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conv","d_hidden","d_hidden","d_hidden","d_input","d_input","d_model","d_output","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","dilation","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget_gate","forget_gate","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","forward","forward","forward","forward","forward","forward","forward","forward","forward","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","gamma","gamma","gamma","gamma","gamma","gamma","generate_sinusoids","gru","hidden_transform","hidden_transform","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_with","init_with","init_with","init_with","init_with","init_with","init_with","initializer","initializer","initializer","input_gate","input_gate","input_transform","input_transform","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","kernel_size","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","loss","lstm","map","map","map","map","map","map","map","map","map","map","map","map","map","map","momentum","momentum","momentum","new","new","new","new","new","new","new","new","new","new","new","new","new_with","num_channels","num_channels","num_features","num_groups","num_groups","num_params","num_params","num_params","num_params","num_params","num_params","num_params","num_params","output_gate","output_gate","padding","pool","prob","running_mean","running_mean","running_var","running_var","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sinusoids","sinusoids","stride","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transformer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","weight","weight","with_affine","with_bias","with_dilation","with_epsilon","with_epsilon","with_epsilon","with_initializer","with_initializer","with_initializer","with_max_sequence_size","with_max_timescale","with_momentum","with_padding","with_stride","fan_out_only","fan_out_only","gain","gain","gain","gain","max","mean","min","std","value","GeneratePaddingMask","MhaCache","MhaInput","MhaOutput","MultiHeadAttention","MultiHeadAttentionConfig","MultiHeadAttentionRecord","MultiHeadAttentionRecordItem","activation","activation","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","autoregressive","autoregressive_cross_attention","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","context","d_k","d_k","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","dropout","dropout","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","forward","forward_cache","from","from","from","from","from","from","from","from","from_item","generate_autoregressive_mask","generate_padding_mask","init","init","init","init","init","init","init","init","init","init_with","initializer","into","into","into","into","into","into","into","into","into_item","into_record","key","key","load_record","map","mask","mask_attn","mask_pad","min_float","min_float","n_heads","n_heads","new","new","num_params","output","output","query","query","self_attn","serialize","serialize","tensor","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","value","value","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","with_dropout","with_initializer","with_min_float","TensorCache","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","empty","from","init","into","try_from","try_into","type_id","upcast","vzip","Conv1d","Conv1dConfig","Conv1dRecord","Conv1dRecordItem","Conv2d","Conv2dConfig","Conv2dRecord","Conv2dRecordItem","ConvTranspose1d","ConvTranspose1dConfig","ConvTranspose1dRecord","ConvTranspose1dRecordItem","ConvTranspose2d","ConvTranspose2dConfig","ConvTranspose2dRecord","ConvTranspose2dRecordItem","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","bias","bias","bias","bias","bias","bias","bias","bias","bias","bias","bias","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channels","channels","channels","channels_in","channels_out","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","forward","forward","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","groups","groups","groups","groups","groups","groups","groups","groups","groups","groups","groups","groups","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_with","init_with","init_with","init_with","initializer","initializer","initializer","initializer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","load_record","load_record","load_record","load_record","map","map","map","map","new","new","new","new","num_params","num_params","num_params","num_params","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding_out","padding_out","padding_out","padding_out","padding_out","padding_out","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","weight","weight","weight","weight","weight","with_bias","with_bias","with_bias","with_bias","with_dilation","with_dilation","with_dilation","with_dilation","with_groups","with_groups","with_groups","with_groups","with_initializer","with_initializer","with_initializer","with_initializer","with_padding","with_padding","with_padding","with_padding","with_padding_out","with_padding_out","with_stride","with_stride","with_stride","with_stride","Gru","GruConfig","GruRecord","GruRecordItem","adapt","adapt","adapt","adapt","bias","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","d_hidden","d_hidden","d_hidden","d_input","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fork","forward","from","from","from","from","from_item","init","init","init","init","init","init_with","initializer","into","into","into","into","into_item","into_record","load_record","map","new","new_gate","new_gate","num_params","reset_gate","reset_gate","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","update_gate","update_gate","valid","visit","vzip","vzip","vzip","vzip","with_initializer","Auto","BinaryCrossEntropyLoss","BinaryCrossEntropyLossConfig","BinaryCrossEntropyLossRecord","BinaryCrossEntropyLossRecordItem","CrossEntropyLoss","CrossEntropyLossConfig","CrossEntropyLossRecord","CrossEntropyLossRecordItem","MSELoss","Mean","Reduction","Sum","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","devices","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","forward","forward","forward","forward_no_reduction","from","from","from","from","from","from","from","from","from","from","from_item","from_item","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_record","into_record","load_record","load_record","logits","logits","logits","logits","map","map","new","new","new","new","num_params","num_params","pad_tokens","pad_tokens","serialize","serialize","serialize","serialize","smoothing","smoothing","smoothing","smoothing","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","weights","weights","weights","weights","weights","weights","with_logits","with_logits","with_pad_tokens","with_smoothing","with_smoothing","with_weights","with_weights","Lstm","LstmConfig","LstmRecord","LstmRecordItem","bias","cell_gate","cell_gate","d_hidden","d_hidden","d_hidden","d_input","forget_gate","forget_gate","initializer","input_gate","input_gate","output_gate","output_gate","AdaptiveAvgPool1d","AdaptiveAvgPool1dConfig","AdaptiveAvgPool2d","AdaptiveAvgPool2dConfig","AvgPool1d","AvgPool1dConfig","AvgPool2d","AvgPool2dConfig","MaxPool1d","MaxPool1dConfig","MaxPool2d","MaxPool2dConfig","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_include_pad","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","devices","devices","dilation","dilation","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","fork","fork","forward","forward","forward","forward","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into_record","into_record","into_record","into_record","into_record","into_record","kernel_size","kernel_size","kernel_size","kernel_size","load_record","load_record","load_record","load_record","load_record","load_record","map","map","map","map","map","map","new","new","new","new","new","new","output_size","output_size","padding","padding","padding","padding","serialize","serialize","serialize","serialize","serialize","serialize","stride","stride","strides","strides","to_device","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","valid","valid","visit","visit","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_count_include_pad","with_count_include_pad","with_dilation","with_dilation","with_padding","with_padding","with_padding","with_padding","with_stride","with_stride","with_strides","with_strides","PositionWiseFeedForward","PositionWiseFeedForwardConfig","PositionWiseFeedForwardRecord","PositionWiseFeedForwardRecordItem","TransformerDecoder","TransformerDecoderAutoregressiveCache","TransformerDecoderConfig","TransformerDecoderInput","TransformerDecoderLayer","TransformerDecoderLayerRecord","TransformerDecoderLayerRecordItem","TransformerDecoderRecord","TransformerDecoderRecordItem","TransformerEncoder","TransformerEncoderAutoregressiveCache","TransformerEncoderConfig","TransformerEncoderInput","TransformerEncoderLayer","TransformerEncoderLayerRecord","TransformerEncoderLayerRecordItem","TransformerEncoderRecord","TransformerEncoderRecordItem","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cross_attn","cross_attn","d_ff","d_ff","d_ff","d_model","d_model","d_model","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dropout","dropout","dropout","dropout","dropout","dropout","dropout","dropout","dropout","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","fork","forward","forward","forward","forward_autoregressive_inference","forward_autoregressive_inference","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","from_item","gelu","gelu","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_with","init_with","init_with","initializer","initializer","initializer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","into_record","layers","layers","layers","layers","linear_inner","linear_inner","linear_outer","linear_outer","load_record","load_record","load_record","load_record","load_record","map","map","map","map","map","mask_attn","mask_pad","memory_mask_attn","memory_mask_pad","mha","mha","n_heads","n_heads","n_layers","n_layers","new","new","new","new","new","new_autoregressive_cache","new_autoregressive_cache","norm_1","norm_1","norm_1","norm_1","norm_2","norm_2","norm_2","norm_2","norm_3","norm_3","norm_first","norm_first","norm_first","norm_first","norm_first","norm_first","num_params","num_params","num_params","num_params","num_params","pwff","pwff","pwff","pwff","self_attn","self_attn","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","target_mask_attn","target_mask_pad","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","valid","visit","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_dropout","with_dropout","with_dropout","with_initializer","with_initializer","with_initializer","with_norm_first","with_norm_first","AdaGrad","AdaGradConfig","AdaGradState","AdaGradStateItem","Adam","AdamConfig","AdamState","AdamStateItem","AdamW","AdamWConfig","AdamWState","AdamWStateItem","AdaptiveMomentumState","AdaptiveMomentumStateItem","AdaptiveMomentumWState","AdaptiveMomentumWStateItem","CenteredState","CenteredStateItem","GradientsAccumulator","GradientsParams","LRDecayState","LRDecayStateItem","Optimizer","RMSProp","RMSPropConfig","RMSPropMomentum","RMSPropMomentumState","RMSPropMomentumStateItem","RMSPropState","RMSPropStateItem","Record","Sgd","SgdConfig","SgdState","SgdStateItem","SimpleOptimizer","SquareAvgState","SquareAvgStateItem","State","accumulate","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adaptor","avg","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","centered","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decay","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_grads","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","get","grad_avg","grads","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","is_empty","len","load_record","lr_decay","moment_1","moment_1","moment_2","moment_2","momentum","momentum","momentum","momentum","momentum","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","record","register","remove","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","square_avg","square_avg","step","step","step","step","step","step","step","sum","time","time","time","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_record","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_alpha","with_beta_1","with_beta_1","with_beta_2","with_beta_2","with_centered","with_epsilon","with_epsilon","with_epsilon","with_epsilon","with_grad_clipping","with_grad_clipping","with_grad_clipping","with_grad_clipping","with_gradient_clipping","with_lr_decay","with_momentum","with_momentum","with_weight_decay","with_weight_decay","with_weight_decay","with_weight_decay","with_weight_decay","OptimizerAdaptor","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","from","from","init","into","load_record","step","to_record","try_from","try_into","type_id","upcast","vzip","with_grad_clipping","WeightDecay","WeightDecayConfig","WeightDecayState","WeightDecayStateItem","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_item","grad_last_step","init","init","init","init","into","into","into","into","into_item","new","new","new","penalty","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_string","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","Momentum","MomentumConfig","MomentumState","MomentumStateItem","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","dampening","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_item","init","init","init","init","into","into","into","into","into_item","momentum","nesterov","new","new","new","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_string","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","velocity","vzip","vzip","vzip","vzip","with_dampening","with_momentum","with_nesterov","AdaptorRecord","AdaptorRecordItem","AdaptorRecordItemV1","AdaptorRecordV1","Rank1","Rank1","Rank2","Rank2","Rank3","Rank3","Rank4","Rank4","Rank5","Rank5","Rank6","Rank6","Rank7","Rank7","Rank8","Rank8","V1","V1","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","from","from","from","from","from_item","from_item","from_state","from_state","init","init","init","init","into","into","into","into","into_item","into_item","into_state","into_state","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","BinBytesRecorder","BinFileRecorder","BinGzFileRecorder","BurnMetadata","BurnRecord","BurnRecordNoItem","BytesRecorder","CompactRecorder","DebugRecordSettings","DefaultFileRecorder","DefaultRecorder","DoublePrecisionSettings","FileNotFound","FileRecorder","FloatElem","FullPrecisionSettings","HalfPrecisionSettings","IntElem","Item","JsonGzFileRecorder","LoadArgs","NamedMpkBytesRecorder","NamedMpkFileRecorder","NamedMpkGzFileRecorder","NoStdInferenceRecorder","NoStdTrainingRecorder","ParamSerde","PrecisionSettings","PrettyJsonFileRecorder","Record","Record","RecordArgs","RecordOutput","Recorder","RecorderError","SensitiveCompactRecorder","Settings","Unknown","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","file_extension","file_extension","file_extension","file_extension","file_extension","file_extension","file_extension","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","item","load","load_item","load_item","load_item","load_item","load_item","load_item","load_item","load_item","load_item","metadata","metadata","new","new","new","new","new","new","new","new","new","new","new","new","record","save_item","save_item","save_item","save_item","save_item","save_item","save_item","save_item","save_item","serialize","serialize","serialize","serialize","settings","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BasicAutodiffOps","BasicOps","Bernoulli","Bernoulli","Bool","Concrete","DIGITS","DIGITS","Data","DataSerialize","Default","Device","Dim","DimIter","Distribution","DistributionSampler","DistributionSamplerKind","Double","E","E","E","E","EPSILON","EPSILON","Elem","Element","ElementConversion","ElementPrecision","ElementRandom","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","Float","Full","Half","INFINITY","INFINITY","InnerKind","Int","LN_10","LN_10","LN_10","LN_10","LN_2","LN_2","LN_2","LN_2","LOG10_2","LOG10_2","LOG10_2","LOG10_2","LOG10_E","LOG10_E","LOG10_E","LOG10_E","LOG2_10","LOG2_10","LOG2_10","LOG2_10","LOG2_E","LOG2_E","LOG2_E","LOG2_E","MANTISSA_DIGITS","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_10_EXP","MAX_EXP","MAX_EXP","MAX_SUBNORMAL","MAX_SUBNORMAL","MIN","MIN","MIN_10_EXP","MIN_10_EXP","MIN_EXP","MIN_EXP","MIN_POSITIVE","MIN_POSITIVE","MIN_POSITIVE_SUBNORMAL","MIN_POSITIVE_SUBNORMAL","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ZERO","NEG_ZERO","NamedDim","NamedDims","NamedTensor","Normal","Normal","Numeric","ONE","ONE","Other","PI","PI","PI","PI","Precision","Primitive","PrintOptions","RADIX","RADIX","Reader","ReshapeArgs","SQRT_2","SQRT_2","SQRT_2","SQRT_2","Shape","Standard","Sync","T","Tensor","Tensor","TensorKind","Uniform","Uniform","ZERO","ZERO","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acos","acosh","acosh","acosh","acosh","activation","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_scalar","add_scalar","add_scalar","add_scalar","arange","arange_device","arange_step","arange_step_device","argmax","argmax","argmax","argmax","argmin","argmin","argmin","argmin","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","asin","asin","asin","asin","asinh","asinh","asinh","asinh","assert_approx_eq","assert_approx_eq_diff","assert_within_range","atan","atan","atan","atan","atan2","atan2","atan2","atan2","atanh","atanh","atanh","atanh","backend","backward","bf16","bitxor","bool_not","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","cat","cat","cat","cat","cbrt","cbrt","cbrt","cbrt","ceil","ceil","ceil","ceil","ceil","ceil","check","clamp","clamp","clamp","clamp","clamp","clamp","clamp_max","clamp_max","clamp_max","clamp_max","clamp_min","clamp_min","clamp_min","clamp_min","classify","classify","classify","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","container","convert","convert","convert","copysign","copysign","cos","cos","cos","cos","cos","cosh","cosh","cosh","cosh","cov","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","detach","device","device","device","device","device","devices","devices","devices","diagonal","dims","dims","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_scalar","div_scalar","div_scalar","div_scalar","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","edge_items","elem","elem","elem","elem_type_name","empty","empty","empty","empty","empty","empty_device","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal_elem","equal_elem","equal_elem","equal_elem","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erf","exp","exp","exp","exp","exp","exp2","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","exp_m1","f16","flatten","float","float","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_bits","from_bits","from_bool","from_bool_device","from_data","from_data","from_data","from_data","from_data","from_data_device","from_elem","from_elem","from_elem","from_f16","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32_const","from_f32_const","from_f64","from_f64","from_f64","from_f64","from_f64_const","from_f64_const","from_floats","from_full_precision","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i8","from_i8","from_inner","from_inner","from_inner","from_inner","from_inner","from_ints","from_item","from_item","from_item","from_item","from_item","from_item","from_le_bytes","from_le_bytes","from_ne_bytes","from_ne_bytes","from_primitive","from_str","from_str","from_str_radix","from_str_radix","from_tensor","from_u16","from_u16","from_u32","from_u32","from_u32","from_u64","from_u64","from_u8","from_u8","from_usize","full","full","full","full","full","full_device","gather","gather","gather","gather","ge","ge","grad","grad_remove","grad_replace","greater","greater","greater","greater","greater_elem","greater_elem","greater_elem","greater_elem","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","gt","gt","hypot","hypot","hypot","hypot","infinity","infinity","infinity","infinity","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","inner","inner","inner","inner","inplace","int","int","integer_decode","integer_decode","integer_decode","integer_decode","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_data","into_data","into_data","into_data","into_data","into_fallible","into_item","into_item","into_item","into_item","into_item","into_item","into_iter","into_primitive","into_record","into_record","into_record","into_scalar","into_shape","into_shape","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_normal","is_normal","is_normal","is_require_grad","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_valid_bit_pattern","is_valid_bit_pattern","is_zero","is_zero","iter_dim","le","le","ln","ln","ln","ln","ln_1p","ln_1p","ln_1p","ln_1p","load_record","load_record","load_record","log","log","log","log","log","log10","log10","log10","log10","log1p","log2","log2","log2","log2","loss","lower","lower","lower","lower","lower_elem","lower_elem","lower_elem","lower_elem","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","lt","lt","make_element","map","map","map","map","mask_fill","mask_fill","mask_fill","mask_fill","mask_where","mask_where","mask_where","mask_where","matmul","matmul","max","max","max","max","max","max","max","max","max","max","max","max","max_dim","max_dim","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","mean","mean","mean","mean","mean_dim","mean_dim","mean_dim","mean_dim","min","min","min","min","min","min","min","min","min","min","min","min","min_dim","min_dim","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","module","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_scalar","mul_scalar","mul_scalar","mul_scalar","name","name","name","name","nan","nan","nan","nan","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg_infinity","neg_infinity","neg_infinity","neg_infinity","neg_zero","neg_zero","neg_zero","neg_zero","new","new","new","new","new","next","num_elements","one","one","one_hot","ones","ones","ones","ones","ones","ones_device","ones_like","ops","partial_cmp","partial_cmp","powf","powf","powf","powf","powf","powi","powi","powi","powi","powi","powi","precision","precision","precision","product","product","product","product","random","random","random","random","random","random","random_device","random_like","read","read_sync","recip","recip","recip","recip","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","repeat","repeat","repeat","repeat","repeat","require_grad","reshape","reshape","reshape","reshape","reshape","reshape","round","round","round","round","round","round","sample","sampler","scatter","scatter","scatter","scatter","select","select","select","select","select_assign","select_assign","select_assign","select_assign","serialize","serialize","serialize","serialize","serialize_as_f32","serialize_as_f32","serialize_as_string","serialize_as_string","set_print_options","set_require_grad","shape","shape","shape","shape","shape","shape","shape","shape","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin","sin","sin_cos","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sinh","slice","slice","slice","slice","slice","slice_assign","slice_assign","slice_assign","slice_assign","slice_assign","sqrt","sqrt","sqrt","sqrt","sqrt","squeeze","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sum","sum","sum","sum","sum","sum","sum","sum","sum_dim","sum_dim","sum_dim","sum_dim","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","tan","tan","tan","tan","tanh","tanh","tanh","tanh","tanh","testgen_abs","testgen_add","testgen_aggregation","testgen_all","testgen_arange","testgen_arange_step","testgen_arg","testgen_cast","testgen_cat","testgen_clamp","testgen_clone_invariance","testgen_cos","testgen_cov","testgen_create_like","testgen_diagonal","testgen_display","testgen_div","testgen_erf","testgen_exp","testgen_flatten","testgen_full","testgen_gather_scatter","testgen_gelu","testgen_init","testgen_iter_dim","testgen_log","testgen_log1p","testgen_map_comparison","testgen_mask","testgen_matmul","testgen_maxmin","testgen_module_adaptive_avg_pool1d","testgen_module_adaptive_avg_pool2d","testgen_module_avg_pool1d","testgen_module_avg_pool2d","testgen_module_conv1d","testgen_module_conv2d","testgen_module_conv_transpose1d","testgen_module_conv_transpose2d","testgen_module_forward","testgen_module_max_pool1d","testgen_module_max_pool2d","testgen_module_unfold4d","testgen_mul","testgen_neg","testgen_one_hot","testgen_powf","testgen_random","testgen_recip","testgen_relu","testgen_repeat","testgen_reshape","testgen_select","testgen_sigmoid","testgen_silu","testgen_sin","testgen_slice","testgen_softmax","testgen_sqrt","testgen_squeeze","testgen_sub","testgen_tanh","testgen_tanh_activation","testgen_transpose","testgen_var","threshold","to_be_bytes","to_be_bytes","to_bits","to_bits","to_data","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_f16","to_f32","to_f32","to_f32","to_f32","to_f32","to_f32_const","to_f32_const","to_f64","to_f64","to_f64","to_f64","to_f64_const","to_f64_const","to_full_precision","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_radians","to_radians","to_radians","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u16","to_u16","to_u32","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","total_cmp","total_cmp","transpose","transpose","transpose","transpose","transpose","transpose_into_fallible","trunc","trunc","trunc","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsqueeze","unsqueeze_dim","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","validate_result","value","value","var","var_bias","var_mean","var_mean_bias","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros_device","zeros_like","gelu","log_sigmoid","log_softmax","relu","sigmoid","silu","softmax","tanh","AutodiffBackend","Backend","BoolTensorPrimitive","Device","FloatElem","FullPrecisionBackend","FullPrecisionElem","Gradients","InnerBackend","IntElem","IntTensorPrimitive","TensorPrimitive","ad_enabled","backward","bool_from_inner","bool_inner","from_inner","grad","grad_remove","grad_replace","inner","int_from_inner","int_inner","name","seed","sync","TensorContainer","adapt","borrow","borrow_mut","default","deref","deref_mut","downcast","drop","fmt","from","get","init","into","is_empty","len","new","register","remove","try_from","try_into","type_id","upcast","vzip","cross_entropy_with_logits","adaptive_avg_pool1d","adaptive_avg_pool2d","avg_pool1d","avg_pool2d","conv1d","conv2d","conv_transpose1d","conv_transpose2d","embedding","max_pool1d","max_pool1d_with_indices","max_pool2d","max_pool2d_with_indices","unfold4d","ActivationOps","BoolTensor","BoolTensorOps","Conv1dBackward","Conv2dBackward","ConvOptions","ConvTransposeOptions","Device","FloatElem","FloatTensor","FullPrecisionBackend","IntElem","IntTensor","IntTensorOps","MaxPool1dBackward","MaxPool1dWithIndices","MaxPool2dBackward","MaxPool2dWithIndices","ModuleOps","TensorOps","UnfoldOptions","abs","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adaptive_avg_pool1d","adaptive_avg_pool1d_backward","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","arange","arange_step","argmax","argmin","avg_pool1d","avg_pool1d_backward","avg_pool2d","avg_pool2d_backward","bias_grad","bias_grad","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_repeat","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_data","bool_to_device","bool_transpose","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv1d","conv1d_backward","conv2d","conv2d_backward","conv_transpose1d","conv_transpose1d_backward","conv_transpose2d","conv_transpose2d_backward","cos","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","detach","device","dilation","dilation","dilation","div","div_scalar","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","embedding","embedding_backward","empty","equal","equal_elem","erf","exp","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_data","from_full_precision","full","gather","gelu","gelu_backward","greater","greater_elem","greater_equal","greater_equal_elem","groups","groups","hash","hash","indices","indices","init","init","init","init","init","init","init","init","init","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max","int_max_dim","int_max_dim_with_indices","int_mean","int_mean_dim","int_min","int_min_dim","int_min_dim_with_indices","int_mul","int_mul_scalar","int_neg","int_ones","int_repeat","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_data","int_to_device","int_transpose","int_zeros","into","into","into","into","into","into","into","into","into","into_data","into_int","is_require_grad","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max","max_dim","max_dim_with_indices","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","min","min_dim","min_dim_with_indices","mul","mul_scalar","neg","new","new","new","new","new","new","new","new","new","ones","output","output","padding","padding","padding","padding_out","pool","powf","random","recip","relu","relu_backward","repeat","reshape","scatter","select","select_assign","set_require_grad","shape","sin","slice","slice_assign","sqrt","stride","stride","stride","sub","sub_scalar","sum","sum_dim","swap_dims","tanh","to_data","to_device","to_full_precision","to_owned","to_owned","to_owned","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold4d","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights_grad","weights_grad","x_grad","x_grad","x_grad","x_grad","zeros","calculate_conv_output_size","calculate_conv_padding","calculate_conv_transpose_output_size","calculate_pool_output_size","ClassificationOutput","EarlyStoppingStrategy","Learner","LearnerBuilder","MetricEarlyStoppingStrategy","MultiDevicesTrainStep","NoImprovementSince","RegressionOutput","StoppingCondition","TrainEpoch","TrainOutput","TrainStep","TrainingInterrupter","ValidEpoch","ValidStep","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","checkpoint","checkpoint","clone","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","early_stopping","fit","from","from","from","from","from","from","from","from","from","from","grads","grads_accumulation","init","init","init","init","init","init","init","init","init","init","interrupter","into","into","into","into","into","into","into","into","into","into","item","log_to_file","logger","loss","loss","metric","metric_loggers","metric_train","metric_train_numeric","metric_valid","metric_valid_numeric","new","new","new","new","new","new","new","new","num_epochs","optimize","output","output","renderer","renderer","run","run","run_multi_device","should_stop","should_stop","should_stop","step","step","stop","targets","targets","to_owned","train","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_checkpointing_strategy","with_file_checkpointer","n_epochs","AsyncCheckpointer","Checkpointer","CheckpointerError","CheckpointingAction","CheckpointingStrategy","ComposedCheckpointingStrategy","ComposedCheckpointingStrategyBuilder","Delete","FileCheckpointer","IOError","KeepLastNCheckpoints","MetricCheckpointingStrategy","RecorderError","Save","Unknown","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","checkpointing","checkpointing","checkpointing","checkpointing","clone","clone_into","default","delete","delete","delete","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","new","new","new","new","restore","restore","restore","save","save","save","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AsyncLogger","FileLogger","FileMetricLogger","InMemoryLogger","InMemoryMetricLogger","Logger","Logger","LoggerBackend","MetricLogger","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","end_epoch","end_epoch","end_epoch","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","log","log","log","log","log","log","log","new","new","new","new","read_numeric","read_numeric","read_numeric","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","AccuracyInput","AccuracyMetric","Adaptor","CUDAMetric","CpuMemory","CpuTemperature","CpuUse","Input","LearningRateMetric","LossInput","LossMetric","Metric","MetricEntry","MetricMetadata","NAME","Numeric","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone_into","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","epoch","epoch_total","fmt","format_float","formatted","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","iteration","lr","name","new","new","new","new","new","new","new","new","new","new","progress","serialize","state","store","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","update","update","update","update","update","update","update","update","value","value","value","value","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_pad_token","FormatOptions","NumericMetricState","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","init","init","into","into","new","new","precision","reset","try_from","try_from","try_into","try_into","type_id","type_id","unit","upcast","upcast","update","value","vzip","vzip","Aggregate","Direction","EndEpoch","Event","EventStore","EventStoreClient","Highest","Lowest","Mean","MetricsUpdate","MetricsUpdate","Split","Train","Valid","adapt","adapt","adapt","adapt","adapt","adapt","add_event","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","entries","entries_numeric","eq","equivalent","equivalent","equivalent","find_epoch","find_epoch","find_metric","find_metric","fmt","from","from","from","from","from","from","hash","init","init","init","init","init","init","into","into","into","into","into","into","new","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","Generic","MetricState","MetricsRenderer","Numeric","SelectedMetricsRenderer","TrainingProgress","adapt","adapt","adapt","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","drop","epoch","epoch_total","fmt","fmt","from","from","from","from","init","init","init","into","into","into","iteration","new","none","progress","render_train","render_train","render_valid","render_valid","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","update_train","update_train","update_valid","update_valid","vzip","vzip","vzip","MultiDevicesTrainStep","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","init","into","new","step","try_from","try_into","type_id","upcast","vzip"],"q":[[0,"burn"],[13,"burn::backend"],[903,"burn::backend::autodiff"],[952,"burn::backend::autodiff::grads"],[974,"burn::backend::autodiff::ops"],[1090,"burn::backend::libtorch"],[1172,"burn::backend::ndarray"],[1228,"burn::backend::wgpu"],[1434,"burn::backend::wgpu::compute"],[1627,"burn::backend::wgpu::kernel"],[1855,"burn::backend::wgpu::kernel::conv"],[1891,"burn::backend::wgpu::kernel::matmul"],[1984,"burn::backend::wgpu::kernel::matmul::unpadded"],[2003,"burn::backend::wgpu::kernel::matmul::utils"],[2004,"burn::backend::wgpu::kernel::matmul::vec4"],[2023,"burn::backend::wgpu::kernel::matmul::vec4_lhs"],[2042,"burn::backend::wgpu::kernel::pool"],[2132,"burn::backend::wgpu::kernel::prng"],[2136,"burn::backend::wgpu::kernel::reduce"],[2284,"burn::backend::wgpu::tensor"],[2315,"burn::config"],[2342,"burn::data"],[2344,"burn::data::dataloader"],[2478,"burn::data::dataloader::batcher"],[2480,"burn::data::dataset"],[2698,"burn::data::dataset::source"],[2699,"burn::data::dataset::source::huggingface"],[2750,"burn::data::dataset::transform"],[2851,"burn::grad_clipping"],[2896,"burn::lr_scheduler"],[2903,"burn::lr_scheduler::constant"],[2928,"burn::lr_scheduler::noam"],[2978,"burn::module"],[3155,"burn::nn"],[4323,"burn::nn::Initializer"],[4334,"burn::nn::attention"],[4543,"burn::nn::cache"],[4560,"burn::nn::conv"],[5093,"burn::nn::gru"],[5208,"burn::nn::loss"],[5482,"burn::nn::lstm"],[5500,"burn::nn::pool"],[5855,"burn::nn::transformer"],[6455,"burn::optim"],[7276,"burn::optim::adaptor"],[7298,"burn::optim::decay"],[7387,"burn::optim::momentum"],[7481,"burn::optim::record"],[7581,"burn::record"],[7985,"burn::tensor"],[9538,"burn::tensor::activation"],[9546,"burn::tensor::backend"],[9572,"burn::tensor::container"],[9596,"burn::tensor::loss"],[9597,"burn::tensor::module"],[9611,"burn::tensor::ops"],[10000,"burn::tensor::ops::conv"],[10004,"burn::train"],[10224,"burn::train::StoppingCondition"],[10225,"burn::train::checkpoint"],[10388,"burn::train::logger"],[10493,"burn::train::metric"],[10732,"burn::train::metric::state"],[10772,"burn::train::metric::store"],[10903,"burn::train::renderer"],[10972,"burn::train::train"],[10990,"burn_autodiff::tensor"],[10991,"core::ops::range"],[10992,"alloc::alloc"],[10993,"alloc::vec"],[10994,"core::clone"],[10995,"core::option"],[10996,"core::default"],[10997,"core::fmt"],[10998,"core::fmt"],[10999,"core::fmt"],[11000,"alloc::string"],[11001,"burn_fusion::backend"],[11002,"core::any"],[11003,"burn_autodiff::graph::node"],[11004,"alloc::sync"],[11005,"core::ops::function"],[11006,"core::marker"],[11007,"core::marker"],[11008,"burn_autodiff::graph::requirement"],[11009,"tch::wrappers::kind"],[11010,"core::ops::function"],[11011,"tch::wrappers::tensor"],[11012,"core::ffi"],[11013,"alloc::rc"],[11014,"ndarray"],[11015,"ndarray::dimension::dynindeximpl"],[11016,"ndarray::dimension::dim"],[11017,"ndarray"],[11018,"core::hash"],[11019,"burn_fusion::backend"],[11020,"wgpu"],[11021,"burn_compute::memory_management::simple"],[11022,"burn_compute::channel::mutex"],[11023,"burn_compute::client"],[11024,"burn_compute::server"],[11025,"burn_compute::memory_management::base"],[11026,"burn_compute::storage::base"],[11027,"burn_wgpu::element"],[11028,"burn_compute::tune::operation"],[11029,"std::path"],[11030,"core::convert"],[11031,"core::marker"],[11032,"std::path"],[11033,"rmp_serde::encode"],[11034,"r2d2"],[11035,"gix_tempfile::handle"],[11036,"gix_tempfile::handle::persist::error"],[11037,"rusqlite::error"],[11038,"fallible_iterator"],[11039,"core::iter::traits::iterator"],[11040,"serde::ser"],[11041,"core::error"],[11042,"fallible_iterator"],[11043,"num_traits::cast"],[11044,"exr::block::samples"],[11045,"core::num::dec2flt"],[11046,"num_traits::cast"],[11047,"rand_core"],[11048,"core::cmp"],[11049,"exr::image::validate_results"],[11050,"burn_train::metric::processor::full"],[11051,"burn_train::components"],[11052,"core::fmt"]],"d":["Type alias for the learning rate.","Backend module.","The configuration module.","Constant macro.","Data module.","Gradient clipping module.","Learning rate scheduler module.","Module for the neural network module.","Neural network module.","Optimizer module.","Module for the recorder.","Module for the tensor.","Train module","Enable auto-differentiation on a backend.","Enable dynamic operation fusion on a backend that …","Tensor backend that uses <code>LibTorch</code> with the tch crate for …","Tensor backend that uses the ndarray crate for executing …","Tensor backend that uses the wgpu crate for executing GPU …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchangedalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codenable auto-differentiation on a backend.","Gradients module.","Operation module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gradient identifier.","Gradients container used during the backward pass.","","","","Consumes the gradients for a given tensor.","","","","","Returns the argument unchanged.","Gets a grad tensor from the container.","","Calls <code>U::from(self)</code>.","Creates a new gradients container.","Register a grad tensor in the container.","Removes a grad tensor from the container.","","","","","","Trait for all operations.","Init operation tag.","Operation containing its parent nodes, its own node and …","Enum used before finishing tracked and untracked …","Operation in preparation.","Associated type to compute the backward pass.","Tracked operation tag.","Tracked operation preparation.","Untracked operation tag.","Untracked operation preparation.","","","","","","","The backward pass.","Execute a binary operation during the backward step.","","","","","","","","","","","","","Make sure the grad tensor has the given shape.","","","","","","","","","","","","","","","","","","","","","","","","","Finish the preparation of an untracked operation and …","Finish the preparation of a tracked operation and returns …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>OpsPrep</code>.","Constructs a new <code>Ops</code>.","The node.","Parents nodes.","Prepare the backward ops.","The state.","Prepare an operation that requires a state during the …","Prepare a stateless operation.","","","","","","","","","","","","","","","","","","","Execute a unary operation during the backward step.","Execute a unary operation during the backward step where …","","","","","","","","","","","","","CPU device.","Cuda device with the given index. The index is the index …","Tensor backend that uses <code>LibTorch</code> with the tch crate for …","The device struct when using the <code>tch</code> backend.","Metal Performance Shaders device.","A reference to a tensor storage.","The element type for the tch backend.","A shape that can be used by LibTorch.","A tensor that uses the tch backend.","Vulkan device.","","","","","Execute a binary ops reusing the tensor data if possible.","","","","","","","","","","","","","","","","","","The shape’s dimensions.","","","","","","","Creates an empty tensor from a shape and a device.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new tensor from a shape and a device.","Create a tensor that was created from an operation …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Execute an operation on a tensor if the data can be reused.","Create a new tensor.","The tensor’s storage","Handle to the tensor. Call methods on this field.","","","","","","","","","","","","Execute a unary ops reusing the tensor data if possible.","","","","","","","The CPU device.","A float element for ndarray backend.","Tensor backend that uses the ndarray crate for executing …","The device type for the ndarray backend.","Tensor primitive used by the ndarray backend.","","","Dynamic array that contains the data of type E.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new ndarray tensor from data.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Macro for iterating in parallel.","Macro for iterating over a range in parallel.","Constructs a new <code>NdArrayTensor</code>.","Reshapes an array into a tensor.","Macro for running a function in parallel.","","","Converts a slice of usize to a typed dimension.","","","","","","","","","","","Automatic graphics API based on OS.","The best available device found with the current graphics …","CPU.","Discrete GPU with the given index. The index is the index …","DirectX 11 graphics API.","DirectX 12 graphics API.","The float element type for the wgpu backend.","The basic trait to specify which graphics API to use as …","The int element type for the wgpu backend.","Integrated GPU with the given index. The index is the …","Metal graphics API.","OpenGL graphics API.","Virtual GPU with the given index. The index is the index …","Vulkan graphics API.","WebGpu graphics API.","Tensor backend that uses the wgpu crate for executing GPU …","The device struct when using the <code>wgpu</code> backend.","","","","","","","","","The wgpu backend.","","","","","","","","Creates a binary elementwise kernel.","Creates a binary elementwise inplace kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a comparison kernel.","Creates a comparison elementwise kernel.","Creates a comparison elementwise inplace kernel.","Creates a comparison inplace kernel.","Compute related module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Kernel module","Generates kernel source code by replacing some information …","Generate an autotune operation for a reduce kernel","Tensor module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a unary kernel.","Creates a unary inplace kernel.","Creates a unary scalar kernel.","Creates a unary scalar inplace kernel.","","","","","","","","","","","","","","","","","Wraps a dynamic kernel source into a kernel with launch …","Represents an entire buffer.","Kernel trait with the source that will be compiled and …","Key for matmul operation","Key for mean_dim operations","Wgpu compute server","A slice over a buffer.","Wraps a static kernel source into a kernel with launch …","Key for sum_dim operations","Key for all autotune-enabled operations","Wgpu compute client to communicate with the compute server.","Wgpu server handle.","The memory resource that can be allocated for wgpu.","How the resource is used, either as a slice or fully.","Wgpu compute server.","Buffer storage for wgpu.","Provides launch information specifying the number of work …","","","","","","","","","","Return the binding view of the buffer.","","","","","","","","","","","","","","","","","The wgpu buffer.","","","","","Get the compute client for the given device.","When we create a new handle from existing data, we use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Identifier for the kernel, used for caching kernel …","","","","","","","","","","","Init the client async, necessary for wasm.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How the resource is used.","Handle for the memory in use.","Create a new storage on the given device.","Constructs a new <code>WorkGroup</code>.","Constructs a new <code>DynamicKernel</code>.","Constructs a new <code>StaticKernel</code>.","Create a new server.","Constructs a new <code>WgpuResource</code>.","Calculate the number of invocations of a compute shader.","Return the buffer offset.","Actually deallocates buffers tagged to be deallocated.","","Select the wgpu device and queue based on the provided …","Return the buffer size.","Source template for the kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Launch information.","","","Work groups for the x axis.","Work groups for the y axis.","Work groups for the z axis.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generate kernel source code by replacing some information …","Dynamic wgpu kernel to create a source template.","Generates kernel source code by replacing some information …","Kernel source code abstraction allowing for templating.","Static wgpu kernel to create a source template.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","","","","","","Add a new template.","Execute a binary kernel using the provided WORKGROUP.","Execute a binary kernel using the default settings.","Execute a binary inplace kernel using the provided …","Execute a binary inplace kernel using the default settings.","","","","","","","","","","","","","","","","","","","","","","","Create a vector containing the dimension, strides and …","Similar to build info but with dynamic rank.","Cast a tensor to the given element type.","Complete the template and returns the source code.","Convolution kernels","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Identifier for the kernel, used for caching kernel …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make a wgpu tensor contiguous.","Similar to into contiguous but with dynamic rank.","Matmul kernels","Constructs a new <code>ContiguousRaw</code>.","Constructs a new <code>DynamicKernelSettings</code>.","Constructs a new <code>BinaryElemwiseRaw</code>.","Constructs a new <code>BinaryElemwiseInplaceRaw</code>.","Constructs a new <code>CastRaw</code>.","Create a new source template.","Constructs a new <code>UnaryRaw</code>.","Constructs a new <code>UnaryInplaceRaw</code>.","Constructs a new <code>UnaryScalarRaw</code>.","Constructs a new <code>UnaryScalarInplaceRaw</code>.","Pooling kernels","Pseudo-random number generator kernels","Reduction algorithms","Register the value for a placeholder item.","Source template for the kernel.","Source template for the kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute a unary kernel using the provided WORKGROUP.","Execute a unary kernel using the default settings.","Execute a unary inplace kernel using the provided …","Execute a unary inplace kernel using the default settings.","Execute a unary scalar kernel using the provided WORKGROUP.","Execute a unary scalar kernel using the default settings.","Execute a unary scalar inplace kernel using the provided …","Execute a unary scalar inplace kernel using the default …","","","","","","","","","","","","","","","","","","","","","","","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>Conv2d</code>.","Constructs a new <code>ConvTranspose2d</code>.","","","","","","","","","","","","","Autotune key representative of matmul versions","Set of matmul implementations available for autotune …","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates an empty output tensor with matmul output shape","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Executes autotune on matmul operations","Matrix multiplication using memory coalescing algorithm …","Matrix multiplication using memory coalescing algorithm …","Matrix multiplication using naive algorithm with custom …","Matrix multiplication using naive algorithm with …","Constructs a new <code>MatmulMemCoalescingRaw</code>.","Constructs a new <code>MatmulNaiveRaw</code>.","Create a matmul autotune key from the input shapes","","","","","","","","","","","","","","","","","WGSL vec4 primitives are used on left and right hand …","","","","","Contains utilitary for matmul operation","WGSL vec4 primitives are used on left and right hand tensor","WGSL vec4 primitives are used on left hand tensor","","","","","Generated kernel from wgsl file.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Matrix multiplication using tiling 2d algorithm with vec4 …","Constructs a new <code>MatmulTiling2DUnpaddedRaw</code>.","","","","","","","Creates an empty output tensor with matmul output shape","Generated kernel from wgsl file.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Matrix multiplication using tiling 2d algorithm with vec4 …","Constructs a new <code>MatmulTiling2Dvec4Raw</code>.","","","","","","","Generated kernel from wgsl file.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Matrix multiplication using tiling 2d algorithm with vec4 …","Constructs a new <code>MatmulTiling2DVec4LhsRaw</code>.","","","","","","","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>AvgPool2dRaw</code>.","Constructs a new <code>AvgPool2dBackwardRaw</code>.","Constructs a new <code>MaxPool2d</code>.","Constructs a new <code>MaxPool2dWithIndicesBackward</code>.","Constructs a new <code>MaxPool2dWithIndices</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pseudo-random generator for bernoulli","Pseudo-random generator for uniform distribution, based on …","Pseudo-random generator for normal distribution","Pseudo-random generator for uniform distribution","Set of mean_dim implementations available for autotune …","Generated kernel from wgsl file.","Autotune key representative of reduce versions","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Set of sum_dim implementations available for autotune …","","","","","","","","Execute the argmax kernel.","Execute the argmin kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Creates an empty output tensor with reduce output shape","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Execute the mean dim kernel.","Executes autotune on mean_dim operation","Execute the mean dim kernel leveraging shared memory …","Constructs a new <code>RecursiveSumRaw</code>.","Constructs a new <code>ReductionDimRaw</code>.","Constructs a new <code>ReductionArgsRaw</code>.","Constructs a new <code>ReductionDimSharedMemoryRaw</code>.","Create a reduce autotune key from the input shape and …","","","","","Sum all elements in the input buffer.","Execute the sum dim kernel.","Executes autotune on sum_dim operation","Execute the sum dim kernel leveraging shared memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The basic tensor primitive struct.","","Assert that both tensors are on the same device.","","","Check if the tensor is safe to mutate.","Compute client for wgpu.","","","Copy the current tensor.","","","The device of the current tensor.","","","","Returns the argument unchanged.","The buffer where the data are stored.","","Calls <code>U::from(self)</code>.","Check if the current tensor is contiguous.","Create a new tensor.","The shape of the current tensor.","The strides of the current tensor.","Change the context of the current tensor and return the …","","","","","","","Configuration trait.","Derive macro for the config.","Configuration IO error.","File not found.","Invalid format.","","","","Converts a configuration to a JSON string.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Loads the configuration from a file.","Loads the configuration from a binary buffer.","Saves the configuration to a file.","","","","","","","Dataloader module.","Dataset module.","A batch of items.","A data loader that can be used to iterate over a dataset …","A strategy to batch items.","A data loader that can be used to iterate over a dataset.","A builder for data loaders.","A data loader iterator that can be used to iterate over a …","The dataset trait defines a basic collection of items with …","Dataset iterator.","The thread is done.","A strategy to batch items with a fixed batch size.","A message that can be sent between threads.","A multi-threaded data loader that can be used to iterate …","A progress struct that can be used to track the progress …","","","","","","","Adds an item to the strategy.","","Batches the items.","","Sets the batch size to a fix number.The fix batch strategy …","Module for batching items.","","","","","","","","","","","","","Builds the data loader.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the item at the given index.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the dataset is empty.","The number of items that have been processed.","The total number of items that need to be processed.","Returns a boxed iterator to iterate over the data loader.","","","Returns an iterator over the dataset.","Gets the number of items in the dataset.","Creates a new multi-threaded batch data loader.","Creates a new batch data loader.","Creates a new data loader builder.","Creates a new multi-threaded data loader.","Creates a new strategy to batch items with a fixed batch …","Creates a new strategy of the same type.","","Sets the number of workers.","Returns the progress of the data loader.","Sets the seed for shuffling.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait for batching items of type <code>I</code> into items of type <code>O</code>.","Batches the given items.","Error when creating the connection pool.","The dataset trait defines a basic collection of items with …","Dataset iterator.","Contains the error value","Fail to download python dependencies.","The database file already exists error.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","Dataset where all items are stored in ram.","IO related error.","Contains the success value","Any other error.","Error when persisting the temporary database file.","python3 is not installed.","Result type for the sqlite dataset.","Serde related error.","Sql related error.","This struct represents a dataset where all items are …","Fail to create sqlite dataset.","Sqlite dataset error.","The <code>SqliteDatasetStorage</code> struct represents a SQLite …","This <code>SqliteDatasetWriter</code> struct is a SQLite database …","Unknown error.","venv environment is not initialized.","","","","","","","","","Determines the base directory for storing the dataset.","","","","","","","","","","","","","","","","","","","Load the dataset.","Get the path to the sqlite database file.","Get the database file name.","Fetches the database file path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the database file exists in the given path.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create from a csv file.","Create from a dataset. All items are loaded in memory.","Initializes a <code>SqliteDataset</code> from a SQLite database file …","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Create from a json rows file (one json per line).","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Gets the item at the given index.","","Get an item from the dataset.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert an iterator of anything into <code>FallibleIterator</code> by …","","Checks if the dataset is empty.","Returns an iterator over the dataset.","Gets the number of items in the dataset.","","Return the number of rows in the dataset.","","","","","","","","","","","","","","Create a huggingface dataset loader.","Creates a new in memory dataset from the given items.","Creates a new dataset iterator.","Creates a new instance of <code>SqliteDatasetWriter</code>.","","Provides a reader instance for the SQLite dataset.","Marks the dataset as completed and persists the temporary …","Sources for datasets.","","","Get the split name.","","","","Transformations to be used with datasets.","Convert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify a base directory to store the dataset.","Sets the base directory for storing the dataset.","Specify a huggingface cache directory to store the …","Specify a huggingface token to download datasets behind …","Create a huggingface dataset loader for a subset of the …","Serializes and writes an item to the database. The item is …","Provides a writer instance for the SQLite dataset.","Huggingface source","Fail to download python dependencies.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","MNIST dataset from Huggingface.","MNIST item.","python3 is not installed.","Fail to create sqlite dataset.","Unknown error.","venv environment is not initialized.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Image as a 2D array of floats.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Label of the image.","","","Creates a new test dataset.","","Creates a new train dataset.","","","","","","","","","","","Compose multiple datasets together to create a bigger one.","Basic mapper trait to be used with the mapper dataset.","Dataset mapping each element in an inner dataset to …","Only use a fraction of an existing dataset lazily.","Sample items from a dataset.","Shuffled a dataset, consider using sampler dataset is you …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Maps an item of type I to an item of type O.","Creates a new shuffled dataset.","Creates a new sampler dataset with replacement.","Constructs a new <code>ComposedDataset</code>.","Constructs a new <code>MapperDataset</code>.","Constructs a new <code>PartialDataset</code>.","Splits a dataset into multiple partial datasets.","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new sampler dataset with replacement.","Creates a new shuffled dataset with a fixed seed.","Creates a new sampler dataset without replacement.","Gradient Clipping provides a way to mitigate exploding …","Gradient Clipping provides a way to mitigate exploding …","Clip the gradient by norm.","Clip the gradient by norm.","Clip the gradient by value.","Clip the gradient by value.","","","","","","","Clip the gradient.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialize the gradient clipping.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Learning rate scheduler defines how the learning rate will …","Scheduler associative type to be used when saving and …","Constant learning rate scheduler","Load the state of the scheduler as a record.","Noam Learning rate schedule","Perform the scheduler step, potentially updating its …","Get the current state of the scheduler as a record.","Constant learning rate implementing learning rate scheduler…","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Constructs a new <code>ConstantLr</code>.","","","","","","","","","Noam learning rate scheduler as described in Attention Is …","Configuration to create a noam learning rate scheduler.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Initialize a new noam learning rate scheduler.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new instance of the config.","","","","","","","","","","","","","","","","","The size of the model.","The number of steps before the exponential decay stats.","Module with auto-differentiation backend.","Record used for constant type implementing the module …","Type alias to <code>Vec&lt;B::Device&gt;</code> which supports <code>no_std</code> …","Inner module without auto-differentiation.","Trait for all neural network modules.","Derive macro for the module.","Module mapper trait.","Module visitor trait.","Define a parameter.","Parameter ID.","Type to save and load the module.","A state that can be updated during the forward pass while …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collects devices in the given vector and returns it with …","","","","","","","","","","","","","","","","","","","","","","","Fork the module and all of its sub-modules to the given …","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Create a new running state from a record.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Convert the module into a record containing the state.","","","","","Convert the parameter ID into a string.","List all the parameter ids in a module.","Load the module from a file using the provided file …","Load the module state from a record.","","","","","Map each tensor parameter in the module with a mapper.","","Execute the given function on the inner value.","","","","Map a bool tensor in the module.","Map a float tensor in the module.","Map an int tensor in the module.","Constructs a new <code>Param</code>.","Constructs a new <code>ConstantRecord</code>.","Create a new parameter ID.","Create a new running state.","Each tensor in the module tree will not require grad.","Get the number of parameters the module has, including all …","Save the module to a file using the provided file recorder.","","Move the module and all of its sub-modules to the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the value on the current thread.","Gets the parameter value.","Get the same module, but on the inner backend without …","","","","","Get the current value,","Get the current value and make sure it is sync.","Visit each tensor parameter in the module with a visitor.","","","","","Visit a bool tensor in the module.","Visit a float tensor in the module.","Visit an int tensor in the module.","","","","","Create a new running state.","Applies Batch Normalization over a tensor as described in …","Configuration to create a BatchNorm layer.","The record type for the module.","The record item type for the module.","Fills tensor with specified value everywhere","Set at random some elements of the input tensor to zero …","Configuration to create a Dropout layer.","Lookup table to store a fix number of vectors.","Configuration to create an Embedding layer.","The record type for the module.","The record item type for the module.","Applies the specified amount of padding to all inputs.","Applies the specified amount of padding to all inputs.","Applies the Gaussian Error Linear Units function …","A GateController represents a gate in an LSTM cell. An …","The record type for the module.","The record item type for the module.","Applies Group Normalization over a mini-batch of inputs.","Configuration to create a GroupNorm layer.","The record type for the module.","The record item type for the module.","Enum specifying with what values a tensor should be …","Fills tensor with values according to the uniform version …","Fills tensor with values according to the uniform version …","Applies Layer Normalization over an input tensor as …","Configuration to create a LayerNorm layer.","The record type for the module.","The record item type for the module.","Applies a linear transformation to the input tensor:","Configuration to create a Linear layer.","The record type for the module.","The record item type for the module.","The Lstm module. This implementation is for a …","The configuration for a lstm module.","The record type for the module.","The record item type for the module.","Fills tensor with values drawn from normal distribution …","Fills tensor with 1s everywhere","Padding configuration for 1D operators.","Padding configuration for 2D operators.","Positional encoding layer for transformer models.","Configuration to create an PositionalEncoding layer.","The record type for the module.","The record item type for the module.","Applies the rectified linear unit function element-wise:","Dynamically calculate the amount of padding necessary to …","Dynamically calculate the amount of padding necessary to …","Four-dimensional unfolding.","Configuration to create an unfold 4D layer.","Fills tensor with values drawn uniformly between specified …","Same as no padding.","Same as no padding.","Fills tensor with values according to the normal version …","Fills tensor with values according to the uniform version …","Fills tensor with 0s everywhere","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","Attention module","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","If a bias should be applied during the linear …","Vector of size <code>d_output</code> initialized from a uniform …","The module record associative type.","Field to be serialized.","If a bias should be applied during the Lstm transformation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cache module","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convolution module","The size of the hidden state.","The module record associative type.","Field to be serialized.","The size of the input features.","The size of the input features.","The size of the input features.","The size of the output features.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Spacing between kernel elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A value required for numerical stability. Default: 1e-5","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","A value required for numerical stability. Default: 1e-5","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor by adding the …","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor. This LSTM …","Applies the forward pass on the input tensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Returns sinusoids for positional embedding introduced in …","Gated Recurrent Unit module.","The module record associative type.","Field to be serialized.","","Initialize a new dropout module.","","Initialize a new embedding module.","","","","","","","Inits a tensor of given shape with values depending on …","","Initialize a new linear module.","","","","Initialize a new batch norm module.","","","","","Initialize a new group norm module.","","","","","","Initialize a new layer norm module.","","","","","","Initialize a new PositionalEncoding module.","","","","","","","","","","Initialize a new lstm module.","","","","Initialize a new unfold 4k module.","","","Initialize a new embedding module with a record.","Inits a tensor of given shape with values depending on …","Initialize a new linear module with a record.","Initialize a new batch norm module with a record.","Initialize a new group norm module with a record.","Initialize a new layer norm module with a record.","Initialize a new lstm module with a record.","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Lstm initializer","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","The size of the kernel.","","","","","","","","","","","","","","","Loss module","Long Short-Term Memory module.","","","","","","","","","","","","","","","Momentum used to update the metrics. Default: 0.1","The module record associative type.","Field to be serialized.","Create a new instance of the config.","Create a new instance of the config.","Create the module.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create the module.","Initialize a new gate_controller module.","Create a new instance of the config.","Create a new instance of the config.","Initialize a new gate_controller module with a record.","The module record associative type.","Field to be serialized.","The number of features.","The module record associative type.","Field to be serialized.","","","","","","","","","The module record associative type.","Field to be serialized.","The padding configuration.","Pooling module","The probability of randomly zeroes some elements of the …","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The stride of the convolution.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transformer modulehe module record associative type.","Field to be serialized.","Matrix of shape <code>[d_input, d_output]</code> initialized from a …","The module record associative type.","Field to be serialized.","A boolean value that when set to <code>true</code>, this module has …","If a bias should be applied during the linear …","Spacing between kernel elements.","A value required for numerical stability. Default: 1e-5","A value required for numerical stability. Default: 1e-5","A value required for numerical stability. Default: 1e-5","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Lstm initializer","Maximum sequence size to use.","Max time scale to use.","Momentum used to update the metrics. Default: 0.1","The padding configuration.","The stride of the convolution.","Whether to use fan out only in initialization formula","Whether to use fan out only in initialization formula","The gain to use in initialization formula","The gain to use in initialization formula","The gain to use in initialization formula","The gain to use in initialization formula","The maximum value to draw from","The mean of the normal distribution","The minimum value to draw from","The standard deviation of the normal distribution","The value to fill the tensor with","Generate a padding attention mask.","Cache for the Multi Head Attention layer.","Multihead attention forward pass input argument.","Multihead attention outputs.","The multihead attention module as describe in the paper …","Configuration to create a Multi Head Attention layer.","The record type for the module.","The record item type for the module.","The module record associative type.","Field to be serialized.","","","","","","","","","Initialize a cache for autoregressive inference.","Initialize a cache for autoregressive inference, but with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The context tensor [batch_size, seq_length_1, d_model].","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","Applies the forward pass on the input tensors.","Applies the forward pass using a cache.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generate an autoregressive attention mask.","Generation padding attention mask.","","","","Initialize a new multihead attention module.","","","","","","Initialize a new multihead attention module with a record.","The type of function used to initialize neural network …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The module record associative type.","Field to be serialized.","","","The generated mask.","Register the attention mask.","Register the padding mask.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Create a new instance of the config.","Create a multihead attention input argument.","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Create a multihead attention input argument by setting the …","","","The generated tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","The attention weights [batch_size, seq_length_1, …","The dropout rate. Default: 0.1","The type of function used to initialize neural network …","The minimum value a float can take. Default: -1.0e4","A cache for a tensor.","","","","","","","","Creates a new empty cache.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Applies a 1D convolution over input tensors.","Configuration to create an 1D convolution layer.","The record type for the module.","The record item type for the module.","Applies a 2D convolution over input tensors.","Configuration to create an 2D convolution layer.","The record type for the module.","The record item type for the module.","Applies a 1D transposed convolution over input tensors.","Configuration to create an 1D transposed convolution layer.","The record type for the module.","The record item type for the module.","Applies a 2D transposed convolution over input tensors.","Configuration to create an 2D transposed convolution layer.","The record type for the module.","The record item type for the module.","","","","","","","","","","","","","","","","","If bias should be added to the output.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of channels.","The number of channels.","The number of channels.","The number of input channels.","The number of output channels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","Initialize a new conv1d module.","","","","","","Initialize a new conv2d module.","","","","","Initialize a new conv transpose 1d module.","","","","","Initialize a new conv transpose 2d module.","","","","Initialize a new conv1d module with a record.","Initialize a new conv2d module with a record.","Initialize a new conv transpose 1d module with a record.","Initialize a new conv transpose 2d module with a record.","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The size of the kernel.","The module record associative type.","Field to be serialized.","The size of the kernel.","The module record associative type.","Field to be serialized.","The size of the kernel.","The module record associative type.","Field to be serialized.","The size of the kernel.","The module record associative type.","Field to be serialized.","","","","","","","","","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","","","","","The padding configuration.","The module record associative type.","Field to be serialized.","The padding configuration.","The module record associative type.","Field to be serialized.","The padding configuration.","The module record associative type.","Field to be serialized.","The padding configuration.","The module record associative type.","Field to be serialized.","The padding output configuration.","The module record associative type.","Field to be serialized.","The padding output configuration.","The module record associative type.","Field to be serialized.","","","","","","","","","The stride of the convolution.","The module record associative type.","Field to be serialized.","The stride of the convolution.","The module record associative type.","Field to be serialized.","The stride of the convolution.","The module record associative type.","Field to be serialized.","The stride of the convolution.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","If bias should be added to the output.","If bias should be added to the output.","If bias should be added to the output.","Spacing between kernel elements.","Spacing between kernel elements.","Spacing between kernel elements.","Spacing between kernel elements.","Controls the connections between input and output channels.","Controls the connections between input and output channels.","Controls the connections between input and output channels.","Controls the connections between input and output channels.","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The padding configuration.","The padding configuration.","The padding configuration.","The padding configuration.","The padding output configuration.","The padding output configuration.","The stride of the convolution.","The stride of the convolution.","The stride of the convolution.","The stride of the convolution.","The Gru module. This implementation is for a …","The configuration for a gru module.","The record type for the module.","The record item type for the module.","","","","","If a bias should be applied during the Gru transformation.","","","","","","","","","","","","","","","","","The size of the hidden state.","The module record associative type.","Field to be serialized.","The size of the input features.","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass on the input tensor. This GRU …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Initialize a new gru module.","","","","","Initialize a new gru module.","Gru initializer","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new instance of the config.","The module record associative type.","Field to be serialized.","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","Gru initializer","The mean of the losses will be returned.","Calculate the cross entropy loss from the input logits and …","Configuration to create a Binary Cross-entropy loss.","The record type for the module.","The record item type for the module.","Calculate the cross entropy loss from the input logits and …","Configuration to create a Cross-entropy loss.","The record type for the module.","The record item type for the module.","Calculate the mean squared error loss from the input …","The mean of the losses will be returned.","The reduction type for the loss.","The sum of the losses will be returned.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the criterion on the input tensor.","Compute the criterion on the input tensor.","Compute the criterion on the input tensor.","Compute the criterion on the input tensor without reducing.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Initialize Binary Cross-entropy loss.","","","","Initialize Cross-entropy loss.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","Create a new instance of the config.","Create a new instance of the config.","For backward compatibility.","Create the criterion.","","","The module record associative type.","Field to be serialized.","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create weighted binary cross-entropy.","Weights for cross-entropy.","The module record associative type.","Field to be serialized.","Weights for cross-entropy.","The module record associative type.","Field to be serialized.","Create binary cross-entropy with probabilities as input …","Create cross-entropy with probabilities as input instead …","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","The Lstm module. This implementation is for a …","The configuration for a lstm module.","The record type for the module.","The record item type for the module.","If a bias should be applied during the Lstm transformation.","The module record associative type.","Field to be serialized.","The size of the hidden state.","The module record associative type.","Field to be serialized.","The size of the input features.","The module record associative type.","Field to be serialized.","Lstm initializer","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Applies a 1D adaptive avg pooling over input tensors.","Configuration to create a 1D adaptive avg pooling layer.","Applies a 2D adaptive avg pooling over input tensors.","Configuration to create a 2D adaptive avg pooling layer.","Applies a 1D avg pooling over input tensors.","Configuration to create a 1D avg pooling layer.","Applies a 2D avg pooling over input tensors.","Configuration to create a 2D avg pooling layer.","Applies a 1D max pooling over input tensors.","Configuration to create a 1D max pooling layer.","Applies a 2D max pooling over input tensors.","Configuration to create an 2D max pooling layer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the padding is counted in the denominator when …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dilation.","The dilation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initialize a new adaptive avg pool 1d module.","","","","Initialize a new adaptive avg pool 2d module.","","Initialize a new avg pool 1d module.","","","","Initialize a new avg pool 2d module.","","","Initialize a new max pool 1d module.","","","Initialize a new max pool 2d module.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The size of the kernel.","The size of the kernel.","The size of the kernel.","The size of the kernel.","","","","","","","","","","","","","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","The size of the output.","The size of the output.","The padding configuration.","The padding configuration.","The padding configuration.","The padding configuration.","","","","","","","The stride.","The stride.","The strides.","The strides.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the padding is counted in the denominator when …","If the padding is counted in the denominator when …","The dilation.","The dilation.","The padding configuration.","The padding configuration.","The padding configuration.","The padding configuration.","The stride.","The stride.","The strides.","The strides.","Applies the position-wise feed-forward network to the …","Configuration to create a position-wise feed-forward layer.","The record type for the module.","The record item type for the module.","The transformer decoder module as describe in the paper …","Autoregressive cache for the Transformer Decoder layer.","Configuration to create a Transformer Decoder layer.","Transformer Decoder forward pass input argument.","Transformer Decoder layer module.","The record type for the module.","The record item type for the module.","The record type for the module.","The record item type for the module.","The transformer encoder module as describe in the paper …","Autoregressive cache for the Transformer Encoder layer.","Configuration to create a Transformer Encoder layer.","Transformer Encoder forward pass input argument.","Transformer encoder layer module.","The record type for the module.","The record item type for the module.","The record type for the module.","The record item type for the module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The size of the position-wise feed-forward network.","The size of the position-wise feed-forward network.","The size of the hidden inner features.","The size of the model.","The size of the model.","The size of the input and output features.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dropout rate. Default: 0.1","The module record associative type.","Field to be serialized.","The dropout rate. Default: 0.1","The module record associative type.","Field to be serialized.","The dropout rate. Default: 0.1","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input using autoregressive …","Applies the forward pass on the input tensor using …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","The module record associative type.","Field to be serialized.","","","","Initialize a new Transformer Decoder module.","","","","","","","","","Initialize a new transformer encoder module.","","","","","","","","","Initialize a new position-wise feed-forward module.","","","","Initialize a new Transformer Decoder module with a record.","Initialize a new transformer encoder module with a record.","Initialize a new position-wise feed-forward module with a …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","Register the attention mask.","Register the padding mask.","Register the memory attention mask.","Register the memory padding mask.","The module record associative type.","Field to be serialized.","The number of attention heads.","The number of attention heads.","The number of layers.","The number of layers.","Create a new instance of the config.","Create a transformer decoder input argument.","Create a new instance of the config.","Create a transformer encoder input argument.","Create a new instance of the config.","Create an empty autoregressive cache.","Create an empty autoregressive cache.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Layer norm will be applied first instead of after the …","The module record associative type.","Field to be serialized.","Layer norm will be applied first instead of after the …","The module record associative type.","Field to be serialized.","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","Register the target attention mask.","Register the target padding mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dropout rate. Default: 0.1","The dropout rate. Default: 0.1","The dropout rate. Default: 0.1","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Layer norm will be applied first instead of after the …","Layer norm will be applied first instead of after the …","AdaGrad optimizer","AdaGrad configuration.","AdaGrad state.","The record item type for the module.","Adam optimizer as described in the paper Adam: A Method …","Adam configuration.","Adam state.","The record item type for the module.","AdamW optimizer as described in the paper Decoupled Weight …","AdamW configuration.","AdamW state.","The record item type for the module.","Adaptive momentum state.","The record item type for the module.","Adaptive momentum state.","The record item type for the module.","CenteredState is to store and pass optimizer step params.","The record item type for the module.","Accumulate gradients into a single Gradients object.","Data type that contains gradients for parameters.","Learning rate decay state (also includes sum state).","The record item type for the module.","General trait to optimize module.","Optimizer that implements stochastic gradient descent with …","Configuration to create the RMSProp optimizer.","RMSPropMomentum is to store config status for optimizer. …","RMSPropMomentumState is to store and pass optimizer step …","The record item type for the module.","State of RMSProp","The record item type for the module.","Optimizer associative type to be used when saving and …","Optimizer that implements stochastic gradient descent with …","Configuration to create the Sgd optimizer.","State of Sgd.","The record item type for the module.","Simple optimizer is an opinionated trait to simplify the …","SquareAvgState is to store and pass optimizer step params.","The record item type for the module.","The state of the optimizer. It also implements record, so …","Accumulate the given gradients for each parameter in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adaptor module for optimizers.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Field to be serialized.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Weight decay module for optimizerseturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Extract each tensor gradients for the given module.","","","","","","","","","","","","Get the gradients for the given parameter id.","Field to be serialized.","Return the accumulated gradients and reset the accumulator …","","","","","","","","","Initialize AdaGrad optimizer.","","","","","Initialize Adam optimizer.","","","","","","Initialize AdamW optimizer.","","","","","","","","Initialize RMSProp optimizer.","","","","","","","","","","Creates a new SgdConfig with default values.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","If any tensor is contained.","The number of gradients tensors registered.","Load the state of the optimizer as a record.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Momentum module for optimizers.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Create a new gradients accumulator.","Create a new instance of the config.","Constructs a new <code>AdaGradState</code>.","Constructs a new <code>LRDecayState</code>.","Create a new instance of the config.","Constructs a new <code>AdamState</code>.","Constructs a new <code>AdaptiveMomentumState</code>.","Create a new instance of the config.","Constructs a new <code>AdamWState</code>.","Constructs a new <code>AdaptiveMomentumWState</code>.","Creates a new GradientsParams.","Create a new instance of the config.","Constructs a new <code>RMSPropState</code>.","Constructs a new <code>SquareAvgState</code>.","Constructs a new <code>CenteredState</code>.","Constructs a new <code>RMSPropMomentumState</code>.","Create a new instance of the config.","Constructs a new <code>SgdState</code>.","Record module for optimizers.","Register a gradients tensor for the given parameter id.","Remove the gradients for the given parameter id.","","","","","","","","","","","","","","","","","Field to be serialized.","Field to be serialized.","Perform the optimizer step using the given learning rate …","The optimizer step is performed for one tensor at a time …","","","A single optimization step for any tensor that represents …","","","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Change the device of the state.","","","","","","Move state to device.","Move state to device.","Move state to device.","Change the device of each tensor gradients registered for …","Moves the state to a device.","Moves the state to a device.","Moves the state to a device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the current state of the optimizer as a recordmoothing constant.","Parameter for Adam.","Parameter for AdamW.","Parameter for Adam.","Parameter for AdamW.","if True, compute the centered RMSProp, the gradient is …","Set the default value for the field.","A value required for numerical stability.","A value required for numerical stability.","A value required for numerical stability.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","momentum for RMSProp.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Weight decay config.","Set the default value for the field.","Set the default value for the field.","Wrapper struct that adapts any simple optimizer into an …","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","Sets the gradient clipping.","Weight decay implementation that transforms gradients.","Configuration to create weight decay.","State of weight decay.","The record item type for the module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Field to be serialized.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new weight decay from a config.","Create a new instance of the config.","Constructs a new <code>WeightDecayState</code>.","L2 penalty.","","","Moves the state to a device.","","","","","Transforms a gradient.","","","","","","","","","","","","","","","","","","","","","Momemtum implementation that transforms gradients.","Configuration to create momentum.","State of momentum.","The record item type for the module.","","","","","","","","","","","","","","","","","","","Dampening factor.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Momemtum factor","Enables Nesterov momentum, see On the importance of …","Creates a new momentum from a config.","Create a new instance of the config.","Constructs a new <code>MomentumState</code>.","","","Moves the state to a device.","","","","","Transforms a gradient.","","","","","","","","","","","","","","","","","Field to be serialized.","","","","","Dampening factor.","Momemtum factor","Enables Nesterov momentum, see [On the importance of …","Optimizer adaptor record.","Optimizer adaptor record item.","Optimizer adaptor record item.","Optimizer adaptor record item.","Rank 1.","Rank 1.","Rank 2.","Rank 2.","Rank 3.","Rank 3.","Rank 4.","Rank 4.","Rank 5.","Rank 5.","Rank 6.","Rank 6.","Rank 7.","Rank 7.","Rank 8.","Rank 8.","Version 1.","Version 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Converts the optimizer state into the record.","Convert the state into the record.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts the record into the optimizer state.","Convert the record into the state.","","","","","","","","","","","","","","","","","","","","","","","","","In memory recorder using the bincode format.","File recorder using the bincode format.","File recorder using the bincode format compressed with …","Metadata of a record.","Record that can be saved by a Recorder.","Record that can be saved by a Recorder without the item.","Recorder trait specialized to save and load data to and …","Recorder optimized for compactness.","Debug recorder.","Default file recorder.","Default recorder.","Precision settings optimized for precision.","File not found.","Recorder trait specialized to save and load data to and …","Float element type.","Default precision settings.","Precision settings optimized for compactness.","Integer element type.","Type of the item that can be serialized and deserialized.","File recorder using the json format compressed with gzip.","Arguments used to load recorded objects.","In memory recorder using the Named MessagePack.","File recorder using the named msgpack format.","File recorder using the named msgpack format compressed …","Inference recorder compatible with no-std.","Training recorder compatible with no-std inference.","(De)serialize parameters into a clean format.","Settings allowing to control the precision when …","File recorder using pretty json format for easy …","Trait to define a family of types which can be recorded …","Derive macro for the record.","Arguments used to record objects.","Record output type.","Record any item implementing Serialize and DeserializeOwned…","Error that can occur when using a Recorder.","Recorder optimized for compactness making it a good choice …","Type of the settings used by the recorder.","Other error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","File extension of the format used by the recorder.","","","","","","","Float type used to record the item.","","","","","","","","","","","","","","","","","","Format used to record the item.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert the given item into a record.","","","","","","","","","","","","","","","","","Int type used to record the item.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the current record into the corresponding item …","Item to record.","Load an item from the given arguments.","Loads an item.","","","","","","","","","Metadata of the record.","Metadata of the record.","Constructs a new <code>ParamSerde</code>.","Constructs a new <code>BinBytesRecorder</code>.","Constructs a new <code>NamedMpkBytesRecorder</code>.","Constructs a new <code>BurnMetadata</code>.","Creates a new record.","Constructs a new <code>BurnRecordNoItem</code>.","Constructs a new <code>BinFileRecorder</code>.","Constructs a new <code>BinGzFileRecorder</code>.","Constructs a new <code>JsonGzFileRecorder</code>.","Constructs a new <code>PrettyJsonFileRecorder</code>.","Constructs a new <code>NamedMpkGzFileRecorder</code>.","Constructs a new <code>NamedMpkFileRecorder</code>.","Records an item.","Saves an item.","","","","","","","","","","","","","Settings used to record the item.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Burn record version used to record the item.","","","","","","","","","","","","","","","","","Trait that list all operations that can be applied on all …","Trait that list all operations that can be applied on all …","Bernoulli distribution.","Bernoulli distribution with the given probability.","A type-level representation of the kind of a bool tensor.","Concrete variant.","Approximate number of <code>bf16</code> significant digits in base 10","Approximate number of <code>f16</code> significant digits in base 10","Data structure for tensors.","Data structure for serializing and deserializing tensor …","Uniform distribution from 0 (inclusive) to 1 (exclusive).","Device type used by the backend.","Dimension trait.","Iterator given by (Tensor::iter_dim).","Distribution for random value of a tensor.","Distribution sampler for random value of a tensor.","Distribution sampler kind for random value of a tensor.","Double precision, e.g. f64.","","","<code>bf16</code> Euler’s number (ℯ)","<code>f16</code> Euler’s number (ℯ)","<code>bf16</code> machine epsilon value","<code>f16</code> machine epsilon value","The type of the tensor elements.","Element trait for tensor.","Element conversion trait for tensor.","Element precision trait for tensor.","Element trait for random value of a tensor.","","","<code>bf16</code> 1/π","<code>f16</code> 1/π","","","<code>bf16</code> 1/√2","<code>f16</code> 1/√2","","","<code>bf16</code> 2/π","<code>f16</code> 2/π","","","<code>bf16</code> 2/√π","<code>f16</code> 2/√π","","","<code>bf16</code> π/2","<code>f16</code> π/2","","","<code>bf16</code> π/3","<code>f16</code> π/3","","","<code>bf16</code> π/4","<code>f16</code> π/4","","","<code>bf16</code> π/6","<code>f16</code> π/6","","","<code>bf16</code> π/8","<code>f16</code> π/8","A type-level representation of the kind of a float tensor","Full precision, e.g. f32.","Half precision, e.g. f16.","<code>bf16</code> positive Infinity (+∞)","<code>f16</code> positive Infinity (+∞)","Inner primitive tensor.","A type-level representation of the kind of a int tensor.","","","<code>bf16</code> 𝗅𝗇 10","<code>f16</code> 𝗅𝗇 10","","","<code>bf16</code> 𝗅𝗇 2","<code>f16</code> 𝗅𝗇 2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀2","<code>f16</code> 𝗅𝗈𝗀₁₀2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀ℯ","<code>f16</code> 𝗅𝗈𝗀₁₀ℯ","","","<code>bf16</code> 𝗅𝗈𝗀₂10","<code>f16</code> 𝗅𝗈𝗀₂10","","","<code>bf16</code> 𝗅𝗈𝗀₂ℯ","<code>f16</code> 𝗅𝗈𝗀₂ℯ","Number of <code>bf16</code> significant digits in base 2","Number of <code>f16</code> significant digits in base 2","Largest finite <code>bf16</code> value","Largest finite <code>f16</code> value","Maximum possible <code>bf16</code> power of 10 exponent","Maximum possible <code>f16</code> power of 10 exponent","Maximum possible <code>bf16</code> power of 2 exponent","Maximum possible <code>f16</code> power of 2 exponent","Maximum subnormal <code>bf16</code> value","Maximum subnormal <code>f16</code> value","Smallest finite <code>bf16</code> value","Smallest finite <code>f16</code> value","Minimum possible normal <code>bf16</code> power of 10 exponent","Minimum possible normal <code>f16</code> power of 10 exponent","One greater than the minimum possible normal <code>bf16</code> power of …","One greater than the minimum possible normal <code>f16</code> power of …","Smallest positive normal <code>bf16</code> value","Smallest positive normal <code>f16</code> value","Minimum positive subnormal <code>bf16</code> value","Minimum positive subnormal <code>f16</code> value","<code>bf16</code> Not a Number (NaN)","<code>f16</code> Not a Number (NaN)","<code>bf16</code> negative infinity (-∞).","<code>f16</code> negative infinity (-∞)","<code>bf16</code> -1","<code>f16</code> -1","<code>bf16</code> -0","<code>f16</code> -0","Named dimension macro.","Named dimensions trait.","A tensor with named dimensions.","Normal distribution.","Normal distribution with the given mean and standard …","Trait that list all operations that can be applied on all …","<code>bf16</code> 1","<code>f16</code> 1","Other precision.","","","<code>bf16</code> Archimedes’ constant (π)","<code>f16</code> Archimedes’ constant (π)","Element precision trait for tensor.","The primitive type of the tensor.","Options for Tensor pretty printing","The radix or base of the internal representation of <code>bf16</code>","The radix or base of the internal representation of <code>f16</code>","Define how data is read, sync or async.","Trait used for reshape arguments.","","","<code>bf16</code> √2","<code>f16</code> √2","Shape of a tensor.","Standard distribution.","Sync data variant.","Transpose marker (zero-size type). Used to sugar the …","A tensor with a given backend, shape and data type.","Tensor type.","A type-level representation of the kind of a tensor.","Uniform distribution.","Uniform distribution. The range is inclusive.","<code>bf16</code> 0","<code>f16</code> 0","Calculate absolute value on all elements of a tensor","","","","","","","Apply element wise absolute value operation","","","","","","","","","","","","","","","The activation module.","","","","","","","","","","","","","","","","","","","Adds two tensors together.","","","","","","","","","Applies element wise addition operation.","","","","","","","","","Adds a scalar to a tensor element-wise.","Applies element wise addition operation with a scalar.","","","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Gets the indices of the maximum elements of a tensor along …","Applies the argmax function along the given dimension and …","","","Gets the indices of the minimum elements of a tensor along …","Applies the argmin function along the given dimension and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Asserts the data is approximately equal to another data.","Asserts the data is approximately equal to another data.","Asserts each value is within a given range.","","","","","","","","","","","","","The backend module.","Backward pass of the tensor.","A 16-bit floating point type implementing the <code>bfloat16</code> …","","Inverses boolean values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Concatenates the given tensors along the given dimension.","Concatenates all tensors into a new one along the given …","","","","","","","","","","","","","","We use a macro for all checks, since the panic message …","Clamp the tensor between the given min and max values.","Restrict a value to a certain interval unless it is NaN.","Restrict a value to a certain interval unless it is NaN.","Clamp the tensor between the given min and max values.","","","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","","","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","","","Returns the floating point category of the number.","","","","Returns the floating point category of the number.","","","","","","","","","","","","","","","","","","","","","","","","","","The container module.","Converts the data to a different element type.","Converts the data to a different element type.","Converts the data to a different element type.","Returns a number composed of the magnitude of <code>self</code> and the …","Returns a number composed of the magnitude of <code>self</code> and the …","","","","","Applies element wise cosine operation.","","","","","Calculate covaraince matrix between different entries …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Detach the current tensor from the autodiff graph.","Returns the device on which the tensor is allocated.","Returns the device of the current tensor.","","","","","","","Create diagonal matrix.","Returns the dimensions of the current tensor.","The dimensions of the tensor.","Divides two tensors.","","","","","","","","","","Applies element wise division operation.","","","","","","","","Divides a tensor by a scalar element-wise.","Applies element wise division operation with a scalar.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of starting elements and ending elements to display","Converts and returns the converted element.","","","Returns the name of the element type.","Creates an empty tensor with the given shape.","Create an empty tensor of the given shape.","","","","Create an empty tensor of the given shape.","","","","","","","","","","","","","Equates the given tensors.","Applies element wise equal comparison and returns a …","","","","Element-wise equality between two tensors.","Applies element wise equal comparison and returns a …","","","","","","","","","","","","","","","Applies the error function element wise.","","","","","Applies element wise exponential operation.","","","","","","","","","A 16-bit floating point type implementing the IEEE …","Flatten the tensor along a given range of dimensions.","Returns a new tensor with the same shape and device as the …","Convert the bool tensor into an float tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Constructs a <code>bf16</code> value from the raw bits.","Constructs a 16-bit floating point value from the raw bits.","Create a boolean tensor from data.","Create a boolean tensor from data on the given device.","Creates a tensor from the given data.","Create a tensor from the given data.","","","","Create a tensor from the given data on the given device.","Converts an element to another element.","","","","","Constructs a <code>bf16</code> value from a 32-bit floating point value.","","Constructs a 16-bit floating point value from a 32-bit …","","Constructs a <code>bf16</code> value from a 32-bit floating point value.","Constructs a 16-bit floating point value from a 32-bit …","Constructs a <code>bf16</code> value from a 64-bit floating point value.","","","Constructs a 16-bit floating point value from a 64-bit …","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","Create a tensor from floats (f32).","Returns a tensor on the selected backend from a full …","","","","","","","","","Convert a tensor to the autodiff backend.","Convert a tensor to the autodiff backend.","","","","Create a tensor from integers (i32).","","","","","","","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Converts from a primitive tensor into a tensor.","","","","","Create a named tensor from a tensor.","","","","","","","","","","Converts the usize data to a different element type.","Creates a tensor filled with elements equal to the given …","Create a tensor of the given shape where each element is …","","","Populates the data with the given value","Create a tensor of the given shape where each element is …","Gathers elements from a tensor along an axis.","Gather tensor elements corresponding to the given indices …","","","","","Get the gradients of a tensor if it exist.","Remove the grad tensor from the grads struct returning the …","Replace the grad tensor from the grads struct with the …","Element-wise greater than comparison between two tensors.","Applies element wise greater comparison and returns a …","","","Element-wise greater than comparison between a tensor and …","Applies element wise greater comparison and returns a …","","","Element-wise greater than or equal comparison between two …","Applies element wise greater-equal comparison and returns …","","","Element-wise greater than or equal comparison between a …","Applies element wise greater-equal comparison and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the inner tensor without the autodiff information.","Returns the inner tensor without the autodiff information.","","","","Executes an operation on the tensor and modifies its value.","Returns a new tensor with the same shape and device as the …","Convert the bool tensor into an int tensor.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the data from the tensor.","Returns the data of the current tensor.","","","","Convert an iterator of anything into <code>FallibleIterator</code> by …","","","","","","","","Converts the tensor into a primitive tensor.","","","","Convert the tensor into a scalar.","Converts to a shape.","","Returns <code>true</code> if this number is neither infinite nor NaN.","","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","","Returns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.","","","","","Returns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.","","Returns <code>true</code> if this value is NaN and <code>false</code> otherwise.","","","Returns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.","","","Returns <code>true</code> if the number is neither zero, infinite, …","","","","Returns <code>true</code> if the number is neither zero, infinite, …","Returns true if the tensor requires gradients during the …","","","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","","","","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","","","","","Iterate over slices of tensors alongside a given dimension.","","","","","","","","","","","","","","","","","","Applies element wise natural log operation <em>ln</em>.","","","","","Applies the natural logarithm of one plus the input …","","","","","The loss module.","Element-wise less than comparison between two tensors.","Applies element wise lower comparison and returns a …","","","Element-wise less than comparison between a tensor and a …","Applies element wise lower comparison and returns a …","","","Element-wise less than or equal comparison between two …","Applies element wise lower-equal comparison and returns a …","","","Element-wise less than or equal comparison between a …","Applies element wise lower-equal comparison and returns a …","","","","","Macro to implement the element trait for a type.","Map the current reader to another type.","","","","Fills elements of a tensor based on a boolean mask.","Update the given tensor with the value where the mask is …","","","Selects elements from a tensor based on a boolean mask.","Update the given tensor with the value tensor where the …","","","Applies the matrix multiplication operation.","Applies the matrix multiplication operation.","Gets the maximum elements of a tensor along an axis.","Returns the maximum of the two numbers.","","","","","","","Returns the maximum of the two numbers.","Find the maximum value.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","","","","","","","","","","","Computes the mean of all the elements of the tensor.","Aggregate all elements in the tensor with the mean …","","","Computes the mean of all the elements of the tensor along …","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Gets the minimum elements of a tensor along an axis.","","","","Returns the minimum of the two numbers.","","","","Returns the minimum of the two numbers.","Find the minimum value.","","","Gets the minimum elements of a tensor along an axis.","Find the minimum value along the given dimension.","","","Gets the minimum elements and indices of a tensor along an …","Find the minimum value along the given dimension.","","","","","","","","","","","","","","","","","","","The burn module.","Multiplies two tensors.","","","","","","","","","Applies element wise multiplication operation.","","","","","Applies element wise multiplication operation.","","","","","","","","","Multiplies a tensor by a scalar element-wise.","Applies element wise multiplication operation with a …","","","The name of the tensor kind.","","","","","","","","Negates a tensor.","","","","","","Switch sign of each element in the tensor.","","","","","","","","","","","Constructs a new <code>Tensor</code>.","Constructs a new <code>DataSerialize</code>.","Constructs a new <code>Data</code>.","Constructs a new <code>DistributionSampler</code>.","Constructs a new <code>Shape</code>.","","Returns the total number of elements of a tensor having …","","","Create a one hot tensor.","Creates a tensor filled with ones.","Create a tensor of the given shape where each element is …","","","Populates the data with ones.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Operations on tensors module.","","","","","","","Applies element wise power operation.","","","","","","","Returns the precision of the element.","","","","","","","Returns a random value for the given distribution.","","","Create a random tensor of the given shape where each …","Populates the data with random values.","Create a random named tensor of the given shape where each …","Create a random tensor of the given shape on the given …","Returns a new tensor with the same shape and device as the …","Read the data.","Read the data only if sync, returns None if an async …","","","","","","","Applies element wise reciprocal operation.","","","","","","","","","","","","","Repeat the tensor along the given dimension.","Repeat the tensor along the given dimension.","","","","Mark the tensor to keep gradients during the backward pass.","Reshapes the tensor.","Reshape the tensor to have the given shape.","","","","Reshape the tensor to have the given shape.","","","","","","","Sames a random value from the distribution.","Creates a new distribution sampler.","Scatters elements into a tensor along an axis.","Assign the gathered elements corresponding to the given …","","","Select tensor elements along the given dimension …","Select the tensor elements along the given dimension …","","","Assign the selected elements along the given dimension …","Assign the selected elements along the given dimension …","","","","","","Serializes the data.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a string.","Alternate serialize adapter for serializing as a string.","Set print options","Mark the tensor as tracked or untracked depending on the …","Returns the shape of the tensor.","Returns the shape of the current tensor.","","","","Returns the shape of the current tensor.","The shape of the tensor.","The shape of the tensor.","","Returns a number that represents the sign of <code>self</code>.","","","","Returns a number that represents the sign of <code>self</code>.","","","","","","","Applies element wise sine operation.","","","","","","","","","Select tensor elements corresponding for the given ranges.","Returns a tensor containing the elements selected from the …","","","","Assigns the given value to the tensor elements …","Returns a copy of the current tensor with the selected …","","","","","","","","Applies element wise root square operation.","Squeeze the tensor along the given dimension, removing the …","Subtracts two tensors.","","","","","","","","","","","Applies element wise subtraction operation.","","","","","","","Subtracts a scalar from a tensor element-wise.","Applies element wise subtraction operation with a scalar.","","","Sums all the elements of the tensor.","","","","","Aggregate all elements in the tensor with the sum …","","","Sums all the elements of the tensor along a dimension.","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Swaps two dimensions of a tensor.","Swaps two dimensions of a tensor.","","","","Swap two dimensions.","","","","","","","","","Applies element wise hyperbolic tangent operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of elements to start summarizing tensor","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Converts a <code>bf16</code> into the underlying bit representation.","Converts a <code>f16</code> into the underlying bit representation.","Returns the data of the current tensor without taking …","","","","","","","Moves the tensor to the given device.","","","Returns a new tensor on the given device.","","","","","","","Converts a <code>bf16</code> value into an <code>f32</code> value.","","Converts a <code>f16</code> value into a <code>f32</code> value.","","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f32</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","","","Converts a <code>f16</code> value into a <code>f64</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","Converts a <code>f16</code> value into a <code>f64</code> value.","Returns a tensor with full precision based on the selected …","","","","","","","","","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","","","","","","","","","","","","","","","","","","","Converts the dimension to a string.","Converts the named dimensions to a string.","","","","","","","","","","","","","","","Returns the ordering between <code>self</code> and <code>other</code>.","Returns the ordering between <code>self</code> and <code>other</code>.","Transposes a tensor.","Transpose the tensor.","","","","Convert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsqueeze the current tensor. Create new dimensions to fit …","Creates a new tensor with a dimension of size one inserted …","","","","","","","","","","","","","","","","","","","","","","","The values of the tensor.","The values of the tensor.","Calculate the variance along the given dimension.","Calculate the variance along the given dimension without …","Calculate the variance along the given dimension and also …","Calculate the variance along the given dimension without …","","","","","","","","","","","","","","","","","","","","","","","","Creates a tensor filled with zeros.","Create a tensor of the given shape where each element is …","","","Populates the data with zeros.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Applies the Gaussian Error Linear Units function as …","Applies the log sigmoid function.","Applies the log softmax function on the input tensor along …","Applies the rectified linear unit function.","Applies the sigmoid function.","Applies the silu function","Applies the softmax function on the input tensor along the …","Applies the tanh function","Trait that allows a backend to support autodiff.","This trait defines all types and functions needed for a …","Tensor primitive to be used for all bool operations.","Device type.","Float element type.","Pointer to another backend that have a full precision …","Full precision float element type.","Gradients type.","The inner backend type.","Int element type.","Tensor primitive to be used for all int operations.","Tensor primitive to be used for all float operations.","If autodiff is enabled.","Backward pass.","Converts the inner backend tensor to the autodiff backend …","Returns the tensor with inner backend type.","Converts the inner backend tensor to the autodiff backend …","Returns the gradients of a tensor.","Pops the gradients of a tensor and returns them.","Replace the gradients of a tensor with the one provided.","Returns the tensor with inner backend type.","Converts the inner backend tensor to the autodiff backend …","Returns the tensor with inner backend type.","Name of the backend.","Seed the backend.","Sync the backend, ensure that all computation are finished.","Contains tensor of arbitrary dimension.","","","","","","","","","","Returns the argument unchanged.","Get a tensor with the given ID.","","Calls <code>U::from(self)</code>.","If any tensor is contained.","The number of tensors registered.","Create an empty container.","Register a new tensor for the given ID.","Remove a tensor for the given ID and returns it.","","","","","","Computes the log softmax cross entropy between logits and …","Applies a 1D adaptive avg pooling.","Applies a 2D adaptive avg pooling.","Applies a 1D avg pooling.","Applies a 2D avg pooling.","Applies a 1D convolution.","Applies a 2D convolution.","Applies a 1D transposed convolution.","Applies a 2D transposed convolution.","Applies the embedding module.","Applies a 1D max pooling.","Applies a 1D max pooling.","Applies a 2D max pooling.","Applies a 2D max pooling with indices.","Applies a 4D to 3D unfold.","Activation function operations.","Boolean tensor primitive type used by the backend.","Bool Tensor API for basic operations, see tensor for …","Gradient computed during the backward pass for each tensor …","Gradient computed during the backward pass for each tensor …","Convolution options.","Transposed convolution options.","Device type used by the backend.","Float element type used by backend.","Float tensor primitive type used by the backend.","Full precision float element type used by the backend.","Integer element type used by backend.","Integer tensor primitive type used by the backend.","Int Tensor API for basic and numeric operations, see tensor","Gradient computed during the backward pass for each tensor …","Results from max_pool1d.","Gradient computed during the backward pass for each tensor …","Results from max_pool2d.","Module operations trait.","Operations on float tensors.","Unfold operation options.","Returns a new tensor with absolute values.","","","","","","","","","","One dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 1d operation.","Two dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 2d operation.","Adds two tensors together.","Adds a scalar to a tensor.","Creates a new tensor with values from the given range.","Creates a new tensor with values from the given range with …","Gets the indices of the maximum elements of a tensor along …","Gets the indices of the minimum elements of a tensor along …","One dimensional avg pooling.","Backward pass for the avg pooling 1d operation.","Two dimensional avg pooling.","Backward pass for the avg pooling 2d operation.","Bias gradient.","Bias gradient.","Concatenates the tensors along the given dimension.","Gets the device of the tensor.","Creates a new bool tensor.","Equates the two tensors.","Creates a tensor from the data structure.","Converts the tensor to a data structure.","Converts bool tensor to float tensor.","Converts bool tensor to int tensor.","Inverses boolean values.","Repeats one dimension of the tensor a given number of …","Reshapes the tensor.","Returns the shape of the tensor.","Gets the values from the tensor for the given ranges.","Sets the values in the tensor for the given ranges.","Swaps two dimensions of a bool tensor.","Gets the data from the tensor.","Moves the tensor to the device.","Transposes a bool tensor.","","","","","","","","","","","","","","","","","","","Catcatenates tensors along a dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","","","","","","","Module with convolution operations.","One dimensional convolution.","Backward pass for the conv1d operation.","Two dimensional convolution.","Backward pass for the conv2d operation.","One dimensional transposed convolution.","Backward pass for the conv transpose 1d operation.","Two dimensional transposed convolution.","Backward pass for the conv transpose 2d operation.","Returns a new tensor with cosine values.","","","","","","","","","","","","","","","","","","","Detaches a tensor from the computation graph.","Gets the device of the tensor.","Dilation.","Dilation.","The spacing between the blocks (patches) in the original …","Divides two tensors element-wise.","Divides a tensor by a scalar.","","","","","","","","","","","","","","","","","","","Embedding operation.","Embedding backward operation.","Creates an empty tensor with the given shape.","Equal comparison of two tensors.","Equal comparison of a tensor and a scalar.","Returns a new tensor with the error function values.","Returns a new tensor with exponential values.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new tensor from the data structure.","Converts a tensor from full precision.","Creates a tensor filled with given value.","Gather elements from a tensor.","Applies the Gelu activation function.","Applies the Gelu activation function backward.","Greater than comparison of two tensors.","Greater than comparison of a tensor and a scalar.","Greater than or equal comparison of two tensors.","Greater than or equal comparison of a tensor and a scalar.","Groups.","Groups.","","","The indices tensor.","The indices tensor.","","","","","","","","","","Returns a new tensor with absolute values.","Elementwise addition.","Elementwise addition with a scalar.","Gets the indices of the maximum elements along a dimension.","Gets the indices of the minimum elements along a dimension.","Concatenates the given tensors along the given dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","Gets the device of the tensor.","Elementwise division.","Elementwise division with a scalar.","Creates a new int tensor.","Elementwise equality comparison.","Elementwise equality comparison with a scalar.","Creates a tensor from the data structure.","Creates a tensor filled with given value.","Gather elements from the tensor at the given indices.","Elementwise greater than comparison.","Elementwise greater than comparison with a scalar.","Elementwise greater than or equal comparison.","Elementwise greater than or equal comparison with a scalar.","Converts the tensor to a data structure.","Converts int tensor to float tensor.","Elementwise less than comparison.","Elementwise less than comparison with a scalar.","Elementwise less than or equal comparison.","Elementwise less than or equal comparison with a scalar.","Fills the tensor with the given value if the mask is true …","Fills the tensor with values from the source tensor if the …","Gets the maximum element in the tensor.","Gets the maximum element in the tensor along a dimension.","Gets the maximum elements and corresponding indices along …","Computes the mean of all elements in the tensor.","Computes the mean of all elements in the tensor along a …","Gets the minimum element in the tensor.","Gets the minimum elements in the tensor along a dimension.","Gets the minimum elements and corresponding indices along …","Elementwise multiplication.","Elementwise multiplication with a scalar.","Elementwise negation.","Creates a tensor of ones.","Repeats the tensor along the given dimension the given …","Reshapes the tensor.","Scatter a given value to the tensor at the given indices.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Returns the shape of the tensor.","Gets the element at the given indices.","Sets the element at the given indices.","Elementwise subtraction.","Elementwise subtraction with a scalar.","Sums all elements in the tensor.","Sums all elements in the tensor along a dimension.","Swaps two dimensions of an int tensor.","Gets the data from the tensor.","Moves the tensor to the given device.","Transposes an int tensor.","Creates a tensor of zeros.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the tensor to a data structure.","Converts float tensor to int tensor.","Returns the <code>require_grad</code> flag of a tensor.","Returns a new tensor with natural logarithm values.","Returns a new tensor with logarithm values of (1 + Xi).","Less than comparison of two tensors.","Less than comparison of a tensor and a scalar.","Less than or equal comparison of two tensors.","Less than or equal comparison of a tensor and a scalar.","Update the given tensor with the value where the mask is …","Update the given tensor with the value tensor where the …","Multiplies two tensors together using matrix …","Gets the maximum element of a tensor.","Gets the maximum elements of a tensor along an axis.","Gets the maximum elements of a tensor along an axis and …","One dimensional max pooling.","One dimensional max pooling with indices.","Backward pass for the max pooling 1d operation.","Two dimensional max pooling.","Two dimensional max pooling with indices.","Backward pass for the max pooling 2d operation.","Mean of all elements in a tensor.","Mean of all elements in a tensor along a dimension.","Gets the minimum element of a tensor.","Gets the minimum elements of a tensor along an axis.","Gets the minimum elements of a tensor along an axis and …","Multiplies two tensors together element-wise.","Multiplies a tensor by a scalar.","Negates a tensor element-wise.","Constructs a new <code>Conv2dBackward</code>.","Constructs a new <code>MaxPool1dBackward</code>.","Constructs a new <code>MaxPool1dWithIndices</code>.","Constructs a new <code>MaxPool2dBackward</code>.","Constructs a new <code>MaxPool2dWithIndices</code>.","Constructs a new <code>Conv1dBackward</code>.","Constructs a new <code>ConvOptions</code>.","Constructs a new <code>ConvTransposeOptions</code>.","Constructs a new <code>UnfoldOptions</code>.","Creates a new tensor with ones.","The output tensor.","The output tensor.","Padding.","Padding.","The number of zero-padding pixels added to each side of …","Padding out.","Module with pooling operations.","Returns a new tensor with values raised to the power of …","Creates a new tensor with random values.","Calculates the reciprocals elementwise","Applies the ReLU activation function.","Applies the ReLU activation function backward.","Repeat the tensor along the given dimension.","Reshapes a tensor.","Scatter elements into a tensor.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Sets the <code>require_grad</code> flag of a tensor.","Gets the shape of the tensor.","Returns a new tensor with sine values.","Select tensor elements corresponding for the given ranges.","Assign the selected elements corresponding for the given …","Returns a new tensor with square root values.","Stride.","Stride.","The number of positions to slide over the input tensor in …","Subtracts two tensors.","Subtracts a scalar from a tensor.","Sum of all elements in a tensor.","Sum of all elements in a tensor along a dimension.","Swaps two dimensions of a tensor.","Returns a new tensor with tangent values.","Converts the tensor to a data structure.","Moves the tensor to the given device.","Converts a tensor to full precision.","","","","Transposes a tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Four-dimensional unfolding.","","","","","","","","","","","","","","","","","","","Weights gradient.","Weights gradient.","Gradient.","Gradient.","Gradient.","Gradient.","Creates a new tensor with zeros.","Calculate the expected output size when doing a …","Calculate the expected padding size required when applying …","Calculate the expected output size when doing a transposed …","Calculate the expected output size when doing a pooling …","Simple classification output adapted for multiple metrics.","A strategy that checks if the training should be stopped.","Learner struct encapsulating all components necessary to …","Struct to configure and create a learner.","An early stopping strategy based on a metrics collected …","Multi devices train step.","When no improvement has happened since the given number of …","Simple regression output adapted for multiple metrics.","The condition that early stopping strategies should follow.","A training epoch.","A training output.","Trait to be implemented for training models.","A handle that allows aborting the training process early.","A validation epoch.","Trait to be implemented for validating models.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create the learner from a model and an optimizer. The …","The checkpoint module.","The epoch from which the training must resume.","","","","","","","","","","","","","","","","","","","","","","","","Run the training loop on multiple devices.","","","","","","","","","","","","","","","","","","","","","Register an early stopping strategy to stop the training …","Fits the model.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The gradients.","Enable gradients accumulation.","","","","","","","","","","","Provides a handle that can be used to interrupt training.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The item.","By default, Rust logs are captured and written into …","The logger module.","The loss.","The loss.","The metric module.","Replace the default metric loggers with the provided ones.","Register a training metric.","Register a numeric training metric.","Register a validation metric.","Register a numeric validation metric.","Creates a new learner builder.","Create a new early stopping strategy based on a metrics …","Creates a new training output.","Create a new instance.","Constructs a new <code>ClassificationOutput</code>.","Constructs a new <code>ValidEpoch</code>.","Constructs a new <code>TrainEpoch</code>.","Constructs a new <code>RegressionOutput</code>.","The number of epochs the training should last.","Optimize the current module with the provided gradients …","The output.","The output.","Renderer modules to display metrics and training …","Replace the default CLI renderer with a custom one.","Runs the validation epoch.","Runs the training epoch.","Runs the training epoch on multiple devices.","Update its current state and returns if the training …","","True if .stop() has been called.","Runs the training step, which executes the forward and …","Runs a validation step.","Notify the learner that it should stop.","The targets.","The targets.","","The trainer module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the checkpointing_strategy.","Register a checkpointer that will save the optimizer, the …","The number of epochs allowed to worsen before it gets …","Async checkpointer.","The trait for checkpointer.","The error type for checkpointer.","Action to be taken by a checkpointer.","Define when checkpoint should be saved and deleted.","Compose multiple checkpointing strategy and only delete …","Help building a checkpointing strategy by combining …","Delete the given epoch.","The file checkpointer.","IO error.","Keep the last N checkpoints.","Keep the best checkpoint based on a metric.","Recorder error.","Save the current record.","Other errors.","","","","","","","","","Add a new checkpointing strategy.","","","","","","","","","","","","","","","","","Create a new composed checkpointing strategy.","Create a new builder which help compose multiple …","Based on the epoch, determine if the checkpoint should be …","","","","","","","Delete the record at the given epoch if present.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new async checkpointer.","Creates a new file checkpointer.","Create a new metric strategy.","Constructs a new <code>KeepLastNCheckpoints</code>.","Restore the record.","","","Save the record.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Async logger.","File logger.","The file metric logger.","In memory logger.","In memory metric logger, useful when testing and debugging.","The logger trait.","The logger type.","The logger backend trait.","Metric logger.","","","","","","","","","","","","","","","","Create a new logger.","","","","","","","","","","","","","","","","","","","","","","","","Logs an epoch.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Logs an item.","Logs an item.","","","","","","Create a new async logger.","Create a new file logger.","Create a new file metric logger.","Create a new in-memory metric logger.","Read the logs for an epoch.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The accuracy metric input type.","The accuracy metric.","Adaptor are used to transform types so that they can be …","Track basic cuda infos.","Memory information","CPU Temperature in celsius degrees","General CPU Usage metric","The input type of the metric.","Track the learning rate across iterations.","The loss metric input type.","The loss metric.","Metric trait.","Data type that contains the current state of a metric at a …","Metric metadata that can be used when computing metrics.","The name of the metric.","Declare a metric to be numeric.","Adapt the type to be passed to a metric.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clear the metric state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current epoch.","The total number of epochs.","","Format a float with the given precision. Will use …","The string to be displayed.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The current iteration.","The current learning rate.","The name of the metric.","Creates a new CPU temp metric","Creates a new CPU metric","Creates a new metric for CUDA.","Creates a new learning rate metric.","Creates a new memory metric","Creates the metric.","Constructs a new <code>AccuracyInput</code>.","Constructs a new <code>MetricEntry</code>.","Create the metric.","Constructs a new <code>LossInput</code>.","The current progress.","The string to be saved.","State module.","Module responsible to save and exposes data collected …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the metric state and returns the current metric …","","","","","","","","Returns the numeric value of the metric.","","","","","","","","","","","","","","","","","","Sets the pad token.","Formatting options for the numeric metric state.","Useful utility to implement numeric metrics.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new numeric metric state.","Create the formatting options with a name.","Specify the floating point precision.","Reset the state.","","","","","","","Specify the metric unit.","","","Update the state.","","","","How to aggregate the metric.","The direction of the query.","Signal the end of an epoch.","Event happening during the training/validation process.","Defines how training and validation events are collected …","Type that allows to communicate with an event store.","Higher is better.","Lower is better.","Compute the average.","Contains all metric information.","Signal that metrics have been updated.","The split to use.","The training split.","The validation split.","","","","","","","Collect a training/validation event.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metrics information related to non-numeric metrics.","Metrics information related to numeric metrics.","","","","","Find the epoch following the given criteria from the …","Find the epoch following the given criteria from the …","Find the metric value for the current epoch following the …","Find the metric value for the current epoch following the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>MetricsUpdate</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A generic metric.","The state of a metric.","Trait for rendering metrics.","A numeric metric.","The terminal UI metrics renderer.","Training progress.","","","","","","","","","","","","","","","","","","","","","","","The epoch.","The total number of epochs.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The iteration.","Create a new terminal UI renderer.","Creates a new empty training progress.","The progress.","Renders the training progress.","","Renders the validation progress.","","","","","","","","","","","","","","Updates the training metric state.","","Updates the validation metric state.","","","","","Multi devices train step.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new multi devices train step.","Collect outputs from workers for one step.","","","","",""],"if":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[1,[-1]],7],[[1,[-1]]],2],[[[8,[-1]],7],[[8,[-1]]],9],[7],[[]],[[[1,[-1]],[10,[7]]],[[1,[-1]]],2],[[[3,[-1]],[10,[7]]],[[3,[-1]]],4],[[[8,[-1]],[10,[7]]],[[8,[-1]]],9],[[[10,[7]]]],[[[10,[7]]]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[[8,[-1]],[8,[-1]]],[],9],[[]],[[]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[-1]]],2],[[[3,[-1]],-1],[[3,[-1]]],4],[[]],[[]],[[]],[[[11,[7]],12],[[1,[13]]]],[[[11,[7]]]],[[[1,[-1]],7],[[1,[13]]],2],[[[3,[-1]],7],[[3,[13]]],4],[7],[7],[7],[[[1,[-1]],7],[[1,[13]]],2],[[[3,[-1]],7],[[3,[13]]],4],[7],[7],[7],[[[1,[-1]],7,7,7,5],[[1,[-1]]],2],[[[8,[-1]],7,7,7,5],[[8,[-1]]],9],[[7,7,7,5]],[[7,7,7,5]],[[[1,[-1]],[10,[7]],[10,[7]],[10,[7]],5],[[1,[-1]]],2],[[[3,[-1]],[10,[7]],[10,[7]],[10,[7]],5],[[3,[-1]]],4],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],5],[[8,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],5]],[[[10,[7]],[10,[7]],[10,[7]],5]],[[[1,[-1]],[1,[-1]],[10,[7]],[10,[7]],[10,[7]],5],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]],[10,[7]],[10,[7]],[10,[7]],5],[[3,[-1]]],4],[[[8,[-1]],[8,[-1]],[10,[7]],[10,[7]],[10,[7]],5],[[8,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],5]],[[[10,[7]],[10,[7]],[10,[7]],5]],[[[8,[-1]]],14,9],[[[16,[[1,[5]],15]],7],[[1,[5]]]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[[1,[5]]],12],[[]],[[]],[[]],[[]],[17,[[1,[5]]]],[17],[17],[17],[17],[[[1,[5]],[1,[5]]],[[1,[5]]]],[[]],[[]],[[]],[[]],[[[18,[5]],12],[[1,[5]]]],[[[18,[5]],19],[[3,[5]]]],[[[18,[5]]]],[[[18,[5]]]],[[[18,[5]]]],[[]],[[]],[[[1,[5]]],[[20,[[18,[5]]]]]],[[],[[20,[[18,[5]]]]]],[[],[[20,[[18,[5]]]]]],[[],[[20,[[18,[5]]]]]],[[],[[20,[[18,[5]]]]]],[[[1,[5]]],[[1,[-1]]],2],[[]],[[]],[[]],[[]],[[[1,[5]]],[[1,[13]]]],[[],[[3,[13]]]],[[]],[[]],[[]],[[[1,[5]]],[[1,[5]]]],[[]],[[]],[[]],[[]],[[[1,[5]],7,7],[[1,[5]]]],[[[1,[5]],17],[[1,[5]]]],[[[3,[5]],17],[[3,[5]]]],[17],[17],[17],[[[1,[5]]],17],[[],17],[[],17],[[],17],[[],17],[[[1,[5]],[10,[[11,[7]]]]],[[1,[5]]]],[[[3,[5]],[10,[[11,[7]]]]],[[3,[5]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[1,[5]],[10,[[11,[7]]]],[1,[5]]],[[1,[5]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[17],[[]],[[],[[20,[[18,[5]]]]]],[[[1,[5]],12],[[1,[5]]]],[[[3,[5]],19],[[3,[5]]]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[[1,[-1]],15]],7],[[1,[-1]]],2],[[[16,[[3,[-1]],15]],7],[[3,[-1]]],4],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[]],[[[3,[-1]],-1,-1],[[3,[-1]]],4],[[]],[[]],[[]],[[[3,[-1]],-1],[[3,[-1]]],4],[[]],[[]],[[[1,[-1]],-1],[],2],[[[3,[-1]],-1],[[3,[-1]]],4],[[]],[[]],[[[21,[-1]]],[[21,[-1]]],22],[[[23,[-1]]],[[23,[-1]]],22],[[[24,[-1]]],[[24,[-1]]],22],[[[25,[-1]]],[[25,[-1]]],22],[[[26,[-1,-2,-3]]],[[26,[-1,-2,-3]]],[22,27],[22,28],[22,29]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[1,[-1]],[1,[-1]],[30,[[1,[-1]]]],31],[[1,[-1]]],2],[[[8,[-1]],[8,[-1]],[30,[[8,[-1]]]],31],[[8,[-1]]],9],[[30,31]],[[[1,[-1]],[1,[-1]],[30,[[1,[-1]]]],31],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]],[30,[[3,[-1]]]],31],[[3,[-1]]],4],[[[8,[-1]],[8,[-1]],[30,[[8,[-1]]]],31],[[8,[-1]]],9],[[30,31]],[[30,31]],[[[1,[-1]],[1,[-1]],[30,[[1,[-1]]]],32],[[1,[-1]]],2],[[[8,[-1]],[8,[-1]],[30,[[8,[-1]]]],32],[[8,[-1]]],9],[[30,32]],[[[1,[-1]],[1,[-1]],[30,[[1,[-1]]]],32],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]],[30,[[3,[-1]]]],32],[[3,[-1]]],4],[[[8,[-1]],[8,[-1]],[30,[[8,[-1]]]],32],[[8,[-1]]],9],[[30,32]],[[30,32]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[],[[21,[-1]]],33],[[],[[23,[-1]]],33],[[],[[24,[-1]]],33],[[],[[25,[-1]]],33],[[],[[26,[-1,-2,-3]]],[33,27],[33,28],[33,29]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[[1,[-1]]],12,2],[[[3,[-1]]],19,4],[[]],[[]],[[]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[-1]]],2],[[[3,[-1]],-1],[[3,[-1]]],4],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[[[1,[-1]],[1,[13]]],[[1,[-1]]],2],[[[8,[-1]]],[[8,[-1]]],9],[[[1,[-1]],[1,[-1]],[1,[13]]],[[1,[-1]]],2],[[[8,[-1]],[8,[-1]]],[[8,[-1]]],9],[17],[17,[[3,[-1]]],4],[17],[17],[17],[[[1,[-1]],[1,[-1]]],[[1,[5]]],2],[[[3,[-1]],[3,[-1]]],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[5]]],2],[[[3,[-1]],-1],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[17],[[]],[[[21,[-1]],34],[[36,[6,35]]],37],[[[23,[-1]],34],[[36,[6,35]]],37],[[[24,[-1]],34],[[36,[6,35]]],37],[[[25,[-1]],34],[[36,[6,35]]],37],[[[26,[-1,-2,-3]],34],[[36,[6,35]]],[37,27],[37,28],[37,29]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[18,[-1]],12],[[1,[-1]]],2],[[[18,[-1]],19],[[3,[-1]]],4],[18],[18],[18],[[[1,[38]]],[[1,[-1]]],2],[[[3,[38]]],[[3,[-1]]],4],[[]],[[]],[[]],[[],[[8,[-1]]],9],[17],[[17,39]],[[7,[1,[-1]],[1,[13]]],[[1,[-1]]],2],[[7,[3,[-1]],[3,[13]]],[[3,[-1]]],4],[7],[7],[7],[[[1,[-1]]],[[1,[-1]]],2],[[]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[8,[-1]],14],30,9],[[[8,[-1]],14],30,9],[[[8,[-1]]],6,9],[[[1,[-1]],[1,[-1]]],[[1,[5]]],2],[[[3,[-1]],[3,[-1]]],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[5]]],2],[[[3,[-1]],-1],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],[1,[-1]]],[[1,[5]]],2],[[[3,[-1]],[3,[-1]]],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[5]]],2],[[[3,[-1]],-1],[[3,[5]]],4],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[[8,[-1]]],[],9],[[[1,[13]]],[[1,[13]]]],[[[3,[13]]],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],[1,[13]]],[[1,[13]]]],[[[3,[13]],[3,[13]]],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[13]]]],[[[3,[13]],13],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],7],[[1,[13]]]],[[[3,[13]],7],[[3,[13]]]],[7],[7],[7],[[[1,[13]],7],[[1,[13]]]],[[[3,[13]],7],[[3,[13]]]],[7],[7],[7],[[[16,[[1,[13]],15]],7],[[1,[13]]]],[[[16,[[3,[13]],15]],7],[[3,[13]]]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[[1,[13]],13,13],[[1,[13]]]],[[[3,[13]],13,13],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[13]]]],[[[3,[13]],13],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[13]]]],[[[3,[13]],13],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]]],12],[[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],[1,[13]]],[[1,[13]]]],[[[3,[13]],[3,[13]]],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[13]]]],[[[3,[13]],13],[[3,[13]]]],[[]],[[]],[[]],[17,[[1,[13]]]],[17,[[3,[13]]]],[17],[17],[17],[[[1,[13]],[1,[13]]],[[1,[5]]]],[[[3,[13]],[3,[13]]],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[5]]]],[[[3,[13]],13],[[3,[5]]]],[[]],[[]],[[]],[[[18,[13]],12],[[1,[13]]]],[[[18,[13]],19],[[3,[13]]]],[18],[18],[[[18,[-1]]],[],29],[[]],[[17,13],[[1,[13]]]],[[17,13],[[3,[13]]]],[17],[[7,[1,[13]],[1,[13]]],[[1,[13]]]],[[7,[3,[13]],[3,[13]]],[[3,[13]]]],[7],[7],[7],[[[1,[13]],[1,[13]]],[[1,[5]]]],[[[3,[13]],[3,[13]]],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[5]]]],[[[3,[13]],13],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],[1,[13]]],[[1,[5]]]],[[[3,[13]],[3,[13]]],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[5]]]],[[[3,[13]],13],[[3,[5]]]],[[]],[[]],[[]],[[]],[[[1,[13]]],[[20,[[18,[13]]]]]],[[[3,[13]]],[[20,[[18,[13]]]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[[],[[20,[[18,[-1]]]]],29],[[[1,[13]]],[[1,[-1]]],2],[[]],[[]],[[]],[[]],[[[1,[13]],[1,[13]]],[[1,[5]]]],[[[3,[13]],[3,[13]]],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[5]]]],[[[3,[13]],13],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],[1,[13]]],[[1,[5]]]],[[[3,[13]],[3,[13]]],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[5]]]],[[[3,[13]],13],[[3,[5]]]],[[]],[[]],[[]],[[[1,[13]],[1,[5]],13],[[1,[13]]]],[[[3,[13]],[3,[5]],13],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],[1,[5]],[1,[13]]],[[1,[13]]]],[[[3,[13]],[3,[5]],[3,[13]]],[[3,[13]]]],[[]],[[]],[[]],[[]],[[]],[[[1,[13]],7],[[1,[13]]]],[7],[7],[[[1,[13]],7],[[6,[[1,[13]],[1,[13]]]]]],[7,6],[7,6],[[[1,[13]]],[[1,[13]]]],[[[3,[13]]],[[3,[13]]]],[[]],[[]],[[[1,[13]],7],[[1,[13]]]],[[[3,[13]],7],[[3,[13]]]],[7],[7],[7],[[]],[[]],[[[1,[13]],7],[[1,[13]]]],[7],[7],[[[1,[13]],7],[[6,[[1,[13]],[1,[13]]]]]],[7,6],[7,6],[[[1,[13]],[1,[13]]],[[1,[13]]]],[[[3,[13]],[3,[13]]],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[13]]]],[[[3,[13]],13],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]]],[[1,[13]]]],[[[3,[13]]],[[3,[13]]]],[[]],[17,[[1,[13]]]],[17,[[3,[13]]]],[17],[17],[17],[[[1,[13]],7,7],[[1,[13]]]],[[7,7]],[[[1,[13]],17],[[1,[13]]]],[[[3,[13]],17],[[3,[13]]]],[17],[17],[17],[[7,[1,[13]],[1,[13]],[1,[13]]],[[1,[13]]]],[[7,[3,[13]],[3,[13]],[3,[13]]],[[3,[13]]]],[7],[7],[7],[[[1,[13]],7,[1,[13]]],[[1,[13]]]],[[[3,[13]],7,[3,[13]]],[[3,[13]]]],[7],[7],[7],[[[1,[13]],7,[1,[13]],[1,[13]]],[[1,[13]]]],[[[3,[13]],7,[3,[13]],[3,[13]]],[[3,[13]]]],[7],[7],[7],[[[1,[13]]],17],[[[3,[13]]],17],[[],17],[[],17],[[],17],[[[1,[13]],[10,[[11,[7]]]]],[[1,[13]]]],[[[3,[13]],[10,[[11,[7]]]]],[[3,[13]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[1,[13]],[10,[[11,[7]]]],[1,[13]]],[[1,[13]]]],[[[3,[13]],[10,[[11,[7]]]],[3,[13]]],[[3,[13]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[1,[13]],[1,[13]]],[[1,[13]]]],[[[3,[13]],[3,[13]]],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],13],[[1,[13]]]],[[[3,[13]],13],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]]],[[1,[13]]]],[[[3,[13]]],[[3,[13]]]],[[]],[[]],[[]],[[[1,[13]],7],[[1,[13]]]],[[[3,[13]],7],[[3,[13]]]],[7],[7],[7],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[17],[[]],[[],[[20,[18]]]],[[[1,[13]],12],[[1,[13]]]],[[[3,[13]],19],[[3,[13]]]],[[]],[[]],[[]],[17,[[1,[13]]]],[17,[[3,[13]]]],[17],[17],[17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[20,[18]]]],[[[3,[-1]]],[[20,[18]]],4],[[],[[20,[18]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[[[1,[-1]]],[[1,[13]]],2],[[]],[[]],[[]],[[]],[[],5],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],[1,[-1]]],[[1,[5]]],2],[[[3,[-1]],[3,[-1]]],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[5]]],2],[[[3,[-1]],-1],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],[1,[-1]]],[[1,[5]]],2],[[[3,[-1]],[3,[-1]]],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[5]]],2],[[[3,[-1]],-1],[[3,[5]]],4],[[]],[[]],[[]],[[[1,[-1]],[1,[5]],-1],[[1,[-1]]],2],[[[3,[-1]],[3,[5]],-1],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],[1,[5]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],[3,[5]],[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[]],[[[1,[-1]],7],[[1,[-1]]],2],[7],[7],[[[1,[-1]],7],[[6,[[1,[-1]],[1,[13]]]]],2],[7,6],[7,6],[[[1,[-1]],7,7,7,7],[[1,[-1]]],2],[[[8,[-1]],7,7,7,7],[[8,[-1]]],9],[[7,7,7,7]],[[[1,[-1]],7,7,7,7],[[40,[[21,[-1]]]]],2],[[[8,[-1]],7,7,7,7],[[40,[[24,[-1]]]]],9],[[7,7,7,7],[[40,[[25,[-1]]]]],41],[[[8,[-1]],7,7,7,7,[8,[-1]]],[[42,[[24,[-1]]]]],9],[[7,7,7,7],[[42,[[25,[-1]]]]],41],[[[1,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[1,[-1]]],2],[[[3,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[3,[-1]]],4],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[8,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]]],[[[1,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[43,[[21,[-1]]]]],2],[[[3,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[43,[[23,[-1]]]]],4],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[43,[[24,[-1]]]]],9],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[43,[[25,[-1]]]]],41],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[43,[[26,[-1,-2,-3]]]]],27,28,29],[[[1,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]],[1,[-1]],[1,[13]]],[[44,[[21,[-1]]]]],2],[[[3,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]],[3,[-1]],[3,[13]]],[[44,[[23,[-1]]]]],4],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]],[8,[-1]]],[[44,[[24,[-1]]]]],9],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[[25,[-1]]]]],41],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[[26,[-1,-2,-3]]]]],27,28,29],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[[1,[-1]],7],[[1,[-1]]],2],[[[3,[-1]],7],[[3,[-1]]],4],[7],[7],[7],[[]],[[[1,[-1]],7],[[1,[-1]]],2],[7],[7],[[[1,[-1]],7],[[6,[[1,[-1]],[1,[13]]]]],2],[7,6],[7,6],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[-1]]],2],[[[3,[-1]],-1],[[3,[-1]]],4],[[]],[[]],[[]],[[],45],[[],45],[[],45],[[],45],[[],45],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[17,12],[[1,[-1]]],2],[17],[17],[17],[39,[[16,[[47,[46,15]],15]]]],[[[1,[-1]],38],[[1,[-1]]],2],[[[3,[-1]],38],[[3,[-1]]],4],[38],[38],[38],[[17,48,12],[[1,[-1]]],2],[[17,48,19],[[3,[-1]]],4],[[17,48]],[[17,48]],[[17,48]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[[1,[-1]],7,7],[[1,[-1]]],2],[[[1,[-1]],17],[[1,[-1]]],2],[[[3,[-1]],17],[[3,[-1]]],4],[17],[17],[17],[[7,[1,[-1]],[1,[13]],[1,[-1]]],[[1,[-1]]],2],[[7,[3,[-1]],[3,[13]],[3,[-1]]],[[3,[-1]]],4],[7],[7],[7],[49,6],[49,6],[49,6],[49,6],[49,6],[[[1,[-1]],7,[1,[13]]],[[1,[-1]]],2],[[[3,[-1]],7,[3,[13]]],[[3,[-1]]],4],[7],[7],[7],[[[1,[-1]],7,[1,[13]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],7,[3,[13]],[3,[-1]]],[[3,[-1]]],4],[7],[7],[7],[5],[[],17],[[[3,[-1]]],17,4],[[],17],[[],17],[[],17],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],[10,[[11,[7]]]]],[[1,[-1]]],2],[[[3,[-1]],[10,[[11,[7]]]]],[[3,[-1]]],4],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[1,[-1]],[10,[[11,[7]]]],[1,[-1]]],[],2],[[[3,[-1]],[10,[[11,[7]]]],[3,[-1]]],[[3,[-1]]],4],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],-1],[[1,[-1]]],2],[[[3,[-1]],-1],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]],7],[[1,[-1]]],2],[[[3,[-1]],7],[[3,[-1]]],4],[7],[7],[7],[[[1,[-1]],7,7],[[1,[-1]]],2],[[[3,[-1]],7,7],[[3,[-1]]],4],[[7,7]],[[7,7]],[[7,7]],[[],6],[[],6],[[],6],[[],6],[[[1,[-1]]],[[1,[-1]]],2],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[]],[[]],[[],[[20,[18]]]],[[[1,[-1]],12],[[1,[-1]]],2],[[[3,[-1]],19],[[3,[-1]]],4],[[]],[[]],[[]],[[[1,[-1]]],[[1,[38]]],2],[[[3,[-1]]],[[3,[38]]],4],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,12],[[1,[-1]]],2],[17],[17],[17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[14,[52,[51,15]]]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[-1,-1,[]],[[14,[8,[-1]]],30,9],[[],7],[-1,-2,[],[]],[[[52,[51,15]]],14],[[14,[52,[51,15]]],6],[[14,[8,[-1]]],30,9],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[-1,53,14],6,[]],[[[10,[[30,[[52,[51,15]]]]]],[52,[51,15]],14,-1,-2],6,54,54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[17],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[[56,[-2,-1,-3,55]]],[[8,[-1]]],9,[[57,[-1]]],[22,58,59,37]],[[[56,[-2,-1,-3,60]],-3],[[8,[-1]]],9,[[57,[-1]]],[22,58,59,37]],[[[53,[-1]],34],[[36,[6,35]]],37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[[52,[51,15]]]],[10,[61]],62,-1],[[56,[-1,-2,-3,-4]]],[],[],[],[]],[[[10,[[30,[[52,[51,15]]]]]],[52,[51,15]],-1],[[53,[-1]]],[]],0,0,[[-1,[10,[[52,[51,15]]]],[10,[61]]],[[56,[-1,-2,63]]],[],[]],0,[[[56,[-2,-1,-3,63]]],[[64,[-2,-1,-3]]],9,[[57,[-1]]],[22,58,59,37]],[[[56,[-2,-1,6,63]]],[[8,[-1]]],9,[[57,[-1]]]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[[[10,[[30,[[52,[51,15]]]]]],[52,[51,15]],14,-1],6,54],[[[10,[[30,[[52,[51,15]]]]]],[52,[51,15]],14,-1],6,54],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[1,[-1]],[1,[-1]]],[],2],[[[1,[-1]],[1,[-1]],-2,-3,-4],[[1,[-5]]],65,66,66,66,65],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,12],[[[1,[-1]]],[[1,[-1]]],65],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],12],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[[17,12],[[1,[-1]]],[65,33,67,37]],[[12,12],5],[[[1,[-1]],[1,[-1]]],5,[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[12,34],[[36,[6,35]]]],[[[1,[-1]],34],[[36,[6,35]]],[37,65]],[17,68],[-1,-1,[]],[-1,-1,[]],[69,12],[-1,-1,[]],[[[18,[-1]],69],[[1,[-1]]],[65,33]],[[70,[72,[71,15]]],[[1,[-1]]],65],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]],-2],[[30,[[1,[-3]]]]],65,66,65],[70,[[1,[-1]]],65],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[[[1,[-1]],-2,-3],[[1,[-4]]],65,66,66,65],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,6,[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,19],[[[3,[-1]]],[[3,[-1]]],22],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],19],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[[19,19],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[19,34],[[36,[6,35]]]],[[[3,[-1]],34],[[36,[6,35]]],37],[-1,-1,[]],[-1,-1,[]],[[[18,[-1]]],[[3,[-1]]],[33,22]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[76,[[73,[-1]],[75,[74]]]]],[[3,[-1]]],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],[[],77],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[39,39],[78,78],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,0,0,[[],39],[[],78],[[],79],[[],80],[[],81],[[],82],[[],83],[[],84],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[39,39],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[39,34],[[36,[6,35]]]],[[78,34],[[36,[6,35]]]],[[79,34],[[36,[6,35]]]],[[80,34],[[36,[6,35]]]],[[81,34],[[36,[6,35]]]],[[82,34],[[36,[6,35]]]],[[83,34],[[36,[6,35]]]],[[84,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[39,-1],6,85],[39,86],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],0,0,0,0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[87,7],88],[89,90],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[91,91],[92,92],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[39,[[96,[[94,[[93,[87]]]],[95,[[94,[[93,[87]]]]]]]]]],[[[94,[-1]],[98,[97]]],[[99,[[94,[-1]]]]],[[100,[87]]]],[[87,101],6],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[[94,[-1]],7],[[99,[[94,[-1]]]]],[[100,[87]]]],[[92,92],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[94,[-1]],[98,[[99,[[94,[-1]]]]]]],6,[[100,[87]]]],[[87,34],[[36,[6,35]]]],[[91,34],[[36,[6,35]]]],[[[94,[-1]],34],[[36,[6,35]]],[37,[100,[87]]]],[[89,34],[[36,[6,35]]]],[[102,34],[[36,[6,35]]]],[[92,34],[[36,[6,35]]]],[[92,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[87,88]],[[92,-1],6,85],[-1,45,[]],[[[103,[-1]]],45,104],[[[105,[-1]]],45,106],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[39,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[52,[107,15]]],87],[[108,108,108],91],[[-1,91],[[103,[-1]]],[]],[91,[[105,[-1]]],[]],[[-1,[52,[107,15]],109,7],[[94,[-1]]],[[100,[87]]]],[[[52,[110,15]],102],89],[91,7],[89,49],[87,6],[[[94,[-1]],[99,[[94,[-1]]]]],[[20,[[16,[97,15]]]]],[[100,[87]]]],[39,[[6,[107,109,111]]]],[89,49],[-1,112,[]],[[[103,[-1]]],112,104],[[[105,[-1]]],112,106],[[[94,[-1]]],6,[[100,[87]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,91,[]],[[[103,[-1]]],91,104],[[[105,[-1]]],91,106],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[112,-1],112,[[113,[45]]]],[[[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[98,[[114,[-1]]]]],[[16,[108,15]]],115],[[[98,[[98,[7]]]],[98,[[98,[7]]]]],[[16,[108,15]]]],[[[114,[-1]]],[[114,[-2]]],115,115],[112,45],0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[112,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,45,[]],[[[116,[-1,-2,-3]]],45,106,115,115],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]]],[[114,[-1]]],115],[[[96,[[94,[[93,[87]]]],[95,[[94,[[93,[87]]]]]]]],[99,[[94,[[93,[87]]]]]],[98,[7]],[98,[7]],[98,[7]],[98,[7]],7],[[99,[[94,[[93,[87]]]]]]]],0,[[],117],[[7,7,7],[[116,[-1,-2,-3]]],106,115,115],[[],118],[[],119],[[],120],[-1,112,[[113,[45]]]],[[],121],[[],122],[[],123],[[],124],0,0,0,[[112,-1,-2],112,[[113,[45]]],[[113,[45]]]],[[],112],[-1,112,[]],[[],112],[[],112],[[[116,[-1,-2,-3]]],112,106,115,115],[[],112],[[],112],[[],112],[[],112],[[],112],[[],112],[[],112],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[[[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]],-1],[[114,[-1]]],115],[[[114,[-1]],-1],[[114,[-1]]],115],[[[114,[-1]],-1],[[114,[-1]]],115],[[[114,[-1]],-1],[[114,[-1]]],115],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[[],125],[[],126],[[],112],[[],112],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[127,[-1]]],[[16,[[47,[128,15]],15]]],[115,129]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,130],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[[130,130],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[47,[[127,[-1]],15]],7],[[47,[128,15]]],[115,129]],[[130,34],[[36,[6,35]]]],[[130,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[130,-1],6,85],[[],7],[[],7],[[],7],[[],7],[[[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[127,[-1]]],92,[115,129]],[[[114,[-1]],[114,[-1]]],[[114,[-1]]],[115,129]],[[[114,[-1]],[114,[-1]],[114,[-1]],7,7],[[114,[-1]]],115],[[[114,[-1]],[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]],[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]],[114,[-1]],[114,[-1]]],[[114,[-1]]],115],[[],131],[[],132],[[17,17],130],[[],112],[[],112],[-1,-2,[],[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],0,[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[[114,[-1]],[114,[-1]],[114,[-1]]],[[114,[-1]]],[115,129]],[[],133],[[],112],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[[[114,[-1]],[114,[-1]]],[[114,[-1]]],115],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[[114,[-1]],[114,[-1]],[114,[-1]]],[[114,[-1]]],[115,129]],[[],134],[[],112],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[-1,-1,[]],[[],7],[-1,-2,[],[]],[[[114,[-1]],[114,[-1]],[114,[-1]]],[[114,[-1]]],[115,129]],[[],135],[[],112],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],136],[[],137],[[],138],[[],139],[[],140],[[],112],[[],112],[[],112],[[],112],[[],112],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,39,-1],[[114,[-1]]],115],[[[114,[-1]],-1,-1],[[114,[-1]]],115],[[17,39,-1,-1],[[114,[-1]]],115],[[17,39,-1,-1],[[114,[-1]]],115],0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[114,[-1]],7],[[114,[-2]]],115,115],[[[114,[-1]],7],[[114,[-2]]],115,115],[[[141,[-1]]],[[16,[[47,[128,15]],15]]],[115,129]],[[[142,[-1]]],[[16,[[47,[128,15]],15]]],[115,129]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[143,143],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[143,143],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[47,[[141,[-1]],15]],7],[[47,[128,15]]],[115,129]],[[[47,[[142,[-1]],15]],7],[[47,[128,15]]],[115,129]],[[143,34],[[36,[6,35]]]],[[143,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[143,-1],6,85],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[[114,[-1]],7],[[114,[-1]]],115],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[141,[-1]]],92,[115,129]],[[[142,[-1]]],92,[115,129]],[[[114,[-1]],[114,[-1]],7],[[114,[-1]]],115],[[[114,[-1]],7],[[114,[-1]]],[115,129]],[[[114,[-1]],[114,[-1]],7],[[114,[-1]]],115],[[],144],[[],145],[[],146],[[],147],[[17,7],143],[[],112],[[],112],[[],112],[[],112],[[[114,[-1]]],[[114,[-1]]],115],[[[114,[-1]],[114,[-1]],7],[[114,[-1]]],115],[[[114,[-1]],7],[[114,[-1]]],[115,129]],[[[114,[-1]],[114,[-1]],7],[[114,[-1]]],115],[-1,-2,[],[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,6,[]],[[[114,[-1]],[114,[-1]]],6,115],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]]],5,115],0,[[[114,[-1]]],[[114,[-1]]],[22,115]],[[-1,-2],6,[],[]],[[[114,[-1]]],[[114,[-1]]],115],[7,-1,[]],[7,-1,[]],0,[-1,-2,[],[]],[7,6],[[[114,[-1]],34],[[36,[6,35]]],[37,115]],[-1,-1,[]],0,[[],7],[-1,-2,[],[]],[[[114,[-1]]],5,115],[[[96,[[94,[[93,[87]]]],[95,[[94,[[93,[87]]]]]]]],39,17,[99,[[94,[[93,[87]]]]]]],[[114,[-1]]],115],0,0,[[[114,[-1]],[96,[[94,[[93,[87]]]],[95,[[94,[[93,[87]]]]]]]],39],[[114,[-1]]],115],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,148],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[[149,34],[[36,[6,35]]]],[[149,34],[[36,[6,35]]]],[-1,-1,[]],[[],7],[-1,-2,[],[]],[-1,[[36,[-2,149]]],[[151,[150]]],[]],[[[98,[97]]],[[36,[-1,149]]],[]],[[-1,-2],[[36,[6,152]]],[],[[151,[150]]]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[-1,-2],6,[],[]],[[[153,[-1]],-1],6,[58,59]],[[-1,5],[[30,[[16,[-2,15]]]]],[],[]],[[[153,[-1]],5],[[30,[[16,[-1,15]]]]],[58,59]],[[[154,[-1,-2]],7],[[154,[-1,-2]]],[58,59,22,37],[58,59,22,37]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[154,[-1,-2]],-3],[[52,[155,15]]],[58,59,22,37],[58,59,22,37],[[156,[-1]]]],[157,157],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[157,34],[[36,[6,35]]]],[[[158,[-1]],34],[[36,[6,35]]],37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,7],[[30,[-2]]],[],[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,5,[]],0,0,[-1,[[47,[159,15]]],[]],[[[160,[-1,-2]]],[[47,[159,15]]],[58,59,22],[58,59]],[[[161,[-1]]],[[47,[159,15]]],[58,37]],[-1,[[162,[-2]]],163,[]],[-1,7,[]],[[[47,[164,15]],[52,[156,15]],[52,[165,15]],7,[30,[166]]],[[161,[-1]]],[58,59,22]],[[[47,[164,15]],[52,[156,15]],[52,[165,15]],[30,[166]]],[[160,[-1,-2]]],[],[]],[-3,[[154,[-1,-2]]],[58,59,22,37],[58,59,22,37],[[165,[-1,-2]]]],[[[16,[[52,[155,15]],15]]],[[161,[-1]]],[]],[7,[[153,[-1]]],[]],[-1,[[47,[164,15]]],[]],[[[153,[-1]]],[[47,[164,15]]],[58,59]],[[[154,[-1,-2]],7],[[154,[-1,-2]]],[58,59,22,37],[58,59,22,37]],[-1,157,[]],[[[154,[-1,-2]],49],[[154,[-1,-2]]],[58,59,22,37],[58,59,22,37]],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,[16,[-2,15]]],-3,[],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[30,[167]]],167],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[168,168],[[-1,-2],6,[],[]],[[169,170],[[36,[[171,[-1]],172]]],[173,22]],[169,[[36,[167,172]]]],[[[171,[-1]]],167,[]],[168,167],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[168,5],[[172,34],[[36,[6,35]]]],[[172,34],[[36,[6,35]]]],[[174,34],[[36,[6,35]]]],[[174,34],[[36,[6,35]]]],[[[171,[-1]],34],[[36,[6,35]]],37],[[168,34],[[36,[6,35]]]],[[[175,[-1]],34],[[36,[6,35]]],37],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[174,172],[-1,-1,[]],[176,174],[152,174],[177,174],[170,174],[-1,-1,[]],[[[179,[178]]],174],[180,174],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[36,[[181,[-2]],152]]],[[151,[150]]],[22,173]],[-2,[[181,[-1]]],[22,173],[[156,[-1]]]],[[-1,170],[[36,[[171,[-2]],174]]],[[151,[150]]],[]],[-1,168,[[151,[150]]]],[-1,[[36,[[181,[-2]],152]]],[[151,[150]]],[22,173]],[170,168],[[-1,7],[[30,[-2]]],[],[]],[[[181,[-1]],7],[[30,[-1]]],[22,58,59]],[[[171,[-1]],7],[[30,[-1]]],[22,58,59,173]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[182,[-2]]],[],183],[-1,-2,[],[]],[-1,5,[]],[-1,[[162,[-2]]],163,[]],[-1,7,[]],[[[181,[-1]]],7,[22,58,59]],[[[171,[-1]]],7,[22,58,59,173]],[-1,[[6,[-2,-3,-4,-5,-6,-7]]],[],[],[],[],[],[],[]],[-1,[[6,[-2,-3,-4]]],[],[],[],[]],[-1,[[6,[-2,-3]]],[],[],[]],[-1,[[6,[-2,-3,-4,-5,-6,-7,-8,-9,-10]]],[],[],[],[],[],[],[],[],[],[]],[-1,6,[]],[-1,[[6,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]]],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[6,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13]]],[],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[6,[-2,-3,-4,-5]]],[],[],[],[],[]],[-1,[[6,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12]]],[],[],[],[],[],[],[],[],[],[],[],[]],[-1,[[6,[-2,-3,-4,-5,-6]]],[],[],[],[],[],[]],[-1,[[6,[-2,-3,-4,-5,-6,-7,-8,-9]]],[],[],[],[],[],[],[],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2,-3,-4,-5,-6,-7,-8]]],[],[],[],[],[],[],[],[]],[170,169],[[[16,[-1,15]]],[[181,[-1]]],[]],[-2,[[162,[-1]]],[],[[156,[-1]]]],[[-1,5],[[36,[[175,[-2]],174]]],[[151,[150]]],[22,58,59,184,173]],[[[162,[-1]]],[[30,[-1]]],[]],[[168,170],[[36,[[171,[-1]],174]]],[22,58,59,184,173]],[[[175,[-1]]],[[36,[6,174]]],[22,58,59,184,173]],0,[172,[[30,[185]]]],[174,[[30,[185]]]],[[[171,[-1]]],170,[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],0,[-1,[[186,[-2]]],[],183],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[169,170],169],[[168,-1],168,[[151,[150]]]],[[169,170],169],[[169,170],169],[[169,170],169],[[[175,[-1]],170,-1],[[36,[7,174]]],[22,58,59,184,173]],[[168,5],[[36,[[175,[-1]],174]]],[22,58,59,184,173]],0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[187,187],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[187]]],188],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[[187,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[[189,7],[[30,[187]]]],0,[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],0,[189,7],[[187,-1],36,190],[[],189],[-1,-2,[],[]],[[],189],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[191,[-2,-1]],7],[[30,[-1]]],[22,58,59],[[156,[-1]]]],[[[192,[-2,-1]],7],[[30,[-1]]],[58,59],[[156,[-1]]]],[[[193,[-2]],7],[[30,[-1]]],22,[[156,[-1]]]],[[[194,[-2,-4,-1]],7],[[30,[-3]]],[58,59],[[156,[-1]]],[58,59],[[195,[-1,-3]],58,59]],[[[196,[-2,-1]],7],[[30,[-1]]],[22,58,59],[[156,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[191,[-2,-1]]],7,[22,58,59],[[156,[-1]]]],[[[192,[-2,-1]]],7,[58,59],[[156,[-1]]]],[[[193,[-2]]],7,22,[[156,[-1]]]],[[[194,[-2,-4,-1]]],7,[58,59],[[156,[-1]]],[58,59],[[195,[-1,-3]],58,59]],[[[196,[-2,-1]]],7,[22,58,59],[[156,[-1]]]],[[-1,-2],-3,[],[],[]],[[-2,166],[[191,[-2,-1]]],[],[[156,[-1]]]],[[-2,7],[[192,[-2,-1]]],[58,59],[[156,[-1]]]],[[[16,[-1,15]]],[[193,[-1]]],[]],[[-1,-2],[[194,[-1,-2,-3]]],[],[],[]],[[-1,7,7],[[196,[-1,-2]]],[],[]],[[-2,7],[[16,[[196,[[52,[-2,15]],-1]],15]]],[],[[156,[-1]]]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,7],[[192,[-2,-1]]],[58,59],[[156,[-1]]]],[[-2,49],[[191,[-2,-1]]],[],[[156,[-1]]]],[[-2,7],[[192,[-2,-1]]],[58,59],[[156,[-1]]]],0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[197,[199,[-1,198]]],[[199,[-1,198]]],9],[200,200],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[200]]],188],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[[200,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[200,197],[-1,-2,[],[]],[-1,-2,[],[]],[[200,-1],36,190],[-1,-2,[],[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-1,[]],0,[-1,201,[]],[-1,[],[]],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[202,202],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[[202,34],[[36,[6,35]]]],[-1,-1,[]],[201,202],[[],7],[-1,-2,[],[]],[202,202],[201,202],[202,201],[-1,-2,[],[]],[202],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],0,0,[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[203,203],[204,204],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[203]]],188],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[[203,34],[[36,[6,35]]]],[[204,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[[],7],[203,204],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[204,204],[201,203],[[203,-1],36,190],[204,201],[-1,-2,[],[]],[-1,-2,[],[]],[204],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[203,7],203],[[203,7],203],0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[205,[-1]]],[[205,[-1]]],22],[206,206],[207,207],[[[208,[-1]]],[[208,[-1]]],22],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],207],[[[205,[-1]]],[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[206]]],188],[[-1,[16,[15]]],[[16,[15]]],[]],[[[205,[[199,[-1,209]]]],[16,[15]]],[[16,[15]]],9],[[[205,[[199,[-1,210]]]],[16,[15]]],[[16,[15]]],9],[[[205,[[199,[-1,198]]]],[16,[15]]],[[16,[15]]],9],[[[208,[[199,[-1,198]]]],[16,[15]]],[[16,[15]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[[207,207],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[205,[-1]],34],[[36,[6,35]]],37],[[[205,[-1]],34],[[36,[6,35]]],[]],[[206,34],[[36,[6,35]]]],[[207,34],[[36,[6,35]]]],[[207,34],[[36,[6,35]]]],[[[208,[-1]],34],[[36,[6,35]]],37],[-1,-1,[]],[[[205,[[199,[-1,198]]]]],[[205,[[199,[-1,198]]]]],9],[[[205,[[199,[-1,210]]]]],[[205,[[199,[-1,210]]]]],9],[[[205,[[199,[-1,209]]]]],[[205,[[199,[-1,209]]]]],9],[[[208,[[199,[-1,198]]]]],[[208,[[199,[-1,198]]]]],9],[[[199,[-1,198]]],[[205,[[199,[-1,198]]]]],9],[-1,-1,[]],[[[199,[-1,209]]],[[205,[[199,[-1,209]]]]],9],[[[199,[-1,210]]],[[205,[[199,[-1,210]]]]],9],[-1,-1,[]],[170,207],[-1,-1,[]],[45,207],[-1,-1,[]],[[],[[205,[[199,[-1,198]]]]],9],[[],[[205,[[199,[-1,210]]]]],9],[[],[[205,[[199,[-1,209]]]]],9],[[],206],[[[205,[[199,[-1,198]]]]],[[208,[[199,[-1,198]]]]],9],[[207,-1],6,85],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[205,[[199,[-1,209]]]]],[],9],[[[205,[[199,[-1,198]]]]],[],9],[[[205,[[199,[-1,210]]]]],[],9],[206],[-1,[],[]],[[[205,[[199,[-1,209]]]]],[],9],[[[205,[[199,[-1,198]]]]],[],9],[[[205,[[199,[-1,210]]]]],[],9],[[[208,[[199,[-1,198]]]]],[],9],[207,45],[-2,[[16,[207,15]]],9,[[211,[-1]]]],[[-1,-2,-3],[[36,[-1,212]]],[],[[113,[167]]],213],[-1,-1,[]],[[[205,[[199,[-1,209]]]]],[[205,[[199,[-1,209]]]]],9],[[[205,[[199,[-1,198]]]]],[[205,[[199,[-1,198]]]]],9],[[[205,[[199,[-1,210]]]]],[[205,[[199,[-1,210]]]]],9],[[[208,[[199,[-1,198]]]]],[[208,[[199,[-1,198]]]]],9],[[-1,-3],-1,[],[],[[214,[-2]]]],[[[205,[[199,[-1,210]]]],-2],[[205,[[199,[-1,210]]]]],9,[[214,[-1]]]],[[[205,[-1]],-2],[[205,[-1]]],22,54],[[[205,[[199,[-1,209]]]],-2],[[205,[[199,[-1,209]]]]],9,[[214,[-1]]]],[[[205,[[199,[-1,198]]]],-2],[[205,[[199,[-1,198]]]]],9,[[214,[-1]]]],[[[208,[[199,[-1,198]]]],-2],[[208,[[199,[-1,198]]]]],9,[[214,[-1]]]],[[-1,207,[199,[-2,209]]],[[199,[-2,209]]],[],[]],[[-1,207,[199,[-2,198]]],[[199,[-2,198]]],[],[]],[[-1,207,[199,[-2,210]]],[[199,[-2,210]]],[],[]],[[207,-1],[[205,[-1]]],[]],[[],206],[[],207],[[[199,[-1,198]]],[[208,[[199,[-1,198]]]]],9],[-1,-1,[]],[-1,7,[]],[[-1,-2,-3],[[36,[6,212]]],[],[[113,[167]]],213],[[206,-1],36,190],[-1,-1,[]],[[[205,[[199,[-1,198]]]]],[[205,[[199,[-1,198]]]]],9],[[[205,[[199,[-1,209]]]]],[[205,[[199,[-1,209]]]]],9],[[[205,[[199,[-1,210]]]]],[[205,[[199,[-1,210]]]]],9],[[[208,[[199,[-1,198]]]]],[[208,[[199,[-1,198]]]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[208,[[199,[-1,198]]]],[199,[-1,198]]],6,9],[[[205,[-1]]],-1,22],[-1,[],[]],[[[205,[[199,[-1,198]]]]],[],215],[[[205,[[199,[-1,210]]]]],[],215],[[[205,[[199,[-1,209]]]]],[],215],[[[208,[[199,[-1,198]]]]],[],215],[[[208,[[199,[-1,198]]]]],[[199,[-1,198]]],9],[[[208,[[199,[-1,198]]]]],[[199,[-1,198]]],9],[[-1,-3],6,[],[],[[216,[-2]]]],[[[205,[[199,[-1,209]]]],-2],6,9,[[216,[-1]]]],[[[205,[[199,[-1,198]]]],-2],6,9,[[216,[-1]]]],[[[205,[[199,[-1,210]]]],-2],6,9,[[216,[-1]]]],[[[208,[[199,[-1,198]]]],-2],6,9,[[216,[-1]]]],[[-1,207,[199,[-2,209]]],6,[],[]],[[-1,207,[199,[-2,198]]],6,[],[]],[[-1,207,[199,[-2,210]]],6,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[207,[199,[-1,198]]],[[208,[[199,[-1,198]]]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[217,217],[218,218],[219,219],[[[220,[-1]]],[[220,[-1]]],9],[[[221,[-1]]],[[221,[-1]]],[22,9]],[[[222,[-1,-2]]],[[222,[-1,-2]]],[22,9],[22,223]],[224,224],[225,225],[226,226],[[[227,[-1]]],[[227,[-1]]],9],[[[228,[-1]]],[[228,[-1]]],[22,9]],[[[229,[-1,-2]]],[[229,[-1,-2]]],[22,9],[22,223]],[230,230],[[[231,[-1]]],[[231,[-1]]],9],[[[232,[-1]]],[[232,[-1]]],[22,9]],[[[233,[-1,-2]]],[[233,[-1,-2]]],[22,9],[22,223]],[234,234],[[[235,[-1]]],[[235,[-1]]],9],[[[236,[-1]]],[[236,[-1]]],[22,9]],[[[237,[-1,-2]]],[[237,[-1,-2]]],[22,9],[22,223]],[238,238],[[[239,[-1]]],[[239,[-1]]],9],[[[240,[-1]]],[[240,[-1]]],[22,9]],[[[241,[-1,-2]]],[[241,[-1,-2]]],[22,9],[22,223]],[242,242],[243,243],[244,244],[[[245,[-1]]],[[245,[-1]]],9],[[[246,[-1]]],[[246,[-1]]],[22,9]],[[[247,[-1,-2]]],[[247,[-1,-2]]],[22,9],[22,223]],[248,248],[[[249,[-1]]],[[249,[-1]]],9],[[[250,[-1]]],[[250,[-1]]],[22,9]],[[[251,[-1,-2]]],[[251,[-1,-2]]],[22,9],[22,223]],[252,252],[[[253,[-1]]],[[253,[-1]]],9],[[[254,[-1]]],[[254,[-1]]],[22,9]],[[[255,[-1,-2]]],[[255,[-1,-2]]],[22,9],[22,223]],[256,256],[257,257],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,0,0,0,0,0,[[],224],[[],248],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[217]]],188],[-1,[[36,[219]]],188],[-1,[[36,[[222,[-2,-3]]]]],188,9,223],[-1,[[36,[225]]],188],[-1,[[36,[226]]],188],[-1,[[36,[[229,[-2,-3]]]]],188,9,223],[-1,[[36,[230]]],188],[-1,[[36,[[233,[-2,-3]]]]],188,9,223],[-1,[[36,[234]]],188],[-1,[[36,[[237,[-2,-3]]]]],188,9,223],[-1,[[36,[238]]],188],[-1,[[36,[[241,[-2,-3]]]]],188,9,223],[-1,[[36,[242]]],188],[-1,[[36,[243]]],188],[-1,[[36,[244]]],188],[-1,[[36,[[247,[-2,-3]]]]],188,9,223],[-1,[[36,[[251,[-2,-3]]]]],188,9,223],[-1,[[36,[252]]],188],[-1,[[36,[[255,[-2,-3]]]]],188,9,223],[-1,[[36,[256]]],188],[[218,[16,[15]]],[[16,[15]]]],[[[220,[-1]],[16,[15]]],[[16,[15]]],9],[[224,[16,[15]]],[[16,[15]]]],[[[227,[-1]],[16,[15]]],[[16,[15]]],9],[[[231,[-1]],[16,[15]]],[[16,[15]]],9],[[[235,[-1]],[16,[15]]],[[16,[15]]],9],[[[239,[-1]],[16,[15]]],[[16,[15]]],9],[[242,[16,[15]]],[[16,[15]]]],[[243,[16,[15]]],[[16,[15]]]],[[[245,[-1]],[16,[15]]],[[16,[15]]],9],[[248,[16,[15]]],[[16,[15]]]],[[[249,[-1]],[16,[15]]],[[16,[15]]],9],[[[253,[-1]],[16,[15]]],[[16,[15]]],9],[[257,[16,[15]]],[[16,[15]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],0,0,0,0,0,0,0,0,[[225,225],5],[[242,242],5],[[243,243],5],[[217,34],[[36,[6,35]]]],[[217,34],[[36,[6,35]]]],[[218,34],[[36,[6,35]]]],[[219,34],[[36,[6,35]]]],[[[220,[-1]],34],[[36,[6,35]]],9],[[[220,[-1]],34],[[36,[6,35]]],[37,9]],[[[221,[-1]],34],[[36,[6,35]]],[37,9]],[[[222,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[224,34],[[36,[6,35]]]],[[225,34],[[36,[6,35]]]],[[225,34],[[36,[6,35]]]],[[226,34],[[36,[6,35]]]],[[226,34],[[36,[6,35]]]],[[[227,[-1]],34],[[36,[6,35]]],9],[[[227,[-1]],34],[[36,[6,35]]],[37,9]],[[[228,[-1]],34],[[36,[6,35]]],[37,9]],[[[229,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[230,34],[[36,[6,35]]]],[[230,34],[[36,[6,35]]]],[[[231,[-1]],34],[[36,[6,35]]],9],[[[231,[-1]],34],[[36,[6,35]]],[37,9]],[[[232,[-1]],34],[[36,[6,35]]],[37,9]],[[[233,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[234,34],[[36,[6,35]]]],[[[235,[-1]],34],[[36,[6,35]]],[37,9]],[[[235,[-1]],34],[[36,[6,35]]],9],[[[236,[-1]],34],[[36,[6,35]]],[37,9]],[[[237,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[238,34],[[36,[6,35]]]],[[[239,[-1]],34],[[36,[6,35]]],9],[[[239,[-1]],34],[[36,[6,35]]],[37,9]],[[[240,[-1]],34],[[36,[6,35]]],[37,9]],[[[241,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[242,34],[[36,[6,35]]]],[[242,34],[[36,[6,35]]]],[[243,34],[[36,[6,35]]]],[[243,34],[[36,[6,35]]]],[[244,34],[[36,[6,35]]]],[[[245,[-1]],34],[[36,[6,35]]],9],[[[245,[-1]],34],[[36,[6,35]]],[37,9]],[[[246,[-1]],34],[[36,[6,35]]],[37,9]],[[[247,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[248,34],[[36,[6,35]]]],[[[249,[-1]],34],[[36,[6,35]]],[37,9]],[[[249,[-1]],34],[[36,[6,35]]],9],[[[250,[-1]],34],[[36,[6,35]]],[37,9]],[[[251,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[252,34],[[36,[6,35]]]],[[[253,[-1]],34],[[36,[6,35]]],9],[[[253,[-1]],34],[[36,[6,35]]],[37,9]],[[[254,[-1]],34],[[36,[6,35]]],[37,9]],[[[255,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[256,34],[[36,[6,35]]]],[[256,34],[[36,[6,35]]]],[[257,34],[[36,[6,35]]]],0,0,[218,218],[[[220,[-1]]],[[220,[-1]]],9],[224,224],[[[227,[-1]]],[[227,[-1]]],9],[[[231,[-1]]],[[231,[-1]]],9],[[[235,[-1]]],[[235,[-1]]],9],[[[239,[-1]]],[[239,[-1]]],9],[242,242],[243,243],[[[245,[-1]]],[[245,[-1]]],9],[248,248],[[[249,[-1]]],[[249,[-1]]],9],[[[253,[-1]]],[[253,[-1]]],9],[257,257],[[218,[199,[-1,198]]],[[199,[-1,198]]],9],[[[220,[-1]],[199,[-1,210]]],[[199,[-1,198]]],9],[[224,[199,[-1,198]]],[[199,[-1,198]]],9],[[[227,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[231,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[235,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[239,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[245,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[248,[199,[-1,198]]],[[199,[-1,198]]],9],[[[253,[-1]],[199,[-1,198]],[30,[[6,[[199,[-1,198]],[199,[-1,198]]]]]]],[[6,[[199,[-1,198]],[199,[-1,198]]]]],9],[[257,[199,[-1,198]]],[[199,[-1,198]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[221,[-1]]],9],[[],[[228,[-1]]],9],[[],[[232,[-1]]],9],[[],[[236,[-1]]],9],[[],[[240,[-1]]],9],[[],[[246,[-1]]],9],[[],[[250,[-1]]],9],[[],[[254,[-1]]],9],0,0,0,0,0,0,[[7,7,7],[[199,[-1,198]]],9],0,0,0,[[],7],[217,218],[[],7],[219,[[220,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[225,-1],[[199,[-2,198]]],[[113,[17]]],9],[[],7],[226,[[227,[-1]]],9],[[],7],[[],7],[[],7],[230,[[231,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[234,[[235,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[238,[[239,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[244,[[245,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[252,[[253,[-1]]],9],[[],7],[[],7],[[],7],[256,257],[[],7],[[],7],[[219,[221,[-1]]],[[220,[-1]]],9],[[225,-1,[30,[7]],[30,[7]]],[[199,[-2,198]]],[[113,[17]]],9],[[226,[228,[-1]]],[[227,[-1]]],9],[[230,[232,[-1]]],[[231,[-1]]],9],[[234,[236,[-1]]],[[235,[-1]]],9],[[238,[240,[-1]]],[[239,[-1]]],9],[[252,[254,[-1]]],[[253,[-1]]],9],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[221,[-1]]],[],9],[[[228,[-1]]],[],9],[[[232,[-1]]],[],9],[[[236,[-1]]],[],9],[[[240,[-1]]],[],9],[[[246,[-1]]],[],9],[[[250,[-1]]],[],9],[[[254,[-1]]],[],9],[218],[[[220,[-1]]],[],9],[224],[[[227,[-1]]],[],9],[[[231,[-1]]],[],9],[[[235,[-1]]],[],9],[[[239,[-1]]],[],9],[242],[243],[[[245,[-1]]],[],9],[248],[[[249,[-1]]],[],9],[[[253,[-1]]],[],9],[257],0,[218,218],[[[220,[-1]]],[[220,[-1]]],9],[224,224],[[[227,[-1]]],[[227,[-1]]],9],[[[231,[-1]]],[[231,[-1]]],9],[[[235,[-1]]],[[235,[-1]]],9],[[[239,[-1]]],[[239,[-1]]],9],[242,242],[243,243],[[[245,[-1]]],[[245,[-1]]],9],[248,248],[[[249,[-1]]],[[249,[-1]]],9],[[[253,[-1]]],[[253,[-1]]],9],[257,257],0,0,[[218,-2],218,9,[[214,[-1]]]],[[[220,[-1]],-2],[[220,[-1]]],9,[[214,[-1]]]],[[224,-2],224,9,[[214,[-1]]]],[[[227,[-1]],-2],[[227,[-1]]],9,[[214,[-1]]]],[[[231,[-1]],-2],[[231,[-1]]],9,[[214,[-1]]]],[[[235,[-1]],-2],[[235,[-1]]],9,[[214,[-1]]]],[[[239,[-1]],-2],[[239,[-1]]],9,[[214,[-1]]]],[[242,-2],242,9,[[214,[-1]]]],[[243,-2],243,9,[[214,[-1]]]],[[[245,[-1]],-2],[[245,[-1]]],9,[[214,[-1]]]],[[248,-2],248,9,[[214,[-1]]]],[[[249,[-1]],-2],[[249,[-1]]],9,[[214,[-1]]]],[[[253,[-1]],-2],[[253,[-1]]],9,[[214,[-1]]]],[[257,-2],257,9,[[214,[-1]]]],0,0,0,[201,217],[[7,7],219],[[],224],[[7,7],226],[7,230],[[7,7],234],[7,238],[7,244],[[],248],[[7,7,5,225],[[249,[-1]]],9],[[7,7,5],252],[[[10,[7]]],256],[[226,[250,[-1]]],[[249,[-1]]],9],0,0,0,0,0,[[[220,[-1]]],7,9],[[[227,[-1]]],7,9],[[[231,[-1]]],7,9],[[[235,[-1]]],7,9],[[[239,[-1]]],7,9],[[[245,[-1]]],7,9],[[[249,[-1]]],7,9],[[[253,[-1]]],7,9],0,0,0,0,0,0,0,0,0,[[217,-1],36,190],[[219,-1],36,190],[[[222,[-1,-2]],-3],36,9,223,190],[[225,-1],36,190],[[226,-1],36,190],[[[229,[-1,-2]],-3],36,9,223,190],[[230,-1],36,190],[[[233,[-1,-2]],-3],36,9,223,190],[[234,-1],36,190],[[[237,[-1,-2]],-3],36,9,223,190],[[238,-1],36,190],[[[241,[-1,-2]],-3],36,9,223,190],[[242,-1],36,190],[[243,-1],36,190],[[244,-1],36,190],[[[247,[-1,-2]],-3],36,9,223,190],[[[251,[-1,-2]],-3],36,9,223,190],[[252,-1],36,190],[[[255,[-1,-2]],-3],36,9,223,190],[[256,-1],36,190],0,0,0,[218,218],[[[220,[-1]]],[[220,[-1]]],9],[224,224],[[[227,[-1]]],[[227,[-1]]],9],[[[231,[-1]]],[[231,[-1]]],9],[[[235,[-1]]],[[235,[-1]]],9],[[[239,[-1]]],[[239,[-1]]],9],[242,242],[243,243],[[[245,[-1]]],[[245,[-1]]],9],[248,248],[[[249,[-1]]],[[249,[-1]]],9],[[[253,[-1]]],[[253,[-1]]],9],[257,257],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],0,[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[218],[[[220,[-1]]],[],[9,215]],[224],[[[227,[-1]]],[],[9,215]],[[[231,[-1]]],[],[9,215]],[[[235,[-1]]],[],[9,215]],[[[239,[-1]]],[],[9,215]],[242],[243],[[[245,[-1]]],[],[9,215]],[248],[[[249,[-1]]],[],[9,215]],[[[253,[-1]]],[],[9,215]],[257],[[218,-2],6,9,[[216,[-1]]]],[[[220,[-1]],-2],6,9,[[216,[-1]]]],[[224,-2],6,9,[[216,[-1]]]],[[[227,[-1]],-2],6,9,[[216,[-1]]]],[[[231,[-1]],-2],6,9,[[216,[-1]]]],[[[235,[-1]],-2],6,9,[[216,[-1]]]],[[[239,[-1]],-2],6,9,[[216,[-1]]]],[[242,-2],6,9,[[216,[-1]]]],[[243,-2],6,9,[[216,[-1]]]],[[[245,[-1]],-2],6,9,[[216,[-1]]]],[[248,-2],6,9,[[216,[-1]]]],[[[249,[-1]],-2],6,9,[[216,[-1]]]],[[[253,[-1]],-2],6,9,[[216,[-1]]]],[[257,-2],6,9,[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[234,5],234],[[226,5],226],[[256,[10,[7]]],256],[[230,201],230],[[234,201],234],[[238,201],238],[[219,225],219],[[226,225],226],[[252,225],252],[[244,7],244],[[244,7],244],[[230,201],230],[[256,[10,[7]]],256],[[256,[10,[7]]],256],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[],[[258,[-1]]],9],[[],[[258,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[259,259],[[[260,[-1]]],[[260,[-1]]],9],[[[261,[-1]]],[[261,[-1]]],[22,9]],[[[262,[-1,-2]]],[[262,[-1,-2]]],[22,9],[22,223]],[[[263,[-1]]],[[263,[-1]]],[22,9]],[[[264,[-1]]],[[264,[-1]]],[22,9]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[259]]],188],[-1,[[36,[[262,[-2,-3]]]]],188,9,223],[[[260,[-1]],[16,[15]]],[[16,[15]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],0,0,[[259,34],[[36,[6,35]]]],[[[260,[-1]],34],[[36,[6,35]]],9],[[[260,[-1]],34],[[36,[6,35]]],[37,9]],[[[261,[-1]],34],[[36,[6,35]]],[37,9]],[[[262,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[263,[-1]],34],[[36,[6,35]]],[37,9]],[[[264,[-1]],34],[[36,[6,35]]],[37,9]],[[[260,[-1]]],[[260,[-1]]],9],[[[260,[-1]],[263,[-1]]],[[264,[-1]]],9],[[[260,[-1]],[263,[-1]],[258,[-1]]],[[264,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[261,[-1]]],9],[[7,7],[[199,[-1,209]]],9],[[7,[16,[[16,[7,15]],15]],[30,[7]]],[[265,[-1]]],9],[[],7],[[],7],[[],7],[259,[[260,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[259,[261,[-1]]],[[260,[-1]]],9],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[261,[-1]]],[],9],[[[260,[-1]]],[],9],0,0,[[[260,[-1]]],[[260,[-1]]],9],[[[260,[-1]],-2],[[260,[-1]]],9,[[214,[-1]]]],0,[[[263,[-1]],[199,[-1,209]]],[[263,[-1]]],9],[[[263,[-1]],[199,[-1,209]]],[[263,[-1]]],9],0,0,0,0,[[7,7],259],[[[199,[-1,198]],[199,[-1,198]],[199,[-1,198]]],[[263,[-1]]],9],[[[260,[-1]]],7,9],0,0,0,0,[[[199,[-1,198]]],[[263,[-1]]],9],[[259,-1],36,190],[[[262,[-1,-2]],-3],36,9,223,190],0,[[[260,[-1]]],[[260,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[260,[-1]]],[],[9,215]],0,0,[[[260,[-1]],-2],6,9,[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[259,201],259],[[259,225],259],[[259,201],259],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[[],[[266,[-1]]],9],[-1,-1,[]],[[],7],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[267,267],[[[268,[-1]]],[[268,[-1]]],9],[[[269,[-1]]],[[269,[-1]]],[22,9]],[[[270,[-1,-2]]],[[270,[-1,-2]]],[22,9],[22,223]],[271,271],[[[272,[-1]]],[[272,[-1]]],9],[[[273,[-1]]],[[273,[-1]]],[22,9]],[[[274,[-1,-2]]],[[274,[-1,-2]]],[22,9],[22,223]],[275,275],[[[276,[-1]]],[[276,[-1]]],9],[[[277,[-1]]],[[277,[-1]]],[22,9]],[[[278,[-1,-2]]],[[278,[-1,-2]]],[22,9],[22,223]],[279,279],[[[280,[-1]]],[[280,[-1]]],9],[[[281,[-1]]],[[281,[-1]]],[22,9]],[[[282,[-1,-2]]],[[282,[-1,-2]]],[22,9],[22,223]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[267]]],188],[-1,[[36,[[270,[-2,-3]]]]],188,9,223],[-1,[[36,[271]]],188],[-1,[[36,[[274,[-2,-3]]]]],188,9,223],[-1,[[36,[275]]],188],[-1,[[36,[[278,[-2,-3]]]]],188,9,223],[-1,[[36,[279]]],188],[-1,[[36,[[282,[-2,-3]]]]],188,9,223],[[[268,[-1]],[16,[15]]],[[16,[15]]],9],[[[272,[-1]],[16,[15]]],[[16,[15]]],9],[[[276,[-1]],[16,[15]]],[[16,[15]]],9],[[[280,[-1]],[16,[15]]],[[16,[15]]],9],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[267,34],[[36,[6,35]]]],[[267,34],[[36,[6,35]]]],[[[268,[-1]],34],[[36,[6,35]]],[37,9]],[[[268,[-1]],34],[[36,[6,35]]],9],[[[269,[-1]],34],[[36,[6,35]]],[37,9]],[[[270,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[271,34],[[36,[6,35]]]],[[271,34],[[36,[6,35]]]],[[[272,[-1]],34],[[36,[6,35]]],[37,9]],[[[272,[-1]],34],[[36,[6,35]]],9],[[[273,[-1]],34],[[36,[6,35]]],[37,9]],[[[274,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[275,34],[[36,[6,35]]]],[[275,34],[[36,[6,35]]]],[[[276,[-1]],34],[[36,[6,35]]],[37,9]],[[[276,[-1]],34],[[36,[6,35]]],9],[[[277,[-1]],34],[[36,[6,35]]],[37,9]],[[[278,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[279,34],[[36,[6,35]]]],[[279,34],[[36,[6,35]]]],[[[280,[-1]],34],[[36,[6,35]]],[37,9]],[[[280,[-1]],34],[[36,[6,35]]],9],[[[281,[-1]],34],[[36,[6,35]]],[37,9]],[[[282,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[268,[-1]]],[[268,[-1]]],9],[[[272,[-1]]],[[272,[-1]]],9],[[[276,[-1]]],[[276,[-1]]],9],[[[280,[-1]]],[[280,[-1]]],9],[[[268,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[272,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[276,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[280,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[269,[-1]]],9],[[],[[273,[-1]]],9],[[],[[277,[-1]]],9],[[],[[281,[-1]]],9],0,0,0,0,0,0,0,0,0,0,0,0,[267,[[268,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[271,[[272,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[275,[[276,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[279,[[280,[-1]]],9],[[],7],[[],7],[[],7],[[267,[269,[-1]]],[[268,[-1]]],9],[[271,[273,[-1]]],[[272,[-1]]],9],[[275,[277,[-1]]],[[276,[-1]]],9],[[279,[281,[-1]]],[[280,[-1]]],9],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[269,[-1]]],[],9],[[[273,[-1]]],[],9],[[[277,[-1]]],[],9],[[[281,[-1]]],[],9],[[[268,[-1]]],[],9],[[[272,[-1]]],[],9],[[[276,[-1]]],[],9],[[[280,[-1]]],[],9],0,0,0,0,0,0,0,0,0,0,0,0,[[[268,[-1]]],[[268,[-1]]],9],[[[272,[-1]]],[[272,[-1]]],9],[[[276,[-1]]],[[276,[-1]]],9],[[[280,[-1]]],[[280,[-1]]],9],[[[268,[-1]],-2],[[268,[-1]]],9,[[214,[-1]]]],[[[272,[-1]],-2],[[272,[-1]]],9,[[214,[-1]]]],[[[276,[-1]],-2],[[276,[-1]]],9,[[214,[-1]]]],[[[280,[-1]],-2],[[280,[-1]]],9,[[214,[-1]]]],[[7,7,7],267],[[[10,[7]],[10,[7]]],271],[[[10,[7]],7],275],[[[10,[7]],[10,[7]]],279],[[[268,[-1]]],7,9],[[[272,[-1]]],7,9],[[[276,[-1]]],7,9],[[[280,[-1]]],7,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[267,-1],36,190],[[[270,[-1,-2]],-3],36,9,223,190],[[271,-1],36,190],[[[274,[-1,-2]],-3],36,9,223,190],[[275,-1],36,190],[[[278,[-1,-2]],-3],36,9,223,190],[[279,-1],36,190],[[[282,[-1,-2]],-3],36,9,223,190],0,0,0,0,0,0,0,0,0,0,0,0,[[[268,[-1]]],[[268,[-1]]],9],[[[272,[-1]]],[[272,[-1]]],9],[[[276,[-1]]],[[276,[-1]]],9],[[[280,[-1]]],[[280,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[268,[-1]]],[],[9,215]],[[[272,[-1]]],[],[9,215]],[[[276,[-1]]],[],[9,215]],[[[280,[-1]]],[],[9,215]],[[[268,[-1]],-2],6,9,[[216,[-1]]]],[[[272,[-1]],-2],6,9,[[216,[-1]]]],[[[276,[-1]],-2],6,9,[[216,[-1]]]],[[[280,[-1]],-2],6,9,[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[267,5],267],[[271,5],271],[[275,5],275],[[279,5],279],[[267,7],267],[[271,[10,[7]]],271],[[275,7],275],[[279,[10,[7]]],279],[[267,7],267],[[271,7],271],[[275,7],275],[[279,7],279],[[267,225],267],[[271,225],271],[[275,225],275],[[279,225],279],[[267,242],267],[[271,243],271],[[275,7],275],[[279,[10,[7]]],279],[[275,7],275],[[279,[10,[7]]],279],[[267,7],267],[[271,[10,[7]]],271],[[275,7],275],[[279,[10,[7]]],279],0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[283,283],[[[284,[-1]]],[[284,[-1]]],9],[[[285,[-1]]],[[285,[-1]]],[22,9]],[[[286,[-1,-2]]],[[286,[-1,-2]]],[22,9],[22,223]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[283]]],188],[-1,[[36,[[286,[-2,-3]]]]],188,9,223],[[[284,[-1]],[16,[15]]],[[16,[15]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[[283,34],[[36,[6,35]]]],[[[284,[-1]],34],[[36,[6,35]]],9],[[[284,[-1]],34],[[36,[6,35]]],[37,9]],[[[285,[-1]],34],[[36,[6,35]]],[37,9]],[[[286,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[284,[-1]]],[[284,[-1]]],9],[[[284,[-1]],[199,[-1,198]],[30,[[199,[-1,198]]]]],[[199,[-1,198]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[285,[-1]]],9],[283,[[284,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[283,[285,[-1]]],[[284,[-1]]],9],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[285,[-1]]],[],9],[[[284,[-1]]],[],9],[[[284,[-1]]],[[284,[-1]]],9],[[[284,[-1]],-2],[[284,[-1]]],9,[[214,[-1]]]],[[7,7,5],283],0,0,[[[284,[-1]]],7,9],0,0,[[283,-1],36,190],[[[286,[-1,-2]],-3],36,9,223,190],[[[284,[-1]]],[[284,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],0,0,[[[284,[-1]]],[],[9,215]],[[[284,[-1]],-2],6,9,[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[283,225],283],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[287,287],[[[288,[-1]]],[[288,[-1]]],9],[[[289,[-1]]],[[289,[-1]]],[22,9]],[[[290,[-1,-2]]],[[290,[-1,-2]]],[22,9],[22,223]],[291,291],[[[292,[-1]]],[[292,[-1]]],9],[[[293,[-1]]],[[293,[-1]]],[22,9]],[[[294,[-1,-2]]],[[294,[-1,-2]]],[22,9],[22,223]],[[[295,[-1]]],[[295,[-1]]],[22,9]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],[[288,[-1]]],9],[[],[[292,[-1]]],9],[[],[[295,[-1]]],9],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[287]]],188],[-1,[[36,[[290,[-2,-3]]]]],188,9,223],[-1,[[36,[291]]],188],[-1,[[36,[[294,[-2,-3]]]]],188,9,223],[[[288,[-1]],[16,[15]]],[[16,[15]]],9],[[[292,[-1]],[16,[15]]],[[16,[15]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[287,34],[[36,[6,35]]]],[[287,34],[[36,[6,35]]]],[[[288,[-1]],34],[[36,[6,35]]],9],[[[288,[-1]],34],[[36,[6,35]]],[37,9]],[[[289,[-1]],34],[[36,[6,35]]],[37,9]],[[[290,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[291,34],[[36,[6,35]]]],[[291,34],[[36,[6,35]]]],[[[292,[-1]],34],[[36,[6,35]]],9],[[[292,[-1]],34],[[36,[6,35]]],[37,9]],[[[293,[-1]],34],[[36,[6,35]]],[37,9]],[[[294,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[295,[-1]],34],[[36,[6,35]]],[37,9]],[[[288,[-1]]],[[288,[-1]]],9],[[[292,[-1]]],[[292,[-1]]],9],[[[288,[-1]],[199,[-1,198]],[199,[-1,210]]],[[199,[-1,198]]],9],[[[292,[-1]],[199,[-1,198]],[199,[-1,210]]],[[199,[-1,198]]],9],[[[295,[-1]],[199,[-1,198]],[199,[-1,198]],296],[[199,[-1,198]]],9],[[[295,[-1]],[199,[-1,198]],[199,[-1,198]]],[[199,[-1,198]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[289,[-1]]],9],[[],[[293,[-1]]],9],[[],7],[[],7],[287,[[288,[-1]]],9],[[],7],[[],7],[[],7],[291,[[292,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[289,[-1]]],[],9],[[[293,[-1]]],[],9],[[[288,[-1]]],[],9],[[[292,[-1]]],[],9],[[[288,[-1]]],[[288,[-1]]],9],[[[292,[-1]]],[[292,[-1]]],9],0,0,0,0,[[[288,[-1]],-2],[[288,[-1]]],9,[[214,[-1]]]],[[[292,[-1]],-2],[[292,[-1]]],9,[[214,[-1]]]],[[],287],[[],291],[[[30,[7]]],[[292,[-1]]],9],[[],[[295,[-1]]],9],[[[288,[-1]]],7,9],[[[292,[-1]]],7,9],0,0,[[287,-1],36,190],[[[290,[-1,-2]],-3],36,9,223,190],[[291,-1],36,190],[[[294,[-1,-2]],-3],36,9,223,190],0,0,0,0,[[[288,[-1]]],[[288,[-1]]],9],[[[292,[-1]]],[[292,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[288,[-1]]],[],[9,215]],[[[292,[-1]]],[],[9,215]],[[[288,[-1]],-2],6,9,[[216,[-1]]]],[[[292,[-1]],-2],6,9,[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[287,5],287],[[291,5],291],[[291,[30,[[16,[7,15]]]]],291],[[287,[30,[38]]],287],[[291,[30,[38]]],291],[[287,[30,[[10,[38]]]]],287],[[291,[30,[[16,[38,15]]]]],291],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[297,297],[298,298],[299,299],[300,300],[301,301],[302,302],[303,303],[304,304],[305,305],[306,306],[307,307],[308,308],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[297]]],188],[-1,[[36,[299]]],188],[-1,[[36,[301]]],188],[-1,[[36,[303]]],188],[-1,[[36,[305]]],188],[-1,[[36,[307]]],188],[[298,[16,[15]]],[[16,[15]]]],[[300,[16,[15]]],[[16,[15]]]],[[302,[16,[15]]],[[16,[15]]]],[[304,[16,[15]]],[[16,[15]]]],[[306,[16,[15]]],[[16,[15]]]],[[308,[16,[15]]],[[16,[15]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[297,34],[[36,[6,35]]]],[[298,34],[[36,[6,35]]]],[[299,34],[[36,[6,35]]]],[[300,34],[[36,[6,35]]]],[[301,34],[[36,[6,35]]]],[[302,34],[[36,[6,35]]]],[[303,34],[[36,[6,35]]]],[[303,34],[[36,[6,35]]]],[[304,34],[[36,[6,35]]]],[[305,34],[[36,[6,35]]]],[[306,34],[[36,[6,35]]]],[[307,34],[[36,[6,35]]]],[[307,34],[[36,[6,35]]]],[[308,34],[[36,[6,35]]]],[298,298],[300,300],[302,302],[304,304],[306,306],[308,308],[[298,[199,[-1,198]]],[[199,[-1,198]]],9],[[300,[199,[-1,198]]],[[199,[-1,198]]],9],[[302,[199,[-1,198]]],[[199,[-1,198]]],9],[[304,[199,[-1,198]]],[[199,[-1,198]]],9],[[306,[199,[-1,198]]],[[199,[-1,198]]],9],[[308,[199,[-1,198]]],[[199,[-1,198]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[297,298],[[],7],[[],7],[[],7],[299,300],[[],7],[301,302],[[],7],[[],7],[[],7],[303,304],[[],7],[[],7],[305,306],[[],7],[[],7],[307,308],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[298],[300],[302],[304],[306],[308],0,0,0,0,[298,298],[300,300],[302,302],[304,304],[306,306],[308,308],[[298,-2],298,9,[[214,[-1]]]],[[300,-2],300,9,[[214,[-1]]]],[[302,-2],302,9,[[214,[-1]]]],[[304,-2],304,9,[[214,[-1]]]],[[306,-2],306,9,[[214,[-1]]]],[[308,-2],308,9,[[214,[-1]]]],[7,297],[[[10,[7]]],299],[7,301],[[[10,[7]]],303],[7,305],[[[10,[7]]],307],0,0,0,0,0,0,[[297,-1],36,190],[[299,-1],36,190],[[301,-1],36,190],[[303,-1],36,190],[[305,-1],36,190],[[307,-1],36,190],0,0,0,0,[298,298],[300,300],[302,302],[304,304],[306,306],[308,308],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[298],[300],[302],[304],[306],[308],[[298,-2],6,9,[[216,[-1]]]],[[300,-2],6,9,[[216,[-1]]]],[[302,-2],6,9,[[216,[-1]]]],[[304,-2],6,9,[[216,[-1]]]],[[306,-2],6,9,[[216,[-1]]]],[[308,-2],6,9,[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[301,5],301],[[303,5],303],[[305,7],305],[[307,[10,[7]]],307],[[301,242],301],[[303,243],303],[[305,242],305],[[307,243],307],[[301,7],301],[[305,7],305],[[303,[10,[7]]],303],[[307,[10,[7]]],307],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[309,309],[[[310,[-1]]],[[310,[-1]]],9],[[[311,[-1]]],[[311,[-1]]],[22,9]],[[[312,[-1,-2]]],[[312,[-1,-2]]],[22,9],[22,223]],[[[313,[-1]]],[[313,[-1]]],9],[[[314,[-1]]],[[314,[-1]]],[22,9]],[[[315,[-1,-2]]],[[315,[-1,-2]]],[22,9],[22,223]],[316,316],[[[317,[-1]]],[[317,[-1]]],9],[[[318,[-1]]],[[318,[-1]]],[22,9]],[[[319,[-1,-2]]],[[319,[-1,-2]]],[22,9],[22,223]],[[[320,[-1]]],[[320,[-1]]],9],[[[321,[-1]]],[[321,[-1]]],[22,9]],[[[322,[-1,-2]]],[[322,[-1,-2]]],[22,9],[22,223]],[323,323],[[[324,[-1]]],[[324,[-1]]],9],[[[325,[-1]]],[[325,[-1]]],[22,9]],[[[326,[-1,-2]]],[[326,[-1,-2]]],[22,9],[22,223]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,0,0,0,0,0,0,0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[309]]],188],[-1,[[36,[[312,[-2,-3]]]]],188,9,223],[-1,[[36,[[315,[-2,-3]]]]],188,9,223],[-1,[[36,[316]]],188],[-1,[[36,[[319,[-2,-3]]]]],188,9,223],[-1,[[36,[[322,[-2,-3]]]]],188,9,223],[-1,[[36,[323]]],188],[-1,[[36,[[326,[-2,-3]]]]],188,9,223],[[[310,[-1]],[16,[15]]],[[16,[15]]],9],[[[313,[-1]],[16,[15]]],[[16,[15]]],9],[[[317,[-1]],[16,[15]]],[[16,[15]]],9],[[[320,[-1]],[16,[15]]],[[16,[15]]],9],[[[324,[-1]],[16,[15]]],[[16,[15]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],0,0,0,0,0,0,0,0,0,[[309,34],[[36,[6,35]]]],[[[310,[-1]],34],[[36,[6,35]]],9],[[[310,[-1]],34],[[36,[6,35]]],[37,9]],[[[311,[-1]],34],[[36,[6,35]]],[37,9]],[[[312,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[327,[-1]],34],[[36,[6,35]]],[37,9]],[[[313,[-1]],34],[[36,[6,35]]],[37,9]],[[[313,[-1]],34],[[36,[6,35]]],9],[[[314,[-1]],34],[[36,[6,35]]],[37,9]],[[[315,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[316,34],[[36,[6,35]]]],[[[317,[-1]],34],[[36,[6,35]]],9],[[[317,[-1]],34],[[36,[6,35]]],[37,9]],[[[318,[-1]],34],[[36,[6,35]]],[37,9]],[[[319,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[328,[-1]],34],[[36,[6,35]]],[37,9]],[[[320,[-1]],34],[[36,[6,35]]],9],[[[320,[-1]],34],[[36,[6,35]]],[37,9]],[[[321,[-1]],34],[[36,[6,35]]],[37,9]],[[[322,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[323,34],[[36,[6,35]]]],[[[324,[-1]],34],[[36,[6,35]]],9],[[[324,[-1]],34],[[36,[6,35]]],[37,9]],[[[325,[-1]],34],[[36,[6,35]]],[37,9]],[[[326,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[310,[-1]]],[[310,[-1]]],9],[[[313,[-1]]],[[313,[-1]]],9],[[[317,[-1]]],[[317,[-1]]],9],[[[320,[-1]]],[[320,[-1]]],9],[[[324,[-1]]],[[324,[-1]]],9],[[[310,[-1]],[327,[-1]]],[[199,[-1,198]]],9],[[[317,[-1]],[328,[-1]]],[[199,[-1,198]]],9],[[[324,[-1]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[310,[-1]],[327,[-1]],[329,[-1]]],[[199,[-1,198]]],9],[[[317,[-1]],[328,[-1]],[330,[-1]]],[[199,[-1,198]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[311,[-1]]],9],[[],[[314,[-1]]],9],[[],[[318,[-1]]],9],[[],[[321,[-1]]],9],[[],[[325,[-1]]],9],0,0,[[],7],[[],7],[[],7],[309,[[310,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[316,[[317,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[323,[[324,[-1]]],9],[[],7],[[],7],[[],7],[[309,[311,[-1]]],[[310,[-1]]],9],[[316,[318,[-1]]],[[317,[-1]]],9],[[323,[325,[-1]]],[[324,[-1]]],9],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[311,[-1]]],[],9],[[[314,[-1]]],[],9],[[[318,[-1]]],[],9],[[[321,[-1]]],[],9],[[[325,[-1]]],[],9],[[[310,[-1]]],[],9],[[[313,[-1]]],[],9],[[[317,[-1]]],[],9],[[[320,[-1]]],[],9],[[[324,[-1]]],[],9],0,0,0,0,0,0,0,0,[[[310,[-1]]],[[310,[-1]]],9],[[[313,[-1]]],[[313,[-1]]],9],[[[317,[-1]]],[[317,[-1]]],9],[[[320,[-1]]],[[320,[-1]]],9],[[[324,[-1]]],[[324,[-1]]],9],[[[310,[-1]],-2],[[310,[-1]]],9,[[214,[-1]]]],[[[313,[-1]],-2],[[313,[-1]]],9,[[214,[-1]]]],[[[317,[-1]],-2],[[317,[-1]]],9,[[214,[-1]]]],[[[320,[-1]],-2],[[320,[-1]]],9,[[214,[-1]]]],[[[324,[-1]],-2],[[324,[-1]]],9,[[214,[-1]]]],[[[328,[-1]],[199,[-1,209]]],[[328,[-1]]],9],[[[328,[-1]],[199,[-1,209]]],[[328,[-1]]],9],[[[327,[-1]],[199,[-1,209]]],[[327,[-1]]],9],[[[327,[-1]],[199,[-1,209]]],[[327,[-1]]],9],0,0,0,0,0,0,[[7,7,7,7],309],[[[199,[-1,198]],[199,[-1,198]]],[[327,[-1]]],9],[[7,7,7,7],316],[[[199,[-1,198]]],[[328,[-1]]],9],[[7,7],323],[[[310,[-1]]],[[329,[-1]]],9],[[[317,[-1]]],[[330,[-1]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[310,[-1]]],7,9],[[[313,[-1]]],7,9],[[[317,[-1]]],7,9],[[[320,[-1]]],7,9],[[[324,[-1]]],7,9],0,0,0,0,0,0,[[309,-1],36,190],[[[312,[-1,-2]],-3],36,9,223,190],[[[315,[-1,-2]],-3],36,9,223,190],[[316,-1],36,190],[[[319,[-1,-2]],-3],36,9,223,190],[[[322,[-1,-2]],-3],36,9,223,190],[[323,-1],36,190],[[[326,[-1,-2]],-3],36,9,223,190],[[[327,[-1]],[199,[-1,209]]],[[327,[-1]]],9],[[[327,[-1]],[199,[-1,209]]],[[327,[-1]]],9],[[[310,[-1]]],[[310,[-1]]],9],[[[313,[-1]]],[[313,[-1]]],9],[[[317,[-1]]],[[317,[-1]]],9],[[[320,[-1]]],[[320,[-1]]],9],[[[324,[-1]]],[[324,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[[310,[-1]]],[],[9,215]],[[[313,[-1]]],[],[9,215]],[[[317,[-1]]],[],[9,215]],[[[320,[-1]]],[],[9,215]],[[[324,[-1]]],[],[9,215]],[[[310,[-1]],-2],6,9,[[216,[-1]]]],[[[313,[-1]],-2],6,9,[[216,[-1]]]],[[[317,[-1]],-2],6,9,[[216,[-1]]]],[[[320,[-1]],-2],6,9,[[216,[-1]]]],[[[324,[-1]],-2],6,9,[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[309,201],309],[[316,201],316],[[323,201],323],[[309,225],309],[[316,225],316],[[323,225],323],[[309,5],309],[[316,5],316],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[331,[-2]],-2,332],6,215,[[333,[-1]]]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[334,334],[[[335,[-1]]],[[335,[-1]]],[22,9]],[[[336,[-1,-2]]],[[336,[-1,-2]]],[22,9],[22,223]],[[[337,[-1]]],[[337,[-1]]],[22,9]],[[[338,[-1,-2]]],[[338,[-1,-2]]],[22,9],[22,223]],[339,339],[[[340,[-1]]],[[340,[-1]]],[22,9]],[[[341,[-1,-2]]],[[341,[-1,-2]]],[22,9],[22,223]],[[[342,[-1]]],[[342,[-1]]],[22,9]],[[[343,[-1,-2]]],[[343,[-1,-2]]],[22,9],[22,223]],[344,344],[[[345,[-1]]],[[345,[-1]]],[22,9]],[[[346,[-1,-2]]],[[346,[-1,-2]]],[22,9],[22,223]],[[[347,[-1]]],[[347,[-1]]],[22,9]],[[[348,[-1,-2]]],[[348,[-1,-2]]],[22,9],[22,223]],[349,349],[[[350,[-1]]],[[350,[-1]]],[22,9]],[[[351,[-1,-2]]],[[351,[-1,-2]]],[22,9],[22,223]],[[[352,[-1]]],[[352,[-1]]],[22,9]],[[[353,[-1,-2]]],[[353,[-1,-2]]],[22,9],[22,223]],[[[354,[-1]]],[[354,[-1]]],[22,9]],[[[355,[-1,-2]]],[[355,[-1,-2]]],[22,9],[22,223]],[[[356,[-1]]],[[356,[-1]]],[22,9]],[[[357,[-1,-2]]],[[357,[-1,-2]]],[22,9],[22,223]],[358,358],[[[359,[-1]]],[[359,[-1]]],[22,9]],[[[360,[-1,-2]]],[[360,[-1,-2]]],[22,9],[22,223]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[],[[331,[-1]]],[]],[[],332],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[334]]],188],[-1,[[36,[[336,[-2,-3]]]]],188,9,223],[-1,[[36,[[338,[-2,-3]]]]],188,9,223],[-1,[[36,[339]]],188],[-1,[[36,[[341,[-2,-3]]]]],188,9,223],[-1,[[36,[[343,[-2,-3]]]]],188,9,223],[-1,[[36,[344]]],188],[-1,[[36,[[346,[-2,-3]]]]],188,9,223],[-1,[[36,[[348,[-2,-3]]]]],188,9,223],[-1,[[36,[349]]],188],[-1,[[36,[[351,[-2,-3]]]]],188,9,223],[-1,[[36,[[353,[-2,-3]]]]],188,9,223],[-1,[[36,[[355,[-2,-3]]]]],188,9,223],[-1,[[36,[[357,[-2,-3]]]]],188,9,223],[-1,[[36,[358]]],188],[-1,[[36,[[360,[-2,-3]]]]],188,9,223],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[334,34],[[36,[6,35]]]],[[[336,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[338,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[339,34],[[36,[6,35]]]],[[[341,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[343,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[344,34],[[36,[6,35]]]],[[[346,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[348,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[349,34],[[36,[6,35]]]],[[[351,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[353,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[355,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[[357,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[[358,34],[[36,[6,35]]]],[[[360,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-2,332,215,[[333,[-1]]]],[[],[[335,[-1]]],9],[[],[[337,[-1]]],9],[[],[[340,[-1]]],9],[[],[[342,[-1]]],9],[[],[[345,[-1]]],9],[[],[[347,[-1]]],9],[[],[[350,[-1]]],9],[[],[[352,[-1]]],9],[[],[[354,[-1]]],9],[[],[[356,[-1]]],9],[[],[[359,[-1]]],9],[[332,207],[[30,[[199,[-1,198]]]]],9],0,[[[331,[-1]]],332,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[334,[[0,[[361,[-2,-1]]]]],215,[[333,[-1]]]],[[],7],[[],7],[[],7],[[],7],[339,[[0,[[361,[-2,-1]]]]],215,[[333,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[344,[[0,[[361,[-2,-1]]]]],215,[[333,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[349,[[363,[362,-2,-1]]],215,[[333,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[358,[[363,[364,-2,-1]]],215,[[333,[-1]]]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[335,[-1]]],[],9],[[[337,[-1]]],[],9],[[[340,[-1]]],[],9],[[[342,[-1]]],[],9],[[[345,[-1]]],[],9],[[[347,[-1]]],[],9],[[[350,[-1]]],[],9],[[[352,[-1]]],[],9],[[[354,[-1]]],[],9],[[[356,[-1]]],[],9],[[[359,[-1]]],[],9],[332,5],[332,7],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,[[],[[331,[-1]]],[]],[[],334],[[[337,[-1]]],[[335,[-1]]],9],[[7,[199,[-1,198]]],[[337,[-1]]],9],[[],339],[[[342,[-1]]],[[340,[-1]]],9],[[7,[199,[-1,198]],[199,[-1,198]]],[[342,[-1]]],9],[[],344],[[[347,[-1]]],[[345,[-1]]],9],[[7,[199,[-1,198]],[199,[-1,198]]],[[347,[-1]]],9],[[],332],[[],349],[[[352,[-1]],[354,[-1]],[30,[[356,[-1]]]]],[[350,[-1]]],9],[[[199,[-1,198]]],[[352,[-1]]],9],[[[30,[[199,[-1,198]]]],[199,[-1,198]]],[[354,[-1]]],9],[[[199,[-1,198]]],[[356,[-1]]],9],[[],358],[[[30,[[365,[-1]]]]],[[359,[-1]]],9],0,[[332,207,[199,[-1,198]]],6,9],[[332,207],[[30,[[199,[-1,198]]]]],9],[[334,-1],36,190],[[[336,[-1,-2]],-3],36,9,223,190],[[[338,[-1,-2]],-3],36,9,223,190],[[339,-1],36,190],[[[341,[-1,-2]],-3],36,9,223,190],[[[343,[-1,-2]],-3],36,9,223,190],[[344,-1],36,190],[[[346,[-1,-2]],-3],36,9,223,190],[[[348,[-1,-2]],-3],36,9,223,190],[[349,-1],36,190],[[[351,[-1,-2]],-3],36,9,223,190],[[[353,[-1,-2]],-3],36,9,223,190],[[[355,[-1,-2]],-3],36,9,223,190],[[[357,[-1,-2]],-3],36,9,223,190],[[358,-1],36,190],[[[360,[-1,-2]],-3],36,9,223,190],0,0,[[-1,201,-2,332],-2,[],[]],[[-1,201,[199,[-2,198]],[199,[-2,198]],30],[[6,[[199,[-2,198]],30]]],[],[]],[[[366,[-1]],201,[199,[-1,198]],[199,[-1,198]],30],[[6,[[199,[-1,198]],30]]],9],[[[367,[-1]],201,[199,[-1,198]],[199,[-1,198]],30],[[6,[[199,[-1,198]],30]]],9],[[[368,[-1]],201,[199,[-1,198]],[199,[-1,198]],30],[[6,[[199,[-1,198]],30]]],9],[[[362,[-1]],201,[199,[-1,198]],[199,[-1,198]],30],[[6,[[199,[-1,198]],30]]],9],[[[364,[-1]],201,[199,[-1,198]],[199,[-1,198]],30],[[6,[[199,[-1,198]],30]]],9],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[337,[-1]]],[[337,[-1]]],9],[[[342,[-1]]],[[342,[-1]]],9],[[[347,[-1]]],[[347,[-1]]],9],[[332,-2],332,215,[[333,[-1]]]],[[[352,[-1]]],[[352,[-1]]],9],[[[354,[-1]]],[[354,[-1]]],9],[[[356,[-1]]],[[356,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[349,38],349],[[339,38],339],[[344,38],344],[[339,38],339],[[344,38],344],[[349,5],349],[[334,38],334],[[339,38],339],[[344,38],344],[[349,38],349],[[334,[30,[200]]],334],[[339,[30,[200]]],339],[[344,[30,[200]]],344],[[349,[30,[200]]],349],[[358,[30,[200]]],358],[[334,201],334],[[349,38],349],[[358,[30,[369]]],358],[[334,[30,[370]]],334],[[339,[30,[370]]],339],[[344,38],344],[[349,[30,[370]]],349],[[358,[30,[370]]],358],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[371,-1,[]],[-1,-1,[]],[-1,[[363,[-1,-3,-2]]],372,215,[[333,[-2]]]],[[],7],[-1,-2,[],[]],[[[363,[-1,-3,-2]]],[[363,[-1,-3,-2]]],372,215,[[333,[-2]]]],[[[363,[-1,-3,-2]],201,-3,332],-3,372,215,[[333,[-2]]]],[[[363,[-1,-3,-2]]],[],372,215,[[333,[-2]]]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[[[363,[-1,-3,-2]],197],[[363,[-1,-3,-2]]],372,215,[[333,[-2]]]],0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[370,370],[[[373,[-1]]],[[373,[-1]]],[22,9]],[[[374,[-1,-2]]],[[374,[-1,-2]]],[22,9],[22,223]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[370]]],188],[-1,[[36,[[374,[-2,-3]]]]],188,9,223],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[[370,34],[[36,[6,35]]]],[[[374,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[373,[-1]]],9],0,[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[373,[-1]]],[],9],[370,[[375,[-1]]],9],[201,370],[[[199,[-1,198]]],[[373,[-1]]],9],0,[[370,-1],36,190],[[[374,[-1,-2]],-3],36,9,223,190],[[[373,[-1]]],[[373,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[[[375,[-1]],[199,[-1,198]],[199,[-1,198]]],[[199,[-1,198]]],9],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[369,369],[[[365,[-1]]],[[365,[-1]]],[22,9]],[[[376,[-1,-2]]],[[376,[-1,-2]]],[22,9],[22,223]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[369]]],188],[-1,[[36,[[376,[-2,-3]]]]],188,9,223],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[[369,34],[[36,[6,35]]]],[[[376,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,223]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[365,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[365,[-1]]],[],9],0,0,[369,[[377,[-1]]],9],[[],369],[[[199,[-1,198]]],[[365,[-1]]],9],[[369,-1],36,190],[[[376,[-1,-2]],-3],36,9,223,190],[[[365,[-1]]],[[365,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[[[377,[-1]],[199,[-1,198]],[30,[[365,[-1]]]]],[[6,[[199,[-1,198]],[365,[-1]]]]],9],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[369,201],369],[[369,201],369],[[369,5],369],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[378,[-2,-1]]],[[378,[-2,-1]]],9,[[372,[-1]]]],[[[379,[-2,-1]]],[[379,[-2,-1]]],9,[[372,[-1]]]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[[380,[-3,-2,-4]]]]],188,9,[[372,[-2]]],223],[-1,[[36,[[381,[-3,-2,-4]]]]],188,9,[[372,[-2]]],223],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[378,[-2,-1]]],9,[[372,[-1]]]],[[],[[379,[-2,-1]]],9,[[372,[-1]]]],[[],[[378,[-2,-1]]],9,[[372,[-1]]]],[[],[[379,[-2,-1]]],9,[[372,[-1]]]],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[378,[-2,-1]]],[],9,[[372,[-1]]]],[[[379,[-2,-1]]],[],9,[[372,[-1]]]],[[[378,[-2,-1]]],[],9,[[372,[-1]]]],[[[379,[-2,-1]]],[],9,[[372,[-1]]]],[[[380,[-2,-1,-3]],-4],36,9,[[372,[-1]]],223,190],[[[381,[-2,-1,-3]],-4],36,9,[[372,[-1]]],223,190],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[382,[-1]]],[[382,[-1]]],22],[[[383,[-1]]],[[383,[-1]]],[22,223]],[[[384,[-1]]],[[384,[-1]]],[22,223]],[385,385],[386,386],[387,387],[[[388,[-1]]],[[388,[-1]]],[22,223]],[[[389,[-1]]],[[389,[-1]]],[22,223]],[[[390,[-1]]],[[390,[-1]]],[22,223]],[[[391,[-1]]],[[391,[-1]]],[22,223]],[[[392,[-1]]],[[392,[-1]]],[22,223]],[[[393,[-1]]],[[393,[-1]]],[22,223]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],[[383,[-1]]],[33,223]],[[],[[384,[-1]]],[33,223]],[[],385],[[],386],[[],387],[[],[[388,[-1]]],[33,223]],[[],[[389,[-1]]],[33,223]],[[],[[390,[-1]]],[33,223]],[[],[[391,[-1]]],[33,223]],[[],[[392,[-1]]],[33,223]],[[],[[393,[-1]]],[33,223]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[[382,[-2]]]]],188,394],[-1,[[36,[395]]],188],[-1,[[36,[[396,[-2]]]]],188,394],[-1,[[36,[397]]],188],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[395,395],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],170],[[],170],[[],170],[[],170],[[],170],[[],170],[[],170],0,[[[382,[-1]],34],[[36,[6,35]]],37],[[[383,[-1]],34],[[36,[6,35]]],[37,223]],[[[384,[-1]],34],[[36,[6,35]]],[37,223]],[[212,34],[[36,[6,35]]]],[[212,34],[[36,[6,35]]]],[[395,34],[[36,[6,35]]]],[[[396,[-1]],34],[[36,[6,35]]],37],[[397,34],[[36,[6,35]]]],[[385,34],[[36,[6,35]]]],[[386,34],[[36,[6,35]]]],[[387,34],[[36,[6,35]]]],[[[388,[-1]],34],[[36,[6,35]]],[37,223]],[[[389,[-1]],34],[[36,[6,35]]],[37,223]],[[[390,[-1]],34],[[36,[6,35]]],[37,223]],[[[391,[-1]],34],[[36,[6,35]]],[37,223]],[[[392,[-1]],34],[[36,[6,35]]],[37,223]],[[[393,[-1]],34],[[36,[6,35]]],[37,223]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],0,[-1,[[36,[-2,212]]],[],398],[-1,[[36,[-2,212]]],[],173],[[[383,[-1]]],[[36,[-2,212]]],223,173],[[[384,[-1]]],[[36,[-2,212]]],223,173],[[[388,[-1]]],[[36,[-2,212]]],223,173],[[[389,[-1]]],[[36,[-2,212]]],223,173],[[[390,[-1]]],[[36,[-2,212]]],223,173],[[[391,[-1]]],[[36,[-2,212]]],223,173],[[[392,[-1]]],[[36,[-2,212]]],223,173],[[[393,[-1]]],[[36,[-2,212]]],223,173],0,0,[[45,-1],[[382,[-1]]],[]],[[],[[383,[-1]]],223],[[],[[384,[-1]]],223],[[45,45,45,45,45],395],[-1,[[396,[-1]]],[]],[395,397],[[],[[388,[-1]]],223],[[],[[389,[-1]]],223],[[],[[390,[-1]]],223],[[],[[391,[-1]]],223],[[],[[392,[-1]]],223],[[],[[393,[-1]]],223],[[-1,-2],[[36,[212]]],[],398],[[-1,-2],[[36,[212]]],[],184],[[[383,[-1]],-2],[[36,[212]]],223,184],[[[384,[-1]],-2],[[36,[212]]],223,184],[[[388,[-1]],-2],[[36,[6,212]]],223,184],[[[389,[-1]],-2],[[36,[6,212]]],223,184],[[[390,[-1]],-2],[[36,[6,212]]],223,184],[[[391,[-1]],-2],[[36,[6,212]]],223,184],[[[392,[-1]],-2],[[36,[6,212]]],223,184],[[[393,[-1]],-2],[[36,[6,212]]],223,184],[[[382,[-1]],-2],36,184,190],[[395,-1],36,190],[[[396,[-1]],-2],36,184,190],[[397,-1],36,190],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,45,[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],399],[[],400],0,0,0,0,0,0,0,0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,0,0,0,0,0,0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,[[],399],[[],400],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],399],[[],400],0,0,0,0,0,0,0,0,0,[[],399],[[],400],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[399,399],[399,399],[400,400],[400,400],[-1,-2,[],[]],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[[-1,-2],-2,[],[]],[[399,399],399],[[-1,-2],-2,[],[]],[[400,400],400],[399,399],[-1,-2,[],[]],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[399,399],[400,400],[-1,-2,[],[]],0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[]],[[399,399]],[[399,399]],[[399,399]],[[399,399]],[[400,400]],[[400,400]],[[400,400]],[[400,400]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[]],[[]],[[399,399],6],[[399,399],6],[[400,400],6],[[400,400],6],[-1,[],402],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[-1,[],402],[-1,[],402],[[[11,[7]]],[[199,[-1,210]]],9],[[[11,[7]]],[[199,[-1,210]]],9],[[[11,[7]],7],[[199,[-1,210]]],9],[[[11,[7]],7],[[199,[-1,210]]],9],[7],[[[199,[-1,-2]],7],[[199,[-1,210]]],9,[[401,[-1]]]],[7],[7],[7],[[[199,[-1,-2]],7],[[199,[-1,210]]],9,[[401,[-1]]]],[7],[7],[399,399],[399,201],[399,49],[399,13],[399,403],[399,108],[399,38],[399,404],[399,405],[399,7],[399,406],[399,407],[399,97],[400,405],[400,97],[400,400],[400,108],[400,407],[400,38],[400,7],[400,403],[400,404],[400,13],[400,406],[400,201],[400,49],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[[[18,[-1]],[18,[-1]],7],6,[]],[[[18,[-1]],[18,[-1]],201],6,[]],[[[18,[-1]],[11,[-2]]],6,129,129],[-1,-2,[],[]],[399,399],[400,400],[-1,-2,[],[]],[[399,399],399],[[-1,-2],-2,[],[]],[[400,400],400],[[-1,-2],-2,[],[]],[399,399],[-1,-2,[],[]],[-1,-2,[],[]],[400,400],0,[[[199,[-1,198]]],[],215],0,[[[199,[-1,198]],408],[],9],[[[199,[-1,209]]],[[199,[-1,209]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[15]],7]],[[[16,[[199,[-1,-2]],15]],7],[[199,[-1,-2]]],9,[[409,[-1]]]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[-1,-2,[],[]],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[399,399],[399,399],[400,400],[400,400],[-1,-2,[],[]],0,[[]],[[399,399,399],399],[[400,400,400],400],[[[199,[-1,-2]],-3,-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[]],[[]],[[]],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[]],[[]],[[]],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[]],[[]],[399,410],[399,410],[399,410],[400,410],[400,410],[400,410],[399,399],[400,400],[[[199,[-1,-2]]],[[199,[-1,-2]]],[22,9],[22,[411,[-1]]]],[198,198],[210,210],[209,209],[[[412,[-1]]],[[412,[-1]]],22],[[[18,[-1]]],[[18,[-1]]],22],[48,48],[413,413],[17,17],[[[414,[-1,-2]]],[[414,[-1,-2]]],[22,9],[22,[415,[-1]]]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[[412,[-1]]],[[412,[-2]]],129,129],[[[18,[-1]]],[[18,[-2]]],129,129],[[[18,[5]]],[[18,[-1]]],129],[[399,399],399],[[400,400],400],[-1,-2,[],[]],[399,399],[400,400],[-1,-2,[],[]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[[[199,[-1,198]],7,7],[[199,[-1,198]]],9],[[],399],[[],400],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[36,[399]]],188],[-1,[[36,[400]]],188],[-1,[[36,[[412,[-2]]]]],188,394],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[]],[[[199,[-1,-2]]],[],9,[[409,[-1]]]],[[]],[[]],[[]],[[399,[16,[15]]],[[16,[15]]]],[[400,[16,[15]]],[[16,[15]]]],[[[199,[-1,-2]],[16,[15]]],[[16,[15]]],9,[[409,[-1]]]],[7,[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]]],[[10,[7]]],9,[[409,[-1]]]],0,[[]],[[399,399]],[[399,399]],[[399,399]],[[399,399]],[[400,400]],[[400,400]],[[400,400]],[[400,400]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[]],[[]],[[399,399],6],[[399,399],6],[[400,400],6],[[400,400],6],[-1,[],402],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[-1,[],402],[-1,[],402],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],0,[-1,-2,[],129],[399,-1,129],[400,-1,129],[[],170],[17],[-1,[[199,[-2,-3]]],[[113,[17]]],9,[[409,[-2]]]],[17],[17],[17],[-1,[[199,[-2,-3]]],[[113,[17]]],9,[[409,[-2]]]],[[],399],[[],399],[[],-1,[]],[[],400],[[],400],[[],-1,[]],[[399,399],5],[[400,400],5],[[[412,[-1]],[412,[-1]]],5,[]],[[[18,[-1]],[18,[-1]]],5,[]],[[413,413],5],[[17,17],5],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,209]]],9,[[409,[-1]]]],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],-3],[[199,[-1,209]]],9,[[401,[-1]]],129],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[-1,-2,[],[]],[399,399],[400,400],[-1,-2,[],[]],[-1,-2,[],[]],[399,399],[-1,-2,[],[]],[400,400],0,[[[199,[-1,-2]],7,7],[[199,[-1,-2]]],9,[[409,[-1]]]],[[[199,[-1,210]]],[[199,[-1,198]]],9],[[[199,[-1,209]]],[[199,[-1,198]]],9],[399,399],[399,399],[-1,-2,[],[]],[-1,-2,[],[]],[400,400],[400,400],[[399,34],[[36,[6,35]]]],[[399,34],[[36,[6,35]]]],[[399,34],[[36,[6,35]]]],[[399,34],[[36,[6,35]]]],[[399,34],[[36,[6,35]]]],[[399,34],[[36,[6,35]]]],[[399,34],[[36,[6,35]]]],[[399,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[400,34],[[36,[6,35]]]],[[[199,[-1,-2]],34],[[36,[6,35]]],9,[[409,[-1]]]],[[[199,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,[411,[-1]]]],[[198,34],[[36,[6,35]]]],[[210,34],[[36,[6,35]]]],[[209,34],[[36,[6,35]]]],[[[412,[-1]],34],[[36,[6,35]]],37],[[[18,[-1]],34],[[36,[6,35]]],37],[[[18,[-1]],34],[[36,[6,35]]],37],[[48,34],[[36,[6,35]]]],[[413,34],[[36,[6,35]]]],[[17,34],[[36,[6,35]]]],[[[414,[-1,-2]],34],[[36,[6,35]]],9,[[415,[-1]],[415,[-1]]]],[[[414,[-1,-2]],34],[[36,[6,35]]],[37,9],[37,[415,[-1]]]],[399,399],[400,400],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[399,399],[399,399],[-1,-2,[],[]],[400,400],[400,400],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[407,399],[-1,-1,[]],[-1,[[30,[399]]],416],[97,399],[97,400],[407,400],[-1,-1,[]],[417,400],[-1,[[30,[400]]],416],[-1,-1,[]],[[[414,[-1,-2]]],[[199,[-1,198]]],9,[[415,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[10,[-1]]],[[18,[-1]]],[37,67]],[[[10,[[10,[[10,[-1]]]]]]],[[18,[-1]]],[37,67]],[[[98,[-1]]],[[18,[-1]]],[37,67]],[-1,-1,[]],[[[10,[[10,[-1]]]]],[[18,[-1]]],[37,67]],[[[10,[[10,[[10,[[10,[-1]]]]]]]]],[[18,[-1]]],[37,67]],[[[412,[-1]]],[[18,[-1]]],22],[[[412,[-1]]],[[18,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[10,[7]]],17],[[[16,[13,15]]],17],[[[16,[49,15]]],17],[[[16,[7,15]]],17],[[[16,[7,15]]],17],[-1,-1,[]],[[[199,[-1,198]]],[[414,[-1,-2]]],9,[[415,[-1]]]],[[[10,[97]]],399],[[[10,[97]]],400],[406,399],[406,400],[[[18,[5]]],[[199,[-1,209]]],9],[[[18,[5]]],[[199,[-1,209]]],9],[18],[-1,[[199,[-2,-3]]],[[113,[18]]],9,[[409,[-2]]]],[18],[18],[18],[-1,[[199,[-2,-3]]],[[113,[18]]],9,[[409,[-2]]]],[-1,-2,416,[]],[-1,399,416],[-1,400,416],[400,400],[38,[[30,[399]]]],[38,399],[38,400],[38,400],[38,[[30,[400]]]],[38,399],[38,400],[201,399],[201,[[30,[399]]]],[201,[[30,[400]]]],[201,400],[201,399],[201,400],[-1,[[199,[-2,198]]],[[113,[[18,[38]]]]],9],[[[199,[198]]],[[199,[-1,198]]],9],[405,[[30,[399]]]],[405,[[30,[400]]]],[403,[[30,[399]]]],[403,[[30,[400]]]],[13,[[30,[399]]]],[13,[[30,[400]]]],[407,[[30,[399]]]],[407,[[30,[400]]]],[[]],[199,[[199,[-1,-2]]],215,[[418,[-1]]]],[[]],[[]],[[]],[-1,[[199,[-2,210]]],[[113,[[18,[403]]]]],9],[[],399],[[],400],[[],[[199,[-1,209]]],9],[[],[[199,[-1,198]]],9],[[],[[199,[-1,210]]],9],[[],[[412,[-1]]],129],[[[10,[97]]],399],[[[10,[97]]],400],[[[10,[97]]],399],[[[10,[97]]],400],[[],[[199,[-1,-2]]],9,[[409,[-1]]]],[170,[[36,[399,419]]]],[170,[[36,[400,419]]]],[[170,108],[[36,[399]]]],[[170,108],[[36,[400]]]],[[[199,[-1,198]]],[[414,[-1,-2]]],9,[[415,[-1]]]],[406,[[30,[399]]]],[406,[[30,[400]]]],[108,[[30,[399]]]],[108,[[30,[400]]]],[108,400],[49,[[30,[399]]]],[49,[[30,[400]]]],[97,[[30,[399]]]],[97,[[30,[400]]]],[[[18,[7]]],[[18,[-1]]],420],[[17,-1],[],402],[[-1,-2],[[199,[-3,-4]]],[[113,[17]]],402,9,[[401,[-3]]]],[[17,-1],[],402],[[17,-1],[],402],[[17,-1],[[18,[-1]]],[37,129]],[[-1,-2],[[199,[-3,-4]]],[[113,[17]]],402,9,[[401,[-3]]]],[[7,[199,[-1,210]]],[],[]],[[[199,[-1,-2]],7,[199,[-1,210]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[7,[199,[-1,210]]],[],9],[[7,[199,[-1,210]]],[],9],[[399,399],5],[[400,400],5],[[[199,[-1,198]]],[[30,[[199,[198]]]]],215],[[[199,[-1,198]]],[[30,[[199,[198]]]]],215],[[[199,[-1,198]],[199,[198]]],6,215],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,209]]],9,[[401,[-1]]]],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],-3],[[199,[-1,209]]],9,[[401,[-1]]],402],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,209]]],9,[[401,[-1]]]],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],-3],[[199,[-1,209]]],9,[[401,[-1]]],402],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[399,399],5],[[400,400],5],[[399,399],399],[[-1,-2],-2,[],[]],[[400,400],400],[[-1,-2],-2,[],[]],[[],399],[[],399],[[],400],[[],400],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[[199,[-1,-2]]],199,215,[[418,[-1]]]],[[]],[[]],[[]],[[[199,[-1,198]],-2],6,9,54],[[[199,[-1,198]]],[[199,[-1,210]]],9],[[[199,[-1,209]]],[[199,[-1,210]]],9],[399,[[6,[49,405,407]]]],[399,[[6,[49,405,407]]]],[400,[[6,[49,405,407]]]],[400,[[6,[49,405,407]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[20,[18]]]],[[[199,[-1,-2]]],18,9,[[409,[-1]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[-1,[[182,[-2]]],[],183],[399],[400],[[[199,[-1,209]]],[],9],[[[199,[-1,198]]],[],9],[[[199,[-1,210]]],[],9],[[[412,[-1]]],[],129],[-1,-2,[],[]],[[[199,[-1,-2]]],[],9,[[409,[-1]]]],[399],[400],[[[199,[-1,-2]]],[],9,[[409,[-1]]]],[[[199,[-1,-2]]],[],9,[[401,[-1]]]],[[-1,[199,[-2,-3]]],17,[],9,[[409,[-2]]]],[[17,[199,[-1,-2]]],17,9,[[409,[-1]]]],[399,5],[399,5],[399,5],[400,5],[400,5],[400,5],[399,5],[399,5],[399,5],[400,5],[400,5],[400,5],[399,5],[399,5],[399,5],[400,5],[400,5],[400,5],[399,5],[399,5],[399,5],[400,5],[400,5],[400,5],[[[199,[-1,198]]],5,9],[399,5],[-1,5,[]],[399,5],[399,5],[400,5],[400,5],[-1,5,[]],[400,5],[399,5],[399,5],[-1,5,[]],[399,5],[400,5],[-1,5,[]],[400,5],[400,5],[-1,5,[]],[-1,5,[]],[399,5],[400,5],[[[199,[-1,-2]],7],[[421,[-1,-2]]],9,[[409,[-1]]]],[[399,399],5],[[400,400],5],[-1,-2,[],[]],[399,399],[-1,-2,[],[]],[400,400],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[399,399],[400,400],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[[399,399],399],[[-1,-2],-2,[],[]],[[400,400],400],[[-1,-2],-2,[],[]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[-1,-2,[],[]],[399,399],[400,400],[-1,-2,[],[]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[-1,-2,[],[]],[399,399],[-1,-2,[],[]],[400,400],0,[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,209]]],9,[[401,[-1]]]],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],-3],[[199,[-1,209]]],9,[[401,[-1]]],402],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,209]]],9,[[401,[-1]]]],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],[]],[[[199,[-1,-2]],-3],[[199,[-1,209]]],9,[[401,[-1]]],402],[[],[[199,[-1,209]]],9],[[],[[199,[-1,209]]],9],[[399,399],5],[[400,400],5],0,[[[20,[-1]],-2],[[20,[-3]]],58,[54,58],58],[[399,-2],399,9,[[214,[-1]]]],[[400,-2],400,9,[[214,[-1]]]],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[409,[-1]]],[[214,[-1]]]],[[[199,[-1,209]]],[],[]],[[[199,[-1,-2]],[199,[-1,209]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[[199,[-1,209]]],[],9],[[[199,[-1,209]]],[],9],[[[199,[-1,209]]],[],[]],[[[199,[-1,-2]],[199,[-1,209]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,209]]],[],9],[[[199,[-1,209]]],[],9],[[[199,[-1,198]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[414,[-1,-2]],[414,[-1,-3]]],[[414,[-1,-4]]],9,[[415,[-1]]],[[415,[-1]]],[[415,[-1]]]],[[]],[[399,399],399],[[399,399],399],[[399,399],399],[[-1,-2],-2,[],[]],[[400,400],400],[[400,400],400],[[-1,-2],-2,[],[]],[[400,400],400],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[7],[[[199,[-1,-2]],7],[[199,[-1,-2]]],9,[[401,[-1]]]],[7],[7],[7,6],[[[199,[-1,-2]],7],[[6,[[199,[-1,-2]],[199,[-1,210]]]]],9,[[401,[-1]]]],[7,6],[7,6],[[],399],[[],399],[[],-1,[]],[[],-1,[]],[[],399],[[],400],[[],400],[[],400],[[],-1,[]],[[],-1,[]],[[]],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[7],[[[199,[-1,-2]],7],[[199,[-1,-2]]],9,[[401,[-1]]]],[7],[7],[[]],[[-1,-2],-2,[],[]],[[399,399],399],[[399,399],399],[[399,399],399],[[400,400],400],[[400,400],400],[[-1,-2],-2,[],[]],[[400,400],400],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[7],[[[199,[-1,-2]],7],[[199,[-1,-2]]],9,[[401,[-1]]]],[7],[7],[7,6],[[[199,[-1,-2]],7],[[6,[[199,[-1,-2]],[199,[-1,210]]]]],9,[[401,[-1]]]],[7,6],[7,6],[[],399],[[],399],[[],-1,[]],[[],-1,[]],[[],400],[[],400],[[],399],[[],399],[[],399],[[],-1,[]],[[],-1,[]],[[],-1,[]],[[],400],[[],400],[[],400],[[],-1,[]],0,[[]],[[399,399]],[[399,399]],[[399,399]],[[399,399]],[[400,400]],[[400,400]],[[400,400]],[[400,400]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[[[414,[-1,-2]],[414,[-1,-2]]],[[414,[-1,-2]]],9,[[415,[-1]]]],[[399,399,399],399],[[-1,-2,-2],-2,[],[]],[[-1,-2,-2],-2,[],[]],[[400,400,400],400],[[399,399],6],[[399,399],6],[[400,400],6],[[400,400],6],[-1,[],402],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[-1,[],402],[-1,[],402],[[],170],[[],170],[[],170],[[],170],[[],399],[[],399],[[],400],[[],400],[[]],[399],[399],[400],[400],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[[],399],[[],399],[[],400],[[],400],[[],399],[[],399],[[],400],[[],400],[[],[[199,[-1,-2]]],9,[[411,[-1]]]],[[[16,[-1,15]],[16,[7,15]]],[[412,[-1]]],[]],[[[16,[-1,15]],17],[[18,[-1]]],[]],[[[422,[-1]],-2],[[423,[-1,-2]]],424,425],[[[10,[7]]],17],[[[421,[-1,-2]]],30,9,[[409,[-1]]]],[17,7],[[],399],[[],400],[[7,7],[[199,[-1,198]]],9],[17],[-1,[[199,[-2,-3]]],[[113,[17]]],9,[[401,[-2]]]],[17],[17],[17,[[18,[-1]]],[37,129]],[-1,[[199,[-2,-3]]],[[113,[17]]],9,[[401,[-2]]]],[[[199,[-1,198]]],[[199,[-1,198]]],9],0,[[399,399],[[30,[426]]]],[[400,400],[[30,[426]]]],[[-1,-2],-2,[],[]],[[399,399],399],[[400,400],400],[[-1,-2],-2,[],[]],[[[199,[-1,198]],38],[[199,[-1,198]]],9],[[399,403],399],[[399,403],399],[[-1,403],-2,[],[]],[[-1,403],-2,[],[]],[[400,403],400],[[400,403],400],[[],413],[[],413],[[],413],[-1,399,183],[-1,399,183],[-1,400,183],[-1,400,183],[[48,-1],-2,425,163],[[48,-1],399,425],[[48,-1],400,425],[[-1,48],[[199,[-2,198]]],[[113,[17]]],9],[[17,48,-1],[[18,[-2]]],425,129],[[-1,48],[[414,[-2,-3]]],[[113,[17]]],9,[[415,[-2]]]],[[-1,48],[[199,[-2,198]]],[[113,[17]]],9],[[[199,[-1,198]],48],[[199,[-1,198]]],9],[[[20,[-1]]],-1,[]],[[[20,[-1]]],[[30,[-1]]],[]],[399,399],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[400,400],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[399,399]],[[399,399]],[[399,399]],[[399,399]],[[400,400]],[[400,400]],[[400,400]],[[400,400]],[[399,399],6],[[399,399],6],[[400,400],6],[[400,400],6],[[7,7]],[[[199,[-1,-2]],7,7],[[199,[-1,-2]]],9,[[409,[-1]]]],[[7,7]],[[7,7]],[[7,7]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[17],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[409,[-1]]],427],[17],[17],[17],[[[414,[-1,-2]],-3,-4],[[414,[-1,-4]]],9,[[415,[-1]]],[[113,[17]]],[[415,[-1]]]],[399,399],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[400,400],[[[423,[-1,-2]]],-1,[424,129],425],[[48,-1],[[423,[-2,-1]]],425,[129,424]],[[7,[199,[-1,210]]],[],[]],[[[199,[-1,-2]],7,[199,[-1,210]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[7,[199,[-1,210]]],[],9],[[7,[199,[-1,210]]],[],9],[[7,[199,[-1,210]]],[],[]],[[[199,[-1,-2]],7,[199,[-1,210]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[7,[199,[-1,210]]],[],9],[[7,[199,[-1,210]]],[],9],[[7,[199,[-1,210]]],[],[]],[[[199,[-1,-2]],7,[199,[-1,210]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[7,[199,[-1,210]]],[],9],[[7,[199,[-1,210]]],[],9],[[399,-1],36,190],[[400,-1],36,190],[[[412,[-1]],-2],36,184,190],[[[18,[-1]]],[[412,[-1]]],[37,67]],[[399,-1],36,190],[[400,-1],36,190],[[399,-1],36,190],[[400,-1],36,190],[428,6],[[[199,[-1,198]],5],[[199,[-1,198]]],9],[[],17],[[[199,[-1,-2]]],17,9,[[409,[-1]]]],[[],17],[[],17],[[],17],[[[414,[-1,-2]]],17,9,[[415,[-1]]]],0,0,[399,399],[399,399],[-1,-2,[],[]],[399,399],[400,400],[400,400],[-1,-2,[],[]],[400,400],[399,399],[-1,-2,[],[]],[-1,-2,[],[]],[400,400],[[[199,[-1,198]]],[[199,[-1,198]]],9],[399,[[6,[399,399]]]],[-1,[[6,[-2,-2]]],[],[]],[-1,[[6,[-2,-2]]],[],[]],[400,[[6,[400,400]]]],[-1,-2,[],[]],[399,399],[400,400],[-1,-2,[],[]],[[[10,[[11,[7]]]]]],[[[199,[-1,-2]],[10,[[11,[7]]]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[199,[-1,-2]],[10,[[11,[7]]]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,-2]],7],[[199,[-1,-2]]],9,[[409,[-1]]]],[[]],[[399,399]],[[399,399]],[[399,399]],[[399,399]],[[400,400]],[[400,400]],[[400,400]],[[400,400]],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[[199,[-1,-2]],[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[[399,399],6],[[399,399],6],[[400,400],6],[[400,400],6],[-1,[],402],[[[199,[-1,-2]],-3],[[199,[-1,-2]]],9,[[401,[-1]]],402],[-1,[],402],[-1,[],402],[[]],[-1,399,183],[-1,399,183],[-1,400,183],[-1,400,183],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[401,[-1]]]],[[]],[[]],[7],[[[199,[-1,-2]],7],[[199,[-1,-2]]],9,[[401,[-1]]]],[7],[7],[[7,7]],[[[199,[-1,-2]],7,7],[[199,[-1,-2]]],9,[[409,[-1]]]],[[7,7]],[[7,7]],[[7,7]],[[[414,[-1,-2]]],[[414,[-1,-3]]],9,[[415,[-1]]],[[415,[-1]]]],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[399,399],[-1,-2,[],[]],[400,400],[-1,-2,[],[]],[[[199,[-1,198]]],[[199,[-1,198]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[399,[[10,[97]]]],[400,[[10,[97]]]],[399,406],[400,406],[[[199,[-1,-2]]],18,9,[[409,[-1]]]],[399,399],[399,399],[-1,-2,[],[]],[-1,-2,[],[]],[400,400],[400,400],[[]],[399,399],[400,400],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[[]],[[]],[[]],[400,400],[399,[[30,[38]]]],[399,38],[400,[[30,[38]]]],[400,38],[400,38],[399,38],[400,38],[399,201],[399,[[30,[201]]]],[400,[[30,[201]]]],[400,201],[399,201],[400,201],[[[199,[-1,198]]],[[199,[198]]],9],[399,[[30,[405]]]],[400,[[30,[405]]]],[399,[[30,[403]]]],[400,[[30,[403]]]],[399,[[30,[13]]]],[400,[[30,[13]]]],[399,[[30,[407]]]],[400,[[30,[407]]]],[399,[[10,[97]]]],[400,[[10,[97]]]],[399,[[10,[97]]]],[400,[[10,[97]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[399,399],[399,399],[400,400],[-1,-2,[],[]],[400,400],[[],45],[[],45],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[-1,45,[]],[399,[[30,[406]]]],[400,[[30,[406]]]],[399,[[30,[108]]]],[400,[[30,[108]]]],[400,108],[399,[[30,[49]]]],[400,[[30,[49]]]],[399,[[30,[97]]]],[400,[[30,[97]]]],[[399,399],426],[[400,400],426],[[]],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[[]],[[]],[[]],[-1,[[186,[-2]]],[],183],[399,399],[399,399],[-1,-2,[],[]],[-1,-2,[],[]],[400,400],[400,400],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[70,[[36,[399]]]],[70,[[36,[399]]]],[-1,[[36,[-2]]],[],[]],[70,[[36,[400]]]],[70,[[36,[400]]]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[[[199,[-1,-2]]],[[199,[-1,-2]]],9,[[409,[-1]]]],[[[199,[-1,-2]],7],[[199,[-1,-2]]],9,[[409,[-1]]]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[399],[400],[[[199,[-1,-2]]],[],215,[[418,[-1]]]],[[400,400,429,45],[[36,[6,45]]]],0,0,[[[199,[-1,198]],7],[[199,[-1,198]]],9],[[[199,[-1,198]],7],[[199,[-1,198]]],9],[[[199,[-1,198]],7],[[6,[[199,[-1,198]],[199,[-1,198]]]]],9],[[[199,[-1,198]],7],[[6,[[199,[-1,198]],[199,[-1,198]]]]],9],[[399,-2],6,9,[[216,[-1]]]],[[400,-2],6,9,[[216,[-1]]]],[[[199,[-1,-2]],-3],6,9,[[409,[-1]]],[[216,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],399],[[],400],[17],[-1,[[199,[-2,-3]]],[[113,[17]]],9,[[401,[-2]]]],[17],[17],[-1,[[18,[-2]]],[[113,[17]]],[37,129]],[-1,[[199,[-2,-3]]],[[113,[17]]],9,[[401,[-2]]]],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,198]],7],[[199,[-1,198]]],9],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,198]],7],[[199,[-1,198]]],9],[[[199,[-1,198]]],[[199,[-1,198]]],9],0,0,0,0,0,0,0,0,0,0,0,0,[[],5],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],6],[[]],[[]],[[]],[[],45],[49,6],[[],6],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[430,[-1]]],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[[[430,[-1]],34],[[36,[6,35]]],37],[-1,-1,[]],[[[430,[-1]],-1],[[30,[[199,[-2,198]]]]],[],9],[[],7],[-1,-2,[],[]],[[[430,[-1]]],5,[]],[[[430,[-1]]],7,[]],[[],[[430,[-1]]],[]],[[[430,[-1]],-1,[199,[-2,198]]],6,[],9],[[[430,[-1]],-1],[[30,[[199,[-2,198]]]]],[],9],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[[[199,[-1,198]],[199,[-1,198]]],[[199,[-1,198]]],9],[[[199,[-1,198]],7],[[199,[-1,198]]],9],[[[199,[-1,198]],[10,[7]]],[[199,[-1,198]]],9],[[[199,[-1,198]],7,7,7,5],[[199,[-1,198]]],9],[[[199,[-1,198]],[10,[7]],[10,[7]],[10,[7]],5],[[199,[-1,198]]],9],[[[199,[-1,198]],[199,[-1,198]],[30,[[199,[-1,198]]]],31],[[199,[-1,198]]],9],[[[199,[-1,198]],[199,[-1,198]],[30,[[199,[-1,198]]]],31],[[199,[-1,198]]],9],[[[199,[-1,198]],[199,[-1,198]],[30,[[199,[-1,198]]]],32],[[199,[-1,198]]],9],[[[199,[-1,198]],[199,[-1,198]],[30,[[199,[-1,198]]]],32],[[199,[-1,198]]],9],[[[199,[-1,198]],[199,[-1,210]]],[[199,[-1,198]]],9],[[[199,[-1,198]],7,7,7,7],[[199,[-1,198]]],9],[[[199,[-1,198]],7,7,7,7],[[6,[[199,[-1,198]],[199,[-1,210]]]]],9],[[[199,[-1,198]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[199,[-1,198]]],9],[[[199,[-1,198]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[6,[[199,[-1,198]],[199,[-1,210]]]]],9],[[[199,[-1,198]],[10,[7]],431],[[199,[-1,198]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[7],[[]],[[[10,[7]]]],[[]],[[]],[[]],[[[11,[7]]]],[[[11,[7]],7]],[7],[7],[[7,7,7,5]],[[7,7,7,5]],[[[10,[7]],[10,[7]],[10,[7]],5]],[[[10,[7]],[10,[7]],[10,[7]],5]],0,0,[[[16,[15]],7]],[[]],[17],[[]],[[[18,[5]]]],[[],[[20,[[18,[5]]]]]],[[]],[[]],[[]],[[7,7]],[17],[[],17],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[7,7]],[[],[[20,[[18,[5]]]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[15]],7]],[[]],[[]],[[]],[31,31],[32,32],[431,431],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[30,31]],[[30,31],[[432,[-1]]],[]],[[30,31]],[[30,31],[[433,[-1]]],[]],[[30,32]],[[30,32],[[432,[-1]]],[]],[[30,32]],[[30,32],[[433,[-1]]],[]],[[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[[]],[[]],0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[]],[[]],[17],[[]],[[]],[[]],[[]],[[31,34],[[36,[6,35]]]],[[32,34],[[36,[6,35]]]],[[431,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[18],[[]],[17],[7],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[31,-1],6,85],[[32,-1],6,85],0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[7],[7],[[[16,[15]],7]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[[]],[[]],[18],[17],[7],[[]],[[]],[[]],[[]],[[],[[20,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[7,6],[[]],[7],[[]],[7],[7,6],[[]],[[]],[[]],[17],[[7,7]],[17],[7],[7],[7],[[],17],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[]],[[]],[[]],[7],[[7,7]],[[],[[20,[18]]]],[[]],[[]],[17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[20,[18]]]],[[]],[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[7,6],[[7,7,7,7]],[[7,7,7,7],[[40,[-1]]],[]],[[7,7,7,7],[[42,[-1]]],[]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[43,[-1]]],[]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[-1]]],[]],[[]],[7],[[]],[7],[7,6],[[]],[[]],[[]],[30,[[433,[-1]]],9],[[],[[42,[-1]]],9],[[],[[40,[-1]]],9],[[],[[44,[-1]]],9],[[],[[43,[-1]]],9],[30,[[432,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],7],31],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]],7],32],[[[10,[7]],[10,[7]],[10,[7]]],431],[17],0,0,0,0,0,0,0,[38],[[17,48]],[[]],[[]],[[]],[[7,7]],[17],[7],[7],[7],[5],[[],17],[[]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[]],0,0,0,[[]],[[]],[[]],[7],[[7,7]],[[]],[[],[[20,[18]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[[[10,[7]],431]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[17],[[7,7,7,7,7],7],[[7,7,7,7],7],[[7,7,7,7,7,7],7],[[7,7,7,7,7],7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[434,[-1]]],[[435,[-1]]],9],[-1,6,[]],[[[434,[-1]]],[[436,[-1]]],9],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[[437,[-1]]],[[436,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[438,[-1,-2,-3,-4,-5,-6]],-4,-5,-6],[[443,[[442,[-1,-6,-4,-5,439,439,439,[440,[-2,-3]],[47,[441,15]]]]]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],0,[[[438,[-1,-2,-3,-4,-5,-6]],7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],[446,446],[[-1,-2],6,[],[]],[[],446],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[[[438,[-1,-2,-3,-4,-5,-6]],[16,[15]]],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[[438,[-1,-2,-3,-4,-5,-6]],-7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,447],[[[443,[-1]],[52,[155,15]],[52,[155,15]]],[],448],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[438,[-1,-2,-3,-4,-5,-6]],7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[[438,[-1,-2,-3,-4,-5,-6]]],446,215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[438,[-1,-2,-3,-4,-5,-6]],5],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],0,0,0,0,[[[438,[-1,-2,-3,-4,-5,-6]],-7,-8],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,449,449],[[[438,[-1,-2,-3,-4,-5,-6]],-7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[450,58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,451],[[[438,[-1,-2,-3,-4,-5,-6]],-7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[450,58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,[451,452]],[[[438,[-1,-2,-3,-4,-5,-6]],-7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[450,58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,451],[[[438,[-1,-2,-3,-4,-5,-6]],-7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[450,58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,[451,452]],[170,[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],[[453,454,455,456],457],[[-2,-3],[[458,[-3]]],215,[[333,[-1]]],[]],[[],446],[[[199,[-1,198]],[199,[-1,198]],[199,[-1,210]]],[[434,[-1]]],9],[[[52,[155,15]],7,7],[[459,[-1]]],[]],[[[52,[155,15]],7,7,[30,[7]]],[[460,[-1]]],[]],[[[199,[-1,198]],[199,[-1,198]],[199,[-1,198]]],[[437,[-1]]],9],[[[438,[-1,-2,-3,-4,-5,-6]],7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445],[[-2,-3,201,332],-2,215,[[333,[-1]]],[[361,[-2,-1]]]],0,0,0,[[[438,[-1,-2,-3,-4,-5,-6]],-7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,461],[[[459,[-1]],446],6,[]],[[[460,[-1]],446],6,[]],[[[460,[-1]],[16,[15]],446],6,58],[[-1,7,462],5,[]],[[457,7,462],5],[446,5],[[-1,-2],[[458,[-3]]],[],[],[]],[[-1,-2],-3,[],[],[]],[446,6],0,0,[-1,-2,[],[]],0,[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[438,[-1,-2,-3,-4,-5,-6]],-7],6,215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,441],[[[438,[-1,-2,-3,-4,-5,-6]],-7],[[438,[-1,-2,-3,-4,-5,-6]]],215,[58,59],[58,59],[[333,[-1]],444],[[361,[-4,-1]]],445,213],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[463,-1],463,441],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[463,464],[[],463],[[-1,7,462],[[16,[465,15]]],[]],[[464,7,462],[[16,[465,15]]]],[[466,7,462],[[16,[465,15]]]],[[467,7,462],[[16,[465,15]]]],[465,465],[[-1,-2],6,[],[]],[[],463],[[-1,7],[[36,[6,468]]],[]],[[[439,[-1]],7],[[36,[6,468]]],398],[[[469,[-1]],7],[[36,[6,468]]],213],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[439,[-1]]],6,[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[[465,465],5],[[468,34],[[36,[6,35]]]],[[465,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-2,[[439,[-1]]],398,[[470,[-1]],58]],[[-1,170,170],[[469,[-1]]],[]],[[453,454,455],466],[7,467],[[-1,7],[[36,[-2,468]]],[],[]],[[[439,[-1]],7],[[36,[-1,468]]],398],[[[469,[-1]],7],[[36,[-2,468]]],213,398],[[-1,7,-2],[[36,[6,468]]],[],[]],[[[439,[-1]],7,-1],[[36,[6,468]]],398],[[[469,[-1]],7,-2],[[36,[6,468]]],213,398],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,7],[],[]],[[],471],[[],472],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[[[473,[-1]]],6,[]],[7,6],[7,6],[7,6],[7,6],[[-1,7],6,[]],[[474,7],6],[[472,7],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],6,[],[]],[[-1,475],6,[]],[[[473,[-1]],-1],6,58],[[476,-1],6,444],[[474,475],6],[[471,-1],6,444],[[472,475],6],[-2,[[473,[-1]]],[58,59],[[477,[-1]]]],[170,476],[170,474],[[],472],[[-1,170,7],[[36,[[16,[201,15]],45]]],[]],[[474,170,7],[[36,[[16,[201,15]],45]]]],[[472,170,7],[[36,[[16,[201,15]],45]]]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,6,[]],[478,6],[479,6],[480,6],[481,6],[482,6],[[[483,[-1]]],6,9],[[[484,[-1]]],6,9],[475,475],[[-1,-2],6,[],[]],[[],478],[[],479],[[],480],[[],481],[[],482],[[],[[483,[-1]]],[33,9]],[[],[[484,[-1]]],[33,9]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],[7,6],0,0,[[475,34],[[36,[6,35]]]],[[201,7],45],0,[-1,-1,[]],[[[485,[-1]]],486,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],478],[[],479],[[],480],[[],481],[[],482],[[],[[483,[-1]]],9],[[[199,[-1,198]],[199,[-1,210]]],[[435,[-1]]],9],[[45,45,45],475],[[],[[484,[-1]]],9],[[[199,[-1,198]]],[[436,[-1]]],9],0,0,0,0,[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[-1,486],475,[]],[[478,486],475],[[479,486],475],[[480,6,486],475],[[481,6,486],475],[[482,486],475],[[[483,[-1]],[435,[-1]],486],475,9],[[[484,[-1]],486],475,9],[-1,201,[]],[478,201],[479,201],[481,201],[482,201],[[[483,[-1]]],201,9],[[[484,[-1]]],201,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[483,[-1]],7],[[483,[-1]]],9],0,0,[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],487],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[7,6],[-1,-1,[]],[-1,-1,[]],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[[],487],[170,488],[[488,7],488],[487,6],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[[488,170],488],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[487,201,7,488],475],[487,201],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,6,[]],[[-1,489,455],6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[490,490],[453,453],[455,455],[454,454],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[462,6],[7,6],[7,6],[7,6],[7,6],[7,6],0,0,[[453,453],5],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,170,453,454,455],[[30,[7]]],[]],[[462,170,453,454,455],[[30,[7]]]],[[-1,170,7,453,455],[[30,[201]]],[]],[[462,170,7,453,455],[[30,[201]]]],[[453,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[453,-1],6,85],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[475,15]],[16,[[6,[475,201]],15]]],490],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,6,[]],[-1,6,[]],[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,6],[491,6],[7,6],[7,6],0,0,[[492,34],[[36,[6,35]]]],[[493,34],[[36,[6,35]]]],[-1,-1,[]],[-1,-1,[]],[[[485,[-1]]],493,[]],[-1,-1,[]],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[446,[30,[7]]],491],[[],493],0,[[-1,493],6,[]],[[491,493],6],[[-1,493],6,[]],[[491,493],6],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,50,[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[-1,[[30,[-2]]],[],[]],[[-1,492],6,[]],[[491,492],6],[[-1,492],6,[]],[[491,492],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,6,[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,6],[-1,-1,[]],[[],7],[-1,-2,[],[]],[98,[[494,[-1,-4,-2,-3]]],215,[58,58],58,[[333,[-1]],[495,[-2,-3]],58,22]],[[[494,[-1,-4,-2,-3]],[47,[159,15]],-4],[[16,[[458,[-3]],15]]],215,58,58,[[333,[-1]],[495,[-2,-3]],58,22]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,50,[]],[-1,[[30,[-2]]],[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"TchTensor",1090],[8,"TchElement",1090],[3,"NdArrayTensor",1172],[8,"FloatNdArrayElement",1172],[15,"bool"],[15,"tuple"],[15,"usize"],[3,"AutodiffTensor",10990],[8,"Backend",9546],[15,"array"],[3,"Range",10991],[4,"LibTorchDevice",1090],[15,"i64"],[3,"Gradients",952],[3,"Global",10992],[3,"Vec",10993],[3,"Shape",7985],[3,"Data",7985],[4,"NdArrayDevice",1172],[4,"Reader",7985],[3,"LibTorch",13],[8,"Clone",10994],[3,"NdArray",13],[3,"Autodiff",13],[3,"Fusion",13],[3,"Wgpu",13],[8,"GraphicsApi",1228],[8,"FloatElement",1228],[8,"IntElement",1228],[4,"Option",10995],[3,"ConvOptions",9611],[3,"ConvTransposeOptions",9611],[8,"Default",10996],[3,"Formatter",10997],[3,"Error",10997],[4,"Result",10998],[8,"Debug",10997],[15,"f32"],[4,"WgpuDevice",1228],[3,"MaxPool1dWithIndices",9611],[8,"FusionBackend",10999],[3,"MaxPool1dBackward",9611],[3,"MaxPool2dWithIndices",9611],[3,"MaxPool2dBackward",9611],[3,"String",11000],[8,"FusionOps",10999],[3,"Box",11001],[4,"Distribution",7985],[15,"u64"],[3,"TypeId",11002],[3,"Node",11003],[3,"Arc",11004],[3,"Ops",974],[8,"FnOnce",11005],[3,"UnTracked",974],[3,"OpsPrep",974],[8,"Backward",974],[8,"Send",11006],[8,"Sync",11006],[3,"Tracked",974],[3,"Graph",11007],[4,"Requirement",11008],[3,"Init",974],[4,"OpsKind",974],[8,"Element",11009],[8,"Fn",11005],[8,"Copy",11006],[3,"TchShape",1090],[4,"Device",11010],[3,"Tensor",11011],[4,"c_void",11012],[3,"Rc",11013],[3,"OwnedArcRepr",11014],[3,"IxDynImpl",11015],[3,"Dim",11016],[3,"ArrayBase",11014],[4,"Backend",11017],[3,"Vulkan",1228],[3,"Metal",1228],[3,"OpenGl",1228],[3,"Dx11",1228],[3,"Dx12",1228],[3,"WebGpu",1228],[3,"AutoGraphicsApi",1228],[8,"Hasher",11018],[3,"DeviceId",10999],[3,"WgpuStorage",1434],[3,"StorageHandle",11019],[3,"WgpuResource",1434],[4,"BindingResource",11020],[3,"WorkGroup",1434],[4,"WgpuAutotuneKey",1434],[3,"SimpleMemoryManagement",11021],[3,"WgpuServer",1434],[3,"MutexComputeChannel",11022],[3,"ComputeClient",11023],[15,"u8"],[15,"slice"],[3,"Handle",11024],[8,"MemoryManagement",11025],[3,"StorageId",11019],[4,"WgpuResourceKind",1434],[3,"DynamicKernel",1434],[8,"DynamicKernelSource",1627],[3,"StaticKernel",1434],[8,"StaticKernelSource",1627],[3,"Device",11020],[15,"u32"],[3,"Queue",11020],[3,"Buffer",11020],[3,"AdapterInfo",11017],[3,"SourceTemplate",1627],[8,"Into",11026],[3,"WgpuTensor",2284],[8,"WgpuElement",11027],[3,"DynamicKernelSettings",1627],[3,"ContiguousRaw",1627],[3,"BinaryElemwiseRaw",1627],[3,"BinaryElemwiseInplaceRaw",1627],[3,"CastRaw",1627],[3,"UnaryRaw",1627],[3,"UnaryInplaceRaw",1627],[3,"UnaryScalarRaw",1627],[3,"UnaryScalarInplaceRaw",1627],[3,"Conv2d",1855],[3,"ConvTranspose2d",1855],[3,"MatmulAutotuneOperationSet",1891],[8,"AutotuneOperation",11028],[8,"Element",7985],[3,"MatmulAutotuneKey",1891],[3,"MatmulMemCoalescingRaw",1891],[3,"MatmulNaiveRaw",1891],[3,"MatmulTiling2DUnpaddedRaw",1984],[3,"MatmulTiling2Dvec4Raw",2004],[3,"MatmulTiling2DVec4LhsRaw",2023],[3,"AvgPool2dRaw",2042],[3,"AvgPool2dBackwardRaw",2042],[3,"MaxPool2d",2042],[3,"MaxPool2dWithIndicesBackward",2042],[3,"MaxPool2dWithIndices",2042],[3,"MeanDimAutotuneOperationSet",2136],[3,"SumDimAutotuneOperationSet",2136],[3,"ReduceAutotuneKey",2136],[3,"RecursiveSumRaw",2136],[3,"ReductionDimRaw",2136],[3,"ReductionArgsRaw",2136],[3,"ReductionDimSharedMemoryRaw",2136],[8,"Config",2315],[4,"ConfigError",2315],[3,"Path",11029],[8,"AsRef",11026],[3,"Error",11030],[3,"FixBatchStrategy",2344],[3,"DataLoaderBuilder",2344],[8,"DataLoader",2344],[8,"Dataset",2480],[3,"Progress",2344],[4,"Message",2344],[8,"DataLoaderIterator",2344],[3,"BatchDataLoader",2344],[3,"MultiThreadDataLoader",2344],[3,"DatasetIterator",2480],[8,"Sized",11006],[8,"BatchStrategy",2344],[8,"Batcher",2478],[3,"StdRng",11031],[3,"PathBuf",11029],[3,"SqliteDatasetStorage",2480],[3,"HuggingfaceDatasetLoader",2480],[15,"str"],[3,"SqliteDataset",2480],[4,"ImporterError",2480],[8,"DeserializeOwned",11032],[4,"SqliteDatasetError",2480],[3,"SqliteDatasetWriter",2480],[4,"Error",11033],[3,"Error",11034],[3,"Writable",11035],[3,"Error",11036],[4,"Error",11037],[3,"InMemDataset",2480],[3,"IntoFallible",11038],[8,"Iterator",11039],[8,"Serialize",11040],[8,"Error",11041],[3,"Convert",11038],[3,"MNISTItem",2699],[8,"Deserializer",11032],[3,"MNISTDataset",2699],[8,"Serializer",11040],[3,"ShuffledDataset",2750],[3,"SamplerDataset",2750],[3,"ComposedDataset",2750],[3,"MapperDataset",2750],[8,"Mapper",2750],[3,"PartialDataset",2750],[4,"GradientClipping",2851],[3,"Float",7985],[3,"Tensor",7985],[4,"GradientClippingConfig",2851],[15,"f64"],[3,"ConstantLr",2903],[3,"NoamLrSchedulerConfig",2928],[3,"NoamLrScheduler",2928],[3,"Param",2978],[3,"ConstantRecord",2978],[3,"ParamId",2978],[3,"RunningState",2978],[3,"Bool",7985],[3,"Int",7985],[8,"Module",2978],[4,"RecorderError",7581],[8,"FileRecorder",7581],[8,"ModuleMapper",2978],[8,"AutodiffBackend",9546],[8,"ModuleVisitor",2978],[3,"DropoutConfig",3155],[3,"Dropout",3155],[3,"EmbeddingConfig",3155],[3,"Embedding",3155],[3,"EmbeddingRecord",3155],[3,"EmbeddingRecordItem",3155],[8,"PrecisionSettings",7581],[3,"GELU",3155],[4,"Initializer",3155],[3,"LinearConfig",3155],[3,"Linear",3155],[3,"LinearRecord",3155],[3,"LinearRecordItem",3155],[3,"BatchNormConfig",3155],[3,"BatchNorm",3155],[3,"BatchNormRecord",3155],[3,"BatchNormRecordItem",3155],[3,"GroupNormConfig",3155],[3,"GroupNorm",3155],[3,"GroupNormRecord",3155],[3,"GroupNormRecordItem",3155],[3,"LayerNormConfig",3155],[3,"LayerNorm",3155],[3,"LayerNormRecord",3155],[3,"LayerNormRecordItem",3155],[4,"PaddingConfig1d",3155],[4,"PaddingConfig2d",3155],[3,"PositionalEncodingConfig",3155],[3,"PositionalEncoding",3155],[3,"PositionalEncodingRecord",3155],[3,"PositionalEncodingRecordItem",3155],[3,"ReLU",3155],[3,"GateController",3155],[3,"GateControllerRecord",3155],[3,"GateControllerRecordItem",3155],[3,"LstmConfig",3155],[3,"Lstm",3155],[3,"LstmRecord",3155],[3,"LstmRecordItem",3155],[3,"Unfold4dConfig",3155],[3,"Unfold4d",3155],[3,"MhaCache",4334],[3,"MultiHeadAttentionConfig",4334],[3,"MultiHeadAttention",4334],[3,"MultiHeadAttentionRecord",4334],[3,"MultiHeadAttentionRecordItem",4334],[3,"MhaInput",4334],[3,"MhaOutput",4334],[3,"GeneratePaddingMask",4334],[3,"TensorCache",4543],[3,"Conv1dConfig",4560],[3,"Conv1d",4560],[3,"Conv1dRecord",4560],[3,"Conv1dRecordItem",4560],[3,"Conv2dConfig",4560],[3,"Conv2d",4560],[3,"Conv2dRecord",4560],[3,"Conv2dRecordItem",4560],[3,"ConvTranspose1dConfig",4560],[3,"ConvTranspose1d",4560],[3,"ConvTranspose1dRecord",4560],[3,"ConvTranspose1dRecordItem",4560],[3,"ConvTranspose2dConfig",4560],[3,"ConvTranspose2d",4560],[3,"ConvTranspose2dRecord",4560],[3,"ConvTranspose2dRecordItem",4560],[3,"GruConfig",5093],[3,"Gru",5093],[3,"GruRecord",5093],[3,"GruRecordItem",5093],[3,"BinaryCrossEntropyLossConfig",5208],[3,"BinaryCrossEntropyLoss",5208],[3,"BinaryCrossEntropyLossRecord",5208],[3,"BinaryCrossEntropyLossRecordItem",5208],[3,"CrossEntropyLossConfig",5208],[3,"CrossEntropyLoss",5208],[3,"CrossEntropyLossRecord",5208],[3,"CrossEntropyLossRecordItem",5208],[3,"MSELoss",5208],[4,"Reduction",5208],[3,"AdaptiveAvgPool1dConfig",5500],[3,"AdaptiveAvgPool1d",5500],[3,"AdaptiveAvgPool2dConfig",5500],[3,"AdaptiveAvgPool2d",5500],[3,"AvgPool1dConfig",5500],[3,"AvgPool1d",5500],[3,"AvgPool2dConfig",5500],[3,"AvgPool2d",5500],[3,"MaxPool1dConfig",5500],[3,"MaxPool1d",5500],[3,"MaxPool2dConfig",5500],[3,"MaxPool2d",5500],[3,"TransformerDecoderConfig",5855],[3,"TransformerDecoder",5855],[3,"TransformerDecoderRecord",5855],[3,"TransformerDecoderRecordItem",5855],[3,"TransformerDecoderLayer",5855],[3,"TransformerDecoderLayerRecord",5855],[3,"TransformerDecoderLayerRecordItem",5855],[3,"TransformerEncoderConfig",5855],[3,"TransformerEncoder",5855],[3,"TransformerEncoderRecord",5855],[3,"TransformerEncoderRecordItem",5855],[3,"TransformerEncoderLayer",5855],[3,"TransformerEncoderLayerRecord",5855],[3,"TransformerEncoderLayerRecordItem",5855],[3,"PositionWiseFeedForwardConfig",5855],[3,"PositionWiseFeedForward",5855],[3,"PositionWiseFeedForwardRecord",5855],[3,"PositionWiseFeedForwardRecordItem",5855],[3,"TransformerDecoderInput",5855],[3,"TransformerEncoderInput",5855],[3,"TransformerDecoderAutoregressiveCache",5855],[3,"TransformerEncoderAutoregressiveCache",5855],[3,"GradientsAccumulator",6455],[3,"GradientsParams",6455],[8,"AutodiffModule",2978],[3,"AdaGradConfig",6455],[3,"AdaGradState",6455],[3,"AdaGradStateItem",6455],[3,"LRDecayState",6455],[3,"LRDecayStateItem",6455],[3,"AdamConfig",6455],[3,"AdamState",6455],[3,"AdamStateItem",6455],[3,"AdaptiveMomentumState",6455],[3,"AdaptiveMomentumStateItem",6455],[3,"AdamWConfig",6455],[3,"AdamWState",6455],[3,"AdamWStateItem",6455],[3,"AdaptiveMomentumWState",6455],[3,"AdaptiveMomentumWStateItem",6455],[3,"RMSPropConfig",6455],[3,"RMSPropState",6455],[3,"RMSPropStateItem",6455],[3,"SquareAvgState",6455],[3,"SquareAvgStateItem",6455],[3,"CenteredState",6455],[3,"CenteredStateItem",6455],[3,"RMSPropMomentumState",6455],[3,"RMSPropMomentumStateItem",6455],[3,"SgdConfig",6455],[3,"SgdState",6455],[3,"SgdStateItem",6455],[8,"Optimizer",6455],[3,"RMSProp",6455],[3,"OptimizerAdaptor",7276],[3,"Sgd",6455],[3,"MomentumState",7387],[3,"AdaGrad",6455],[3,"Adam",6455],[3,"AdamW",6455],[3,"MomentumConfig",7387],[3,"WeightDecayConfig",7298],[15,"never"],[8,"SimpleOptimizer",6455],[3,"WeightDecayState",7298],[3,"WeightDecayStateItem",7298],[3,"WeightDecay",7298],[3,"MomentumStateItem",7387],[3,"Momentum",7387],[4,"AdaptorRecord",7481],[4,"AdaptorRecordV1",7481],[4,"AdaptorRecordItem",7481],[4,"AdaptorRecordItemV1",7481],[3,"ParamSerde",7581],[3,"BinBytesRecorder",7581],[3,"NamedMpkBytesRecorder",7581],[3,"FullPrecisionSettings",7581],[3,"HalfPrecisionSettings",7581],[3,"DoublePrecisionSettings",7581],[3,"BinFileRecorder",7581],[3,"BinGzFileRecorder",7581],[3,"JsonGzFileRecorder",7581],[3,"PrettyJsonFileRecorder",7581],[3,"NamedMpkGzFileRecorder",7581],[3,"NamedMpkFileRecorder",7581],[8,"Deserialize",11032],[3,"BurnMetadata",7581],[3,"BurnRecord",7581],[3,"BurnRecordNoItem",7581],[8,"Record",7581],[3,"bf16",7985],[3,"f16",7985],[8,"Numeric",7985],[8,"ElementConversion",7985],[15,"i32"],[15,"isize"],[15,"i16"],[15,"u16"],[15,"i8"],[3,"T",7985],[8,"BasicOps",7985],[4,"FpCategory",11042],[8,"TensorKind",7985],[3,"DataSerialize",7985],[4,"Precision",7985],[3,"NamedTensor",7985],[8,"NamedDims",7985],[8,"ToPrimitive",11043],[4,"Sample",11044],[8,"BasicAutodiffOps",7985],[3,"ParseFloatError",11045],[8,"FromPrimitive",11043],[3,"DimIter",7985],[4,"DistributionSamplerKind",7985],[3,"DistributionSampler",7985],[8,"SampleUniform",11046],[8,"RngCore",11047],[4,"Ordering",11048],[8,"ReshapeArgs",7985],[3,"PrintOptions",7985],[3,"ValidationOptions",11049],[3,"TensorContainer",9572],[3,"UnfoldOptions",9611],[3,"Conv1dBackward",9611],[3,"Conv2dBackward",9611],[3,"ClassificationOutput",10004],[3,"AccuracyInput",10493],[3,"LossInput",10493],[3,"RegressionOutput",10004],[3,"LearnerBuilder",10004],[3,"AsyncCheckpointer",10225],[3,"FullEventProcessor",11050],[8,"CheckpointingStrategy",10225],[3,"LearnerComponentsMarker",11051],[3,"Learner",10004],[8,"Display",10997],[8,"LrScheduler",2896],[3,"TrainingInterrupter",10004],[8,"EarlyStoppingStrategy",10004],[8,"LearnerComponents",11051],[8,"MetricLogger",10388],[8,"Adaptor",10493],[8,"Metric",10493],[8,"Numeric",10493],[4,"Aggregate",10772],[4,"Direction",10772],[4,"Split",10772],[4,"StoppingCondition",10004],[3,"MetricEarlyStoppingStrategy",10004],[3,"TrainOutput",10004],[3,"ValidEpoch",10004],[3,"TrainEpoch",10004],[8,"MetricsRenderer",10903],[3,"EventStoreClient",10772],[3,"ComposedCheckpointingStrategyBuilder",10225],[3,"ComposedCheckpointingStrategy",10225],[4,"CheckpointingAction",10225],[3,"MetricCheckpointingStrategy",10225],[3,"KeepLastNCheckpoints",10225],[4,"CheckpointerError",10225],[3,"FileCheckpointer",10225],[8,"Checkpointer",10225],[3,"InMemoryLogger",10388],[3,"InMemoryMetricLogger",10388],[3,"AsyncLogger",10388],[3,"FileMetricLogger",10388],[3,"MetricEntry",10493],[3,"FileLogger",10388],[8,"Logger",10388],[3,"CpuTemperature",10493],[3,"CpuUse",10493],[3,"CUDAMetric",10493],[3,"LearningRateMetric",10493],[3,"CpuMemory",10493],[3,"AccuracyMetric",10493],[3,"LossMetric",10493],[3,"LearnerItem",11052],[3,"MetricMetadata",10493],[3,"NumericMetricState",10732],[3,"FormatOptions",10732],[4,"Event",10772],[3,"MetricsUpdate",10772],[3,"SelectedMetricsRenderer",10903],[4,"MetricState",10903],[3,"TrainingProgress",10903],[3,"MultiDevicesTrainStep",10972],[8,"TrainStep",10004],[8,"Kernel",1434],[6,"WgpuHandle",1434],[3,"KernelSettings",1627],[6,"Result",2480],[13,"KaimingUniform",4323],[13,"KaimingNormal",4323],[13,"XavierUniform",4323],[13,"XavierNormal",4323],[13,"Uniform",4323],[13,"Normal",4323],[13,"Constant",4323],[3,"RMSPropMomentum",6455],[8,"Recorder",7581],[8,"ElementPrecision",7985],[8,"ElementRandom",7985],[8,"Dim",7985],[8,"TensorOps",9611],[8,"ModuleOps",9611],[8,"BoolTensorOps",9611],[8,"ActivationOps",9611],[8,"IntTensorOps",9611],[8,"ValidStep",10004],[13,"NoImprovementSince",10224],[8,"LoggerBackend",10388],[8,"EventStore",10772]]},\
"burn_autodiff":{"doc":"Burn Autodiff","t":"DLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOLLLLLLLLLGDLLLLLLLLLLLLLIDDEDQDNDNKFLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLFFLLLLLL","n":["Autodiff","abs","ad_enabled","adaptive_avg_pool1d","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","arange","argmax","argmin","avg_pool1d","avg_pool2d","avg_pool2d_backward","backward","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_from_inner","bool_inner","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_data","bool_to_device","borrow","borrow_mut","cat","clone","clone_into","conv1d","conv2d","conv_transpose1d","conv_transpose2d","cos","default","detach","device","div","div_scalar","embedding","embedding_backward","empty","equal","equal_elem","erf","exp","fmt","from","from_data","from_full_precision","from_inner","gather","gelu","grad","grad_remove","grad_replace","grads","greater","greater_elem","greater_equal","greater_equal_elem","inner","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_from_inner","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_inner","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max","int_max_dim","int_max_dim_with_indices","int_mean","int_mean_dim","int_min","int_min_dim","int_min_dim_with_indices","int_mul","int_mul_scalar","int_neg","int_ones","int_repeat","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_data","int_to_device","int_zeros","into","into_data","into_int","is_require_grad","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max_dim","max_dim_with_indices","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","min_dim","min_dim_with_indices","mul","mul_scalar","name","neg","ones","ops","powf","random","recip","relu","reshape","scatter","seed","select","select_assign","set_require_grad","shape","sin","slice","slice_assign","sqrt","sub","sub_scalar","sum","sum_dim","swap_dims","sync","tanh","testgen_ad_abs","testgen_ad_adaptive_avg_pool1d","testgen_ad_adaptive_avg_pool2d","testgen_ad_add","testgen_ad_aggregation","testgen_ad_avg_pool1d","testgen_ad_avg_pool2d","testgen_ad_broadcast","testgen_ad_cat","testgen_ad_complex","testgen_ad_conv1d","testgen_ad_conv2d","testgen_ad_conv_transpose1d","testgen_ad_conv_transpose2d","testgen_ad_cos","testgen_ad_cross_entropy_loss","testgen_ad_div","testgen_ad_erf","testgen_ad_exp","testgen_ad_gather_scatter","testgen_ad_gelu","testgen_ad_log","testgen_ad_log1p","testgen_ad_mask","testgen_ad_matmul","testgen_ad_max_pool1d","testgen_ad_max_pool2d","testgen_ad_maxmin","testgen_ad_mul","testgen_ad_multithread","testgen_ad_neg","testgen_ad_powf","testgen_ad_recip","testgen_ad_relu","testgen_ad_reshape","testgen_ad_select","testgen_ad_sin","testgen_ad_slice","testgen_ad_softmax","testgen_ad_sqrt","testgen_ad_sub","testgen_ad_tanh","testgen_ad_transpose","testgen_all","testgen_gradients","testgen_module_backward","to_data","to_device","to_full_precision","to_owned","try_from","try_into","type_id","vzip","zeros","GradID","Gradients","borrow","borrow_mut","consume","from","get","into","new","register","remove","try_from","try_into","type_id","vzip","Backward","Init","Ops","OpsKind","OpsPrep","State","Tracked","Tracked","UnTracked","UnTracked","backward","binary","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast_shape","finish","finish","fmt","from","from","from","from","from","from","into","into","into","into","into","into","new","new","node","parents","prepare","prepare","state","stateful","stateless","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_different_backend","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"burn_autodiff"],[239,"burn_autodiff::grads"],[254,"burn_autodiff::ops"],[329,"burn_tensor::tensor::ops::alias"],[330,"burn_tensor::tensor::backend::base"],[331,"burn_tensor::tensor::ops::alias"],[332,"burn_tensor::tensor::ops::alias"],[333,"burn_tensor::tensor::shape"],[334,"burn_tensor::tensor::data"],[335,"burn_common::reader"],[336,"core::clone"],[337,"core::option"],[338,"burn_tensor::tensor::ops::modules::base"],[339,"burn_tensor::tensor::ops::modules::base"],[340,"core::fmt"],[341,"core::fmt"],[342,"burn_tensor::tensor::data"],[343,"core::any"],[344,"alloc::sync"],[345,"core::ops::function"],[346,"core::marker"],[347,"core::marker"]],"d":["Enable auto-differentiation on a backend.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Gradients module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Operation module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gradient identifier.","Gradients container used during the backward pass.","","","Consumes the gradients for a given tensor.","Returns the argument unchanged.","Gets a grad tensor from the container.","Calls <code>U::from(self)</code>.","Creates a new gradients container.","Register a grad tensor in the container.","Removes a grad tensor from the container.","","","","","Trait for all operations.","Init operation tag.","Operation containing its parent nodes, its own node and …","Enum used before finishing tracked and untracked …","Operation in preparation.","Associated type to compute the backward pass.","Tracked operation tag.","Tracked operation preparation.","Untracked operation tag.","Untracked operation preparation.","The backward pass.","Execute a binary operation during the backward step.","","","","","","","","","","","","","Make sure the grad tensor has the given shape.","Finish the preparation of an untracked operation and …","Finish the preparation of a tracked operation and returns …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>OpsPrep</code>.","Constructs a new <code>Ops</code>.","The node.","Parents nodes.","Prepare the backward ops.","Prepare the backward ops.","The state.","Prepare an operation that requires a state during the …","Prepare a stateless operation.","","","","","","","","","","","","","","","","","","","Execute a unary operation during the backward step.","Execute a unary operation during the backward step where …","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,42,0,47,0,47,42,0,46,45,40,47,41,38,46,45,40,47,41,38,0,41,41,38,46,45,40,47,41,38,46,45,40,47,41,38,41,38,38,38,42,42,38,41,41,46,45,40,47,41,38,46,45,40,47,41,38,46,45,40,47,41,38,0,0,46,45,40,47,41,38],"f":[0,[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[],4],[[[0,[-1]],5],[[0,[-1]]],3],[[[0,[-1]],[6,[5]]],[[0,[-1]]],3],[[[0,[-1]],[0,[-1]]],[],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[2,[[1,[-1]]]]],3],[[[8,[5]],[9,[[1,[-1]]]]],[[10,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5],[[10,[-1]]],3],[[[2,[[1,[-1]]]],5],[[10,[-1]]],3],[[[0,[-1]],5,5,5,4],[[0,[-1]]],3],[[[0,[-1]],[6,[5]],[6,[5]],[6,[5]],4],[[0,[-1]]],3],[[[0,[-1]],[0,[-1]],[6,[5]],[6,[5]],[6,[5]],4],[[0,[-1]]],3],[[[0,[-1]]],11,3],[[[13,[[12,[-1]]]],5],[[12,[-1]]],3],[[[12,[-1]]],[[9,[-1]]],3],[[14,[9,[-1]]],[[12,[-1]]],3],[[[12,[-1]],[12,[-1]]],[[12,[-1]]],3],[[[15,[4]],[9,[-1]]],[[12,[-1]]],3],[12,[[12,[[1,[-1]]]]],3],[[[12,[[1,[-1]]]]],12,3],[[[12,[-1]]],[[16,[[15,[4]]]]],3],[[[12,[-1]]],[],3],[[[12,[-1]]],[[10,[-1]]],3],[[[12,[-1]]],[[12,[-1]]],3],[[[12,[-1]],14],[[12,[-1]]],3],[[[12,[-1]]],14,3],[[[12,[-1]],[6,[[8,[5]]]]],[[12,[-1]]],3],[[[12,[[1,[-1]]]],[6,[[8,[5]]]],[12,[[1,[-1]]]]],[[12,[[1,[-1]]]]],3],[[5,5]],[[[12,[-1]]],[[16,[[15,[4]]]]],3],[[[12,[-1]],[9,[-1]]],[[12,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[[2,[[1,[-1]]]]]],5],[[2,[[1,[-1]]]]],3],[[[1,[-1]]],[[1,[-1]]],17],[[-1,-2],18,[],[]],[[[0,[-1]],[0,[-1]],[19,[[0,[-1]]]],20],[[0,[-1]]],3],[[[0,[-1]],[0,[-1]],[19,[[0,[-1]]]],20],[[0,[-1]]],3],[[[0,[-1]],[0,[-1]],[19,[[0,[-1]]]],21],[[0,[-1]]],3],[[[0,[-1]],[0,[-1]],[19,[[0,[-1]]]],21],[[0,[-1]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[],[[1,[-1]]],22],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[2,[[1,[-1]]]]],3],[[[0,[-1]],[10,[-1]]],[[0,[-1]]],3],[[[0,[-1]],[0,[-1]],[10,[-1]]],[[0,[-1]]],3],[[14,[9,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[1,[-1]],23],24,25],[-1,-1,[]],[[[15,[[7,[-1]]]],[9,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[26,[[1,[-1]]]]]]],[[2,[[1,[-1]]]]],3],[[],[[0,[-1]]],3],[[5,[2,[[1,[-1]]]],[10,[-1]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[0,[-1]],11],19,3],[[[0,[-1]],11],19,3],[[[0,[-1]]],18,3],0,[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[12,[-1]]],3],[[[0,[-1]]],[],3],[[]],[[[10,[-1]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]],5],[[10,[-1]]],3],[[[10,[-1]],5],[[10,[-1]]],3],[[[13,[[10,[-1]]]],5],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[9,[[1,[-1]]]]],3],[[[10,[-1]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[14,[[10,[-1]]],3],[[[10,[-1]],[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]]],[[12,[-1]]],3],[[15,[9,[[1,[-1]]]]],[[10,[-1]]],3],[10,[[10,[[1,[-1]]]]],3],[[14,[9,[[1,[-1]]]]],[[10,[-1]]],3],[[5,[10,[-1]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]],[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]],[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]]],[[12,[-1]]],3],[[[10,[[1,[-1]]]]],10,3],[[[10,[-1]]],[[16,[15]]],3],[[]],[[[10,[-1]],[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]],[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]]],[[12,[-1]]],3],[[[10,[-1]],[12,[-1]]],[],3],[[[10,[-1]],[12,[-1]],[10,[-1]]],[],3],[[]],[5],[5,18],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]],5],[[10,[-1]]],3],[[]],[5],[5,18],[[[10,[-1]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[14,[9,[[1,[-1]]]]],[[10,[-1]]],3],[[[10,[-1]],5,5],[[10,[-1]]],3],[[[10,[-1]],14],[[10,[-1]]],3],[[5,[10,[-1]],[10,[-1]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]],5,[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]],5,[10,[-1]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],14,3],[[[10,[-1]],[6,[[8,[5]]]]],[[10,[-1]]],3],[[[10,[-1]],[6,[[8,[5]]]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]],[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],3],[[[10,[-1]],5],[[10,[-1]]],3],[[5,5]],[[[10,[-1]]],[[16,[15]]],3],[[[10,[-1]],[9,[[1,[-1]]]]],[[10,[-1]]],3],[[14,[9,[[1,[-1]]]]],[[10,[-1]]],3],[-1,-2,[],[]],[[[2,[[1,[-1]]]]],[[16,[[15,[[7,[-1]]]]]]],3],[[[2,[[1,[-1]]]]],[],3],[[[2,[[1,[-1]]]]],4,3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[12,[-1]]],3],[[[2,[[1,[-1]]]],[12,[-1]],[7,[-1]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[12,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5],[[18,[[2,[[1,[-1]]]],[10,[-1]]]]],3],[[[0,[-1]],5,5,5,5],[[0,[-1]]],3],[[[0,[-1]],5,5,5,5],[[27,[[1,[-1]]]]],3],[[[0,[-1]],5,5,5,5,[0,[-1]],[10,[-1]]],[[28,[[1,[-1]]]]],3],[[[0,[-1]],[6,[5]],[6,[5]],[6,[5]],[6,[5]]],[[0,[-1]]],3],[[[0,[-1]],[6,[5]],[6,[5]],[6,[5]],[6,[5]]],[[29,[[1,[-1]]]]],3],[[[0,[-1]],[6,[5]],[6,[5]],[6,[5]],[6,[5]],[0,[-1]],[10,[-1]]],[[30,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5],[[18,[[2,[[1,[-1]]]],[10,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[2,[[1,[-1]]]]],3],[[],31],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[14,[9,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,[[[2,[[1,[-1]]]],32],[[2,[[1,[-1]]]]],3],[[14,33,[9,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],14],[[2,[[1,[-1]]]]],3],[[5,[2,[[1,[-1]]]],[10,[-1]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[34,18],[[[2,[[1,[-1]]]],5,[10,[-1]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5,[10,[-1]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],14,3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[8,[5]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[8,[5]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[7,[-1]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],5,5],[[2,[[1,[-1]]]]],3],[[],18],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[[1,[-1]]]]],[[16,[[15,[[7,[-1]]]]]]],3],[[[2,[[1,[-1]]]],[9,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[26,[[1,[-1]]]]]]],3],[-1,-2,[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,36,[]],[-1,-2,[],[]],[[14,[9,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[11,[37,[0]]]],[-1,-1,[]],[[11,[0,[-1]]],19,3],[-1,-2,[],[]],[[[37,[0]]],11],[[11,[37,[0]]],18],[[11,[0,[-1]]],19,3],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,36,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[-1,38,11],18,[]],[[[6,[[19,[[37,[0]]]]]],[37,[0]],11,-1,-2],18,39,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[14],[[[41,[-2,-1,-3,40]]],[[0,[-1]]],3,[[42,[-1]]],[17,43,44,25]],[[[41,[-2,-1,-3,45]],-3],[[0,[-1]]],3,[[42,[-1]]],[17,43,44,25]],[[[38,[-1]],23],24,25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[6,[[19,[[37,[0]]]]]],[37,[0]],-1],[[38,[-1]]],[]],0,0,[[-1,[6,[[37,[0]]]],[6,[0]]],[[41,[-1,-2]]],[],[]],[[-1,[6,[[37,[0]]]],[6,[0]]],[[41,[-1,-2]]],[],[]],0,[[[41,[-2,-1,-3,46]]],[[47,[-2,-1,-3]]],3,[[42,[-1]]],[17,43,44,25]],[[[41,[-2,-1,18,46]]],[[0,[-1]]],3,[[42,[-1]]]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,[[35,[-2]]],[],[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[-1,36,[]],[[[6,[[19,[[37,[0]]]]]],[37,[0]],11,-1],18,39],[[[6,[[19,[[37,[0]]]]]],[37,[0]],11,-1],18,39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Autodiff",0],[6,"FloatTensor",329],[8,"Backend",330],[15,"bool"],[15,"usize"],[15,"array"],[6,"FloatElem",329],[3,"Range",331],[6,"Device",329],[6,"IntTensor",329],[3,"Gradients",239],[6,"BoolTensor",329],[3,"Vec",332],[3,"Shape",333],[3,"Data",334],[4,"Reader",335],[8,"Clone",336],[15,"tuple"],[4,"Option",337],[3,"ConvOptions",338],[3,"ConvTransposeOptions",338],[8,"Default",339],[3,"Formatter",340],[6,"Result",340],[8,"Debug",340],[6,"FullPrecisionBackend",329],[3,"MaxPool1dWithIndices",338],[3,"MaxPool1dBackward",338],[3,"MaxPool2dWithIndices",338],[3,"MaxPool2dBackward",338],[3,"String",341],[15,"f32"],[4,"Distribution",334],[15,"u64"],[4,"Result",342],[3,"TypeId",343],[3,"Arc",344],[3,"Ops",254],[8,"FnOnce",345],[3,"UnTracked",254],[3,"OpsPrep",254],[8,"Backward",254],[8,"Send",346],[8,"Sync",346],[3,"Tracked",254],[3,"Init",254],[4,"OpsKind",254]]},\
"burn_candle":{"doc":"Burn Candle Backend","t":"DEDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Candle","CandleDevice","CandleTensor","Cpu","Cuda","abs","ad_enabled","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","argmax","argmin","avg_pool2d","avg_pool2d_backward","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_device","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone","clone_into","clone_into","clone_into","conv1d","conv2d","conv_transpose1d","conv_transpose2d","cos","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","device","div","div_scalar","drop","drop","drop","empty","eq","equal","equal_elem","equivalent","erf","exp","fmt","fmt","fmt","from","from","from","from","from_data","from_data","from_full_precision","gather","gelu","greater","greater_elem","greater_equal","greater_equal_elem","init","init","init","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_mean_dim","int_mul","int_mul_scalar","int_ones","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_device","int_zeros","into","into","into","into_data","into_int","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean_dim","mul","mul_scalar","name","new","powf","random","recip","relu","reshape","scatter","seed","select","select_assign","shape","sin","slice","slice_assign","sqrt","sub","sub_scalar","sum","sum_dim","swap_dims","tanh","to_device","to_full_precision","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"burn_candle"],[194,"burn_tensor::tensor::ops::alias"],[195,"burn_tensor::tensor::ops::alias"],[196,"burn_tensor::tensor::ops::alias"],[197,"burn_tensor::tensor::data"],[198,"burn_common::reader"],[199,"core::ops::range"],[200,"core::clone"],[201,"core::option"],[202,"burn_tensor::tensor::ops::modules::base"],[203,"burn_tensor::tensor::ops::modules::base"],[204,"core::fmt"],[205,"core::fmt"],[206,"burn_tensor::tensor::ops::alias"],[207,"candle_core::tensor"],[208,"burn_tensor::tensor::data"],[209,"core::any"]],"d":["Tensor backend that uses the candle crate for executing …","The device type for the candle backend. The device struct …","A tensor that uses the candle backend.","CPU device.","Cuda device with the given index. The index is the index …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Creates a new tensor from data and a device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Create a new tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,16,16,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,17,1,16,17,1,1,1,1,1,16,17,1,16,17,1,1,1,1,1,1,16,1,16,17,1,16,17,1,1,1,1,16,17,1,16,1,1,16,1,1,1,16,17,1,16,16,17,1,17,1,1,1,1,1,1,1,1,16,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,17,1,16,17,1,16,17,1,16,17,1,16,17],"f":[0,0,0,0,0,[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[],3],[[[2,[[1,[-1,-2]]]],[5,[4]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],4],[[7,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],4],[[7,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[5,[4]],[5,[4]],[5,[4]],3],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]],[5,[4]],[5,[4]],[5,[4]],3],[[2,[[1,[-1,-2]]]]],0,0],[[[9,[[8,[[1,[-1,-2]]]]]],4],[[8,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]]],[[10,[[1,[-1,-2]]]]],0,0],[[11,[10,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]],[8,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[12,[3]],[10,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]]],[[13,[[12,[3]]]]],0,0],[[[8,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]],11],[[8,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]]],11,0,0],[[[8,[[1,[-1,-2]]]],[5,[[14,[4]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[8,[[1,[-1,-2]]]],[5,[[14,[4]]]],[8,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[4,4]],[[[8,[[1,[-1,-2]]]],[10,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[[2,[[1,[-1,-2]]]]]],4],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[1,[-1,-2]]],[[1,[-1,-2]]],[0,15],[0,15]],[16,16],[[[17,[-1]]],[[17,[-1]]],[15,0]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[-1,-2],18,[],[]],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]],[19,[[2,[[1,[-1,-2]]]]]],20],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]],[19,[[2,[[1,[-1,-2]]]]]],20],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]],[19,[[2,[[1,[-1,-2]]]]]],21],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]],[19,[[2,[[1,[-1,-2]]]]]],21],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[],[[1,[-1,-2]]],[0,22],[0,22]],[[],16],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[[[17,[-1]]],[[10,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[4,18],[4,18],[4,18],[[11,[10,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[16,16],3],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[-1,-2],3,[],[]],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[1,[-1,-2]],23],24,[0,25],[0,25]],[[16,23],24],[[[17,[-1]],23],24,[25,0]],[-1,-1,[]],[-1,-1,[]],[26,16],[-1,-1,[]],[[[12,[-1]],[10,[[1,[-1,-2]]]]],[[17,[-1]]],0,0],[[[12,[-1]],16],[[17,[-1]]],0],[[[2,[[27,[[1,[-1,-2]]]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[4,[2,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[],4],[[],4],[[],4],[[[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],4],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],4],[[7,[[1,[-1,-2]]]]],0,0],[[[9,[[7,[[1,[-1,-2]]]]]],4],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]]],[[10,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[11,[10,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[12,[[28,[[1,[-1,-2]]]]]],[10,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[4,[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]]],[[13,[[12,[[28,[[1,[-1,-2]]]]]]]]],0,0],[[[7,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[8,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[8,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],4],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[11,[10,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],11],[[7,[[1,[-1,-2]]]]],0,0],[[4,[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],4,[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],4,[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]]],11,0,0],[[[7,[[1,[-1,-2]]]],[5,[[14,[4]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[5,[[14,[4]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],[28,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[[7,[[1,[-1,-2]]]],4],[[7,[[1,[-1,-2]]]]],0,0],[[4,4]],[[[7,[[1,[-1,-2]]]],[10,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[[11,[10,[[1,[-1,-2]]]]],[[7,[[1,[-1,-2]]]]],0,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[[13,[[12,[-1]]]]],0],[[[17,[-1]]],[[7,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[8,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[8,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[8,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[29,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[5,[4]],[5,[4]],[5,[4]],[5,[4]],[2,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]]],[[30,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],4],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[],31],[32,[[17,[-1]]],0],[[[2,[[1,[-1,-2]]]],33],[[2,[[1,[-1,-2]]]]],0,0],[[11,34,[10,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],11],[[2,[[1,[-1,-2]]]]],0,0],[[4,[2,[[1,[-1,-2]]]],[7,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[35,18],[[[2,[[1,[-1,-2]]]],4,[7,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],4,[7,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[17,[-1]]],11,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[5,[[14,[4]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[5,[[14,[4]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],[6,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],4],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]],4,4],[[2,[[1,[-1,-2]]]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[1,[-1,-2]]]]],0,0],[[[17,[-1]],[10,[[1,[-1,-2]]]]],[[17,[-1]]],0,0],[[[2,[[1,[-1,-2]]]]],[[2,[[27,[[1,[-1,-2]]]]]]],0,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,[[36,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Candle",0],[6,"FloatTensor",194],[15,"bool"],[15,"usize"],[15,"array"],[6,"FloatElem",194],[6,"IntTensor",194],[6,"BoolTensor",194],[3,"Vec",195],[6,"Device",194],[3,"Shape",196],[3,"Data",197],[4,"Reader",198],[3,"Range",199],[8,"Clone",200],[4,"CandleDevice",0],[3,"CandleTensor",0],[15,"tuple"],[4,"Option",201],[3,"ConvOptions",202],[3,"ConvTransposeOptions",202],[8,"Default",203],[3,"Formatter",204],[6,"Result",204],[8,"Debug",204],[4,"Device",205],[6,"FullPrecisionBackend",194],[6,"IntElem",194],[3,"MaxPool2dWithIndices",202],[3,"MaxPool2dBackward",202],[3,"String",206],[3,"Tensor",207],[15,"f32"],[4,"Distribution",197],[15,"u64"],[4,"Result",208],[3,"TypeId",209]]},\
"burn_common":{"doc":"Burn Common Library","t":"AAAAAQIDLLKLLLLLKLLKLFKLLLLLDLLLLLLLLLIQIDLLLLLLLLLLLLLLKLLLFLLFLLLLLLLLLLLLLNENILLLLLKLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["benchmark","id","rand","reader","stub","Args","Benchmark","BenchmarkResult","borrow","borrow_mut","execute","fmt","fmt","from","into","median_duration","name","new","num_samples","prepare","run","run_benchmark","sync","to_string","try_from","try_into","type_id","vzip","IdGenerator","borrow","borrow_mut","from","generate","into","try_from","try_into","type_id","vzip","Rng","Seed","SeedableRng","StdRng","as_rngcore","borrow","borrow_mut","clone","clone_into","eq","equivalent","fill","fill_bytes","fmt","from","from_entropy","from_rng","from_rng","from_seed","from_seed","gen","gen_bool","gen_random","gen_range","gen_ratio","get_seeded_rng","into","next_u32","next_u64","sample","sample_iter","seed_from_u64","to_owned","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","Concrete","Reader","Sync","SyncReader","borrow","borrow_mut","from","into","map","read","read","read_sync","try_from","try_into","type_id","vzip","Mutex","RwLock","ThreadId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","from","hash","into","into","into","lock","new","new","read","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write"],"q":[[0,"burn_common"],[5,"burn_common::benchmark"],[28,"burn_common::id"],[38,"burn_common::rand"],[77,"burn_common::reader"],[93,"burn_common::stub"],[134,"core::fmt"],[135,"core::fmt"],[136,"alloc::string"],[137,"alloc::vec"],[138,"core::result"],[139,"core::any"],[140,"rand_core"],[141,"rand::rng"],[142,"core::marker"],[143,"core::fmt"],[144,"rand::distributions::uniform"],[145,"rand::distributions::uniform"],[146,"rand::distributions::distribution"],[147,"alloc::boxed"],[148,"core::option"],[149,"core::fmt"],[150,"spin::mutex"],[151,"spin::rwlock"],[152,"spin"]],"d":["Module for benchmarking any executable part","Id module contains types for unique identifiers.","Rand module contains types for random number generation …","Useful when you need to read async data without having to …","Stub module contains types for stubs for non-std …","Benchmark arguments.","Benchmark trait.","Results of a benchmark run.","","","Execute the benchmark and returns the time it took to …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the median duration among all durations","Name of the benchmark.","Constructs a new <code>BenchmarkResult</code>.","Number of samples required to have a statistical …","Prepare the benchmark, run anything that is essential for …","Run the benchmark a number of times.","Runs the given benchmark on the device and prints result …","Wait for computations to be over","","","","","","Simple ID generator.","","","Returns the argument unchanged.","Generates a new ID in the form of a UUID.","Calls <code>U::from(self)</code>.","","","","","An automatically-implemented extension trait on <code>RngCore</code> …","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","","","","","","","","Fill any type implementing <code>Fill</code> with random data","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","","Create a new PRNG using the given seed.","","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generates random data from a thread-local RNG.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Returns a seeded random number generator using entropy.","Calls <code>U::from(self)</code>.","","","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","","Fill any type implementing <code>Fill</code> with random data","","","","","","Concrete variant.","Define how data is read, sync or async.","Sync data variant.","Allows to create sync reader.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Map the current reader to another type.","Read synchronously.","Read the data.","Read the data only if sync, returns None if an async …","","","","","A mutual exclusion primitive useful for protecting shared …","A reader-writer lock which is exclusively locked for …","A unique identifier for a running thread.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Locks the mutex blocking the current thread until it is …","Creates a new mutex in an unlocked state ready for use.","Creates a new reader-writer lock in an unlocked state …","Locks this rwlock with shared read access, blocking the …","","","","","","","","","","","","","","Locks this rwlock with exclusive write access, blocking …"],"i":[0,0,0,0,0,9,0,0,2,2,9,2,2,2,2,2,9,2,9,9,9,0,9,2,2,2,2,2,0,41,41,41,41,41,41,41,41,41,0,42,0,0,13,13,13,13,13,13,13,43,13,13,13,42,42,13,42,13,43,43,0,43,43,0,13,13,13,43,43,42,13,43,13,13,13,13,13,28,0,28,0,28,28,28,28,28,44,28,28,28,28,28,28,0,0,0,34,36,33,34,36,33,33,33,33,33,34,36,33,34,36,33,33,34,36,33,34,34,36,36,33,34,36,33,34,36,33,34,36,33,34,36,33,36],"f":[0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[]],[[2,3],4],[[2,3],4],[-1,-1,[]],[-1,-2,[],[]],[2,5],[-1,6,[]],[[[7,[5]]],2],[-1,8,[]],[-1,[],[]],[-1,2,[]],[-1,1,9],[-1,1,[]],[-1,6,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[],6],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,[-1,12,[]],[-1,-2,[],[]],[-1,-2,[],[]],[13,13],[[-1,-2],1,[],[]],[[13,13],14],[[-1,-2],14,[],[]],[[-1,-2],1,[],[15,16]],[[13,[18,[17]]],1],[[13,3],[[10,[1,19]]]],[-1,-1,[]],[[],-1,[]],[-1,[[10,[-2,20]]],12,[]],[-1,[[10,[13,20]]],12],[[],-1,[]],[[],13],[-1,-2,[],[]],[[-1,21],14,[]],[[],-1,[]],[[-1,-3],-2,[],22,[[23,[-2]]]],[[-1,24,24],14,[]],[[],13],[-1,-2,[],[]],[13,24],[13,25],[[-1,-3],-2,[],[],[[26,[-2]]]],[[-1,-3],[[27,[-3,-1,-2]]],16,[],[[26,[-2]]]],[25,-1,[]],[-1,-2,[],[]],[[-1,-2],[[10,[1,20]]],[],[15,16]],[[13,[18,[17]]],[[10,[1,20]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[28,[-1]],-2],[[28,[-3]]],29,[29,30],29],[[[31,[-1]]],-2,[],[]],[[[28,[-1]]],-1,[]],[[[28,[-1]]],[[32,[-1]]],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],1,[],[]],[[33,33],14],[[-1,-2],14,[],[]],[[[34,[-1]],3],4,35],[[[36,[-1]],3],4,35],[[33,3],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[33,-1],1,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]]],[[10,[[38,[-1]],6]]],[]],[-1,[[34,[-1]]],[]],[-1,[[36,[-1]]],[]],[[[36,[-1]]],[[10,[[39,[-1]],6]]],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1]]],[[10,[[40,[-1]],6]]],[]]],"c":[],"p":[[15,"tuple"],[3,"BenchmarkResult",5],[3,"Formatter",134],[6,"Result",134],[3,"Duration",135],[3,"String",136],[3,"Vec",137],[15,"usize"],[8,"Benchmark",5],[4,"Result",138],[3,"TypeId",139],[8,"RngCore",140],[3,"StdRng",38],[15,"bool"],[8,"Fill",141],[8,"Sized",142],[15,"u8"],[15,"slice"],[3,"Error",134],[3,"Error",143],[15,"f64"],[8,"SampleUniform",144],[8,"SampleRange",144],[15,"u32"],[15,"u64"],[8,"Distribution",145],[3,"DistIter",145],[4,"Reader",77],[8,"Send",142],[8,"FnOnce",146],[3,"Box",147],[4,"Option",148],[3,"ThreadId",93],[3,"Mutex",93],[8,"Debug",134],[3,"RwLock",93],[8,"Hasher",149],[3,"MutexGuard",150],[3,"RwLockReadGuard",151],[6,"RwLockWriteGuard",152],[3,"IdGenerator",28],[8,"SeedableRng",38],[8,"Rng",38],[8,"SyncReader",77]]},\
"burn_compute":{"doc":"Burn compute crate that helps creating high performance …","t":"DLLAALLLOALLAAOLLALLIDDDLLLLLLLLLLLLKLLLKLLLKLLLLLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLNDEQNIINNNNNNEDNDEKLLLLLLLLLLLLLKLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMQIDQQQLLLLLKKKLLLMLKKLLLLLDDINQNDDEKLLLLLLLLLLLLLLLKLLLLLLLLLLLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLIIINNDEDKLLLLLLKLKLKLLLLLLLKLLLLLLLLLLLLLLLLLLLL","n":["Compute","borrow","borrow_mut","channel","client","client","from","into","memory_id_type","memory_management","new","register","server","storage","storage_id_type","try_from","try_into","tune","type_id","vzip","ComputeChannel","MpscComputeChannel","MutexComputeChannel","RefCellComputeChannel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","create","create","create","create","empty","empty","empty","empty","execute","execute","execute","execute","fmt","fmt","fmt","from","from","from","into","into","into","new","new","new","read","read","read","read","sync","sync","sync","sync","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ComputeClient","borrow","borrow_mut","clone","clone_into","create","empty","execute","execute_autotune","fmt","from","into","new","read","sync","to_owned","try_from","try_into","type_id","vzip","Chunk","ChunkId","DeallocStrategy","Handle","MaximumSize","MemoryHandle","MemoryManagement","MinimumSize","Never","Never","PeriodTick","PeriodTime","Ratio","SimpleHandle","SimpleMemoryManagement","Slice","SliceId","SliceStrategy","alloc","alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_mut","can_mut","can_use_chunk","clone","clone","clone","clone_into","clone_into","clone_into","dealloc","dealloc","default","default","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","get","hash","hash","into","into","into","into","into","into","new","new_period_tick","reserve","reserve","storage","storage","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","period","period","state","state","AutotuneKey","ComputeServer","Handle","Kernel","MemoryManagement","Storage","borrow","borrow_mut","can_mut","clone","clone_into","create","empty","execute","fmt","from","into","memory","new","read","sync","to_owned","try_from","try_into","type_id","vzip","BytesResource","BytesStorage","ComputeStorage","Full","Resource","Slice","StorageHandle","StorageId","StorageUtilization","alloc","alloc","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dealloc","dealloc","default","default","eq","equivalent","equivalent","fmt","from","from","from","from","from","get","get","hash","id","into","into","into","into","into","new","new","read","size","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","utilization","vzip","vzip","vzip","vzip","vzip","write","AutotuneKey","AutotuneOperation","AutotuneOperationSet","Hit","Miss","TuneBenchmark","TuneCacheResult","Tuner","autotunables","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","default","execute","execute","fastest","fmt","from","from","from","into","into","into","key","name","name","name","new","new","num_samples","prepare","sync","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"burn_compute"],[20,"burn_compute::channel"],[83,"burn_compute::client"],[103,"burn_compute::memory_management"],[209,"burn_compute::memory_management::DeallocStrategy"],[213,"burn_compute::server"],[239,"burn_compute::storage"],[314,"burn_compute::tune"],[362,"core::hash"],[363,"core::cmp"],[364,"core::cmp"],[365,"core::fmt"],[366,"core::ops::function"],[367,"core::result"],[368,"core::any"],[369,"core::fmt"],[370,"burn_common::reader"],[371,"alloc::boxed"],[372,"spin"],[373,"alloc::sync"],[374,"core::hash"],[375,"alloc::string"]],"d":["The compute type has the responsibility to retrieve the …","","","Compute channel module.","Compute client module.","Get the compute client for the given device.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new memory ID type.","Memory management module.","Create a new compute.","Register the compute client for the given device.","Compute server module.","Compute Storage module.","Create a new storage ID type.","","","Autotune module","","","The ComputeChannel trait links the ComputeClient to the …","Create a channel using the multi-producer, single-consumer …","The MutexComputeChannel ensures thread-safety by locking …","A channel using a ref cell to access the server with …","","","","","","","","","","","","","Given a resource as bytes, stores it and returns the …","","","","Reserves <code>size</code> bytes in the storage, and returns a handle …","","","","Executes the <code>kernel</code> over the given <code>handles</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new mutex compute channel.","Create a new mpsc compute channel.","Create a new cell compute channel.","Given a handle, returns owned resource as bytes","","","","Wait for the completion of every task in the server.","","","","","","","","","","","","","","","","","","","The ComputeClient is the entry point to require tasks from …","","","","","Given a resource, stores it and returns the resource …","Reserves <code>size</code> bytes in the storage, and returns a handle …","Executes the <code>kernel</code> over the given <code>handles</code>.","Executes the fastest kernel in the autotune operation, …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new client.","Given a handle, returns owned resource as bytes.","Wait for the completion of every task in the server.","","","","","","A whole chunk of memory.","Memory ID.","The strategy defines the frequency at which deallocation …","The associated type Handle must implement MemoryHandle","When the reserved memory less than {} bytes.","The MemoryHandle trait is an abstract way to refer to some …","The MemoryManagement trait encapsulates strategies for …","When the reserved memory is at least {} bytes.","Never deallocate.","Never use slices.","Once every n calls to reserve.","Once every period of time","Ratio needed before the chunk can be used as a slice. …","The SimpleHandle is a memory handle, referring to either a …","Reserves and keeps track of chunks of memory in the …","A slice of a chunk of memory.","Memory ID.","The strategy defines when to reuse chunk with slices.","Bypass the memory allocation algorithm to allocate data …","","","","","","","","","","","","","","Checks if the underlying memory can be safely mutated.","Returns true if referenced by only one tensor, and only …","If the chunk can be used with a slice.","","","","","","","Bypass the memory allocation algorithm to deallocate data …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the resource from the storage at the specified …","Returns the resource from the storage, for the specified …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new instance using the given storage, …","Create a new strategy with the given period.","Finds a spot in memory for a resource with the given size …","Reserves memory of specified size using the reserve …","Fetch the storage used by the memory manager.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of calls to be executed before triggering the …","Number of time before triggering the deallocation.","Current state. Should start at zero.","Current state. Should start at now.","The key used to cache operations used on specific inputs …","The compute server is responsible for handling resources …","Server handle containing the memory handle.","The kernel type defines the computation algorithms.","The memory management type defines strategies for …","The storage type defines how data is stored and accessed.","","","If the tensor handle can be mut with an inplace operation.","","","Given a resource as bytes, stores it and returns the …","Reserves <code>size</code> bytes in the storage, and returns a handle …","Executes the <code>kernel</code> over the given memory <code>handles</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Handle for the memory in use.","Constructs a new <code>Handle</code>.","Given a handle, returns the owned resource as bytes.","Wait for the completion of every task in the server.","","","","","","This struct is a pointer to a memory chunk or slice.","The bytes storage maps ids to pointers of bytes in a …","Storage types are responsible for allocating and …","Full memory chunk of specified size","The resource associated type determines the way data is …","Slice of memory chunk with start index and size.","Contains the storage id of a resource and the way it is …","Storage ID.","Defines if data uses a full memory chunk or a slice of it.","Allocates <code>size</code> units of memory and returns a handle to it","","","","","","","","","","","","","","","","Deallocates the memory pointed by the given storage id.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the underlying resource for a specified storage …","","","Storage id.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new ID.","Constructs a new <code>StorageHandle</code>.","Returns the resource as an immutable slice of bytes.","Returns the size the handle is pointing to in memory.","","","","","","","","","","","","","","","","","","How the storage is used.","","","","","","Returns the resource as a mutable slice of bytes.","Trait alias","Contains operation to run and inputs on which to run it","Groups operations of the same type for autotune","An operation is found and given","No operation is found and the set is given back for …","A benchmark that runs on server handles","Result of the cache try","Executes autotune benchmarking and caching","All candidate operations for autotuning this operation type","","","","","","","Clones the operation and inputs","","Runs the operation","","Returns the operation for the given index, matching the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key used in the tune cache","The name of the operation.","The name of the operation.","","Constructs a new <code>TuneBenchmark</code>.","Returns a tuner with empty cache","","","","","","","","","","","","","","",""],"i":[0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,1,1,0,0,0,0,14,15,16,14,15,16,14,15,16,14,15,16,9,14,15,16,9,14,15,16,9,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,9,14,15,16,9,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,33,0,0,49,34,0,0,34,37,34,37,37,34,0,0,33,0,0,49,30,30,35,36,33,37,34,30,35,36,33,37,34,50,33,34,35,36,33,35,36,33,49,30,35,36,35,36,35,35,36,36,30,35,36,33,37,34,30,35,36,33,37,34,49,30,35,36,30,35,36,33,37,34,30,37,49,30,49,30,35,36,33,30,35,36,33,37,34,30,35,36,33,37,34,30,35,36,33,37,34,30,35,36,33,37,34,51,52,51,52,8,0,0,8,8,8,19,19,19,19,19,8,8,8,19,19,19,19,19,8,8,19,19,19,19,19,0,0,0,42,31,42,0,0,0,31,40,43,41,42,39,40,43,41,42,39,40,41,42,41,42,31,40,41,40,41,41,41,40,43,41,42,39,40,31,40,41,39,43,41,42,39,40,41,39,43,39,41,42,43,41,42,39,40,43,41,42,39,40,43,41,42,39,40,39,43,41,42,39,40,43,0,0,0,53,53,0,0,0,25,53,46,27,53,46,27,44,27,44,46,25,27,53,46,27,53,46,27,25,44,44,46,46,27,46,46,46,53,46,27,53,46,27,53,46,27,53,46,27],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[1,[-1,-2,-3]],-1,-4],[[2,[-2,-3]]],[3,4,5,6,7],8,[[9,[-2]]],10],[-1,-1,[]],[-1,-2,[],[]],0,0,[[],[[1,[-1,-2,-3]]],[3,4,5,6,7],8,[[9,[-2]]]],[[[1,[-1,-2,-3]],-1,[2,[-2,-3]]],11,[3,4,5,6,7],8,[[9,[-2]]]],0,0,0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],0,[-1,13,[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[14,[-1]]],[[14,[-1]]],[]],[[[15,[-1]]],[[15,[-1]]],8],[[[16,[-1]]],[[16,[-1]]],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,[18,[17]]],[[19,[-2]]],[],[]],[[[14,[-1]],[18,[17]]],[[19,[-1]]],8],[[[15,[-1]],[18,[17]]],[[19,[-1]]],8],[[[16,[-1]],[18,[17]]],[[19,[-1]]],8],[[-1,20],[[19,[-2]]],[],[]],[[[14,[-1]],20],[[19,[-1]]],8],[[[15,[-1]],20],[[19,[-1]]],8],[[[16,[-1]],20],[[19,[-1]]],8],[[-1,[18,[[19,[-2]]]]],11,[],[]],[[[14,[-1]],[18,[[19,[-1]]]]],11,8],[[[15,[-1]],[18,[[19,[-1]]]]],11,8],[[[16,[-1]],[18,[[19,[-1]]]]],11,8],[[[14,[-1]],21],22,7],[[[15,[-1]],21],22,[8,7]],[[[16,[-1]],21],22,7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-1]]],8],[[-1,20],[[15,[-1]]],8],[-1,[[16,[-1]]],8],[[-1,[19,[-2]]],[[24,[[23,[17]]]]],[],[]],[[[14,[-1]],[19,[-1]]],[[24,[[23,[17]]]]],8],[[[15,[-1]],[19,[-1]]],[[24,[[23,[17]]]]],8],[[[16,[-1]],[19,[-1]]],[[24,[[23,[17]]]]],8],[-1,11,[]],[[[14,[-1]]],11,8],[[[15,[-1]]],11,8],[[[16,[-1]]],11,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1,-2]]],[[2,[-1,-2]]],8,[[9,[-1]]]],[[-1,-2],11,[],[]],[[[2,[-1,-2]],[18,[17]]],[[19,[-1]]],8,[[9,[-1]]]],[[[2,[-1,-2]],20],[[19,[-1]]],8,[[9,[-1]]]],[[[2,[-1,-2]],[18,[[19,[-1]]]]],11,8,[[9,[-1]]]],[[[2,[-1,-2]],[26,[25]]],11,8,[[9,[-1]]]],[[[2,[-1,-2]],21],22,[7,8],7],[-1,-1,[]],[-1,-2,[],[]],[[-2,[29,[[28,[[27,[-1,-2]]]]]]],[[2,[-1,-2]]],8,[[9,[-1]]]],[[[2,[-1,-2]],[19,[-1]]],[[24,[[23,[17]]]]],8,[[9,[-1]]]],[[[2,[-1,-2]]],11,8,[[9,[-1]]]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,20],[],[]],[[[30,[-1]],20],[],31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,32,[]],[33,32],[[34,20,20],32],[35,35],[36,36],[33,33],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[-1,11,[]],[[[30,[-1]]],11,31],[[],35],[[],36],[[35,35],32],[[36,36],32],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[[30,[-1]],21],22,[]],[[35,21],22],[[36,21],22],[[33,21],22],[[37,21],22],[[34,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[],[]],[[[30,[-1]]],[],31],[[35,-1],11,38],[[36,-1],11,38],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,37,34],[[30,[-1]]],31],[20,37],[[-1,20],[],[]],[[[30,[-1]],20],[],31],[-1,-2,[],[]],[[[30,[-1]]],-1,31],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[19,[-1]]],32,8],[[[19,[-1]]],[[19,[-1]]],8],[[-1,-2],11,[],[]],[[-1,[18,[17]]],[[19,[-1]]],[]],[[-1,20],[[19,[-1]]],[]],[[-1,[18,[[19,[-1]]]]],11,[]],[[[19,[-1]],21],22,[7,8]],[-1,-1,[]],[-1,-2,[],[]],0,[[],[[19,[-1]]],8],[[-1,[19,[-1]]],[[24,[[23,[17]]]]],[]],[-1,11,[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[-1,20],39,[]],[[40,20],39],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,41],[42,42],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[-1,41],11,[]],[[40,41],11],[[],41],[[],40],[[41,41],32],[[-1,-2],32,[],[]],[[-1,-2],32,[],[]],[[40,21],22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,39],[],[]],[[40,39]],[[41,-1],11,38],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],41],[[41,42],39],[43,[[18,[17]]]],[39,20],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[43,[[18,[17]]]],0,0,0,0,0,0,0,0,[-1,[[23,[[26,[44]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[26,[44]]],[]],[[],[[27,[-1,-2]]],[45,8],45],[[[26,[-1]]],11,[]],[[[46,[-1,-2]]],11,8,[[9,[-1]]]],[[[26,[-1]],20],[[26,[44]]],[]],[[[27,[-1,-2]],21],22,[7,8],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,47,[]],[-1,47,[]],[[[46,[-1,-2]]],48,8,[[9,[-1]]]],[[[26,[44]],[2,[-1,-2]]],[[46,[-1,-2]]],8,[]],[[],[[27,[-1,-2]]],8,[[9,[-1]]]],[[[46,[-1,-2]]],20,8,[[9,[-1]]]],[[[46,[-1,-2]]],[],8,[[9,[-1]]]],[[[46,[-1,-2]]],11,8,[[9,[-1]]]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Compute",0],[3,"ComputeClient",83],[8,"Hash",362],[8,"PartialEq",363],[8,"Eq",363],[8,"Clone",364],[8,"Debug",365],[8,"ComputeServer",213],[8,"ComputeChannel",20],[8,"Fn",366],[15,"tuple"],[4,"Result",367],[3,"TypeId",368],[3,"MutexComputeChannel",20],[3,"MpscComputeChannel",20],[3,"RefCellComputeChannel",20],[15,"u8"],[15,"slice"],[3,"Handle",213],[15,"usize"],[3,"Formatter",365],[6,"Result",365],[3,"Vec",369],[4,"Reader",370],[8,"AutotuneOperationSet",314],[3,"Box",371],[3,"Tuner",314],[6,"Mutex",372],[3,"Arc",373],[3,"SimpleMemoryManagement",103],[8,"ComputeStorage",239],[15,"bool"],[4,"SimpleHandle",103],[4,"SliceStrategy",103],[3,"ChunkId",103],[3,"SliceId",103],[4,"DeallocStrategy",103],[8,"Hasher",362],[3,"StorageHandle",239],[3,"BytesStorage",239],[3,"StorageId",239],[4,"StorageUtilization",239],[3,"BytesResource",239],[8,"AutotuneOperation",314],[8,"Default",374],[3,"TuneBenchmark",314],[15,"str"],[3,"String",375],[8,"MemoryManagement",103],[8,"MemoryHandle",103],[13,"PeriodTick",209],[13,"PeriodTime",209],[4,"TuneCacheResult",314]]},\
"burn_core":{"doc":"The core crate of Burn.","t":"","n":["LearningRate","backend","config","constant","data","grad_clipping","load_record","lr_scheduler","module","nn","optim","record","step","tensor","to_record","Autodiff","Fusion","LibTorch","NdArray","Wgpu","abs","abs","abs","abs","abs","ad_enabled","ad_enabled","ad_enabled","ad_enabled","adaptive_avg_pool1d","adaptive_avg_pool1d","adaptive_avg_pool1d","adaptive_avg_pool1d_backward","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","adaptive_avg_pool2d_backward","add","add","add","add","add","add_scalar","add_scalar","add_scalar","add_scalar","add_scalar","arange","arange","argmax","argmax","argmax","argmax","argmax","argmin","argmin","argmin","argmin","argmin","autodiff","avg_pool1d","avg_pool1d","avg_pool1d","avg_pool1d_backward","avg_pool2d","avg_pool2d","avg_pool2d","avg_pool2d","avg_pool2d","avg_pool2d_backward","avg_pool2d_backward","avg_pool2d_backward","avg_pool2d_backward","avg_pool2d_backward","backward","bool_cat","bool_cat","bool_cat","bool_cat","bool_cat","bool_device","bool_device","bool_device","bool_device","bool_device","bool_empty","bool_empty","bool_empty","bool_empty","bool_empty","bool_equal","bool_equal","bool_equal","bool_equal","bool_equal","bool_from_data","bool_from_data","bool_from_data","bool_from_data","bool_from_data","bool_from_inner","bool_inner","bool_into_data","bool_into_data","bool_into_data","bool_into_data","bool_into_data","bool_into_float","bool_into_float","bool_into_float","bool_into_float","bool_into_float","bool_into_int","bool_into_int","bool_into_int","bool_into_int","bool_into_int","bool_not","bool_not","bool_not","bool_not","bool_not","bool_repeat","bool_reshape","bool_reshape","bool_reshape","bool_reshape","bool_reshape","bool_shape","bool_shape","bool_shape","bool_shape","bool_shape","bool_slice","bool_slice","bool_slice","bool_slice","bool_slice","bool_slice_assign","bool_slice_assign","bool_slice_assign","bool_slice_assign","bool_slice_assign","bool_swap_dims","bool_swap_dims","bool_swap_dims","bool_swap_dims","bool_swap_dims","bool_tensor","bool_tensor_handle","bool_to_data","bool_to_device","bool_to_device","bool_to_device","bool_to_device","bool_to_device","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","cat","cat","cat","cat","clamp","clamp","clamp","clamp","clamp_max","clamp_max","clamp_max","clamp_max","clamp_min","clamp_min","clamp_min","clamp_min","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","conv1d","conv1d","conv1d","conv2d","conv2d","conv2d","conv2d","conv2d","conv_transpose1d","conv_transpose1d","conv_transpose1d","conv_transpose2d","conv_transpose2d","conv_transpose2d","conv_transpose2d","conv_transpose2d","cos","cos","cos","cos","cos","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","detach","detach","device","device","device","device","device","div","div","div","div","div","div_scalar","div_scalar","div_scalar","div_scalar","div_scalar","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","embedding","embedding","embedding_backward","embedding_backward","empty","empty","empty","empty","empty","equal","equal","equal","equal","equal","equal_elem","equal_elem","equal_elem","equal_elem","equal_elem","erf","erf","erf","erf","erf","exp","exp","exp","exp","exp","float_tensor","float_tensor_handle","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_data","from_data","from_data","from_data","from_data","from_full_precision","from_full_precision","from_full_precision","from_full_precision","from_full_precision","from_inner","full","full","gather","gather","gather","gather","gather","gelu","gelu","gelu_backward","grad","grad_remove","grad_replace","greater","greater","greater","greater","greater","greater_elem","greater_elem","greater_elem","greater_elem","greater_elem","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","init","init","init","init","init","inner","int_abs","int_abs","int_abs","int_abs","int_abs","int_add","int_add","int_add","int_add","int_add","int_add_scalar","int_add_scalar","int_add_scalar","int_add_scalar","int_add_scalar","int_argmax","int_argmax","int_argmax","int_argmax","int_argmax","int_argmin","int_argmin","int_argmin","int_argmin","int_argmin","int_cat","int_cat","int_cat","int_cat","int_cat","int_clamp","int_clamp","int_clamp","int_clamp","int_clamp","int_clamp_max","int_clamp_max","int_clamp_max","int_clamp_max","int_clamp_max","int_clamp_min","int_clamp_min","int_clamp_min","int_clamp_min","int_clamp_min","int_device","int_device","int_device","int_device","int_device","int_div","int_div","int_div","int_div","int_div","int_div_scalar","int_div_scalar","int_div_scalar","int_div_scalar","int_div_scalar","int_empty","int_empty","int_empty","int_empty","int_empty","int_equal","int_equal","int_equal","int_equal","int_equal","int_equal_elem","int_equal_elem","int_equal_elem","int_equal_elem","int_equal_elem","int_from_data","int_from_data","int_from_data","int_from_data","int_from_data","int_from_inner","int_full","int_full","int_full","int_gather","int_gather","int_gather","int_gather","int_gather","int_greater","int_greater","int_greater","int_greater","int_greater","int_greater_elem","int_greater_elem","int_greater_elem","int_greater_elem","int_greater_elem","int_greater_equal","int_greater_equal","int_greater_equal","int_greater_equal","int_greater_equal","int_greater_equal_elem","int_greater_equal_elem","int_greater_equal_elem","int_greater_equal_elem","int_greater_equal_elem","int_inner","int_into_data","int_into_data","int_into_data","int_into_data","int_into_data","int_into_float","int_into_float","int_into_float","int_into_float","int_into_float","int_lower","int_lower","int_lower","int_lower","int_lower","int_lower_elem","int_lower_elem","int_lower_elem","int_lower_elem","int_lower_elem","int_lower_equal","int_lower_equal","int_lower_equal","int_lower_equal","int_lower_equal","int_lower_equal_elem","int_lower_equal_elem","int_lower_equal_elem","int_lower_equal_elem","int_lower_equal_elem","int_mask_fill","int_mask_fill","int_mask_fill","int_mask_fill","int_mask_fill","int_mask_where","int_mask_where","int_mask_where","int_mask_where","int_mask_where","int_max","int_max","int_max_dim","int_max_dim","int_max_dim","int_max_dim_with_indices","int_max_dim_with_indices","int_max_dim_with_indices","int_mean","int_mean","int_mean","int_mean","int_mean_dim","int_mean_dim","int_mean_dim","int_mean_dim","int_mean_dim","int_min","int_min","int_min_dim","int_min_dim","int_min_dim","int_min_dim_with_indices","int_min_dim_with_indices","int_min_dim_with_indices","int_mul","int_mul","int_mul","int_mul","int_mul","int_mul_scalar","int_mul_scalar","int_mul_scalar","int_mul_scalar","int_mul_scalar","int_neg","int_neg","int_neg","int_ones","int_ones","int_ones","int_ones","int_ones","int_repeat","int_repeat","int_reshape","int_reshape","int_reshape","int_reshape","int_reshape","int_scatter","int_scatter","int_scatter","int_scatter","int_scatter","int_select","int_select","int_select","int_select","int_select","int_select_assign","int_select_assign","int_select_assign","int_select_assign","int_select_assign","int_shape","int_shape","int_shape","int_shape","int_shape","int_slice","int_slice","int_slice","int_slice","int_slice","int_slice_assign","int_slice_assign","int_slice_assign","int_slice_assign","int_slice_assign","int_sub","int_sub","int_sub","int_sub","int_sub","int_sub_scalar","int_sub_scalar","int_sub_scalar","int_sub_scalar","int_sub_scalar","int_sum","int_sum","int_sum","int_sum","int_sum","int_sum_dim","int_sum_dim","int_sum_dim","int_sum_dim","int_sum_dim","int_swap_dims","int_swap_dims","int_swap_dims","int_swap_dims","int_swap_dims","int_tensor","int_tensor_handle","int_to_data","int_to_device","int_to_device","int_to_device","int_to_device","int_to_device","int_zeros","int_zeros","int_zeros","int_zeros","int_zeros","into","into","into","into","into","into_data","into_data","into_data","into_data","into_data","into_int","into_int","into_int","into_int","into_int","is_require_grad","libtorch","log","log","log","log","log","log1p","log1p","log1p","log1p","log1p","lower","lower","lower","lower","lower","lower_elem","lower_elem","lower_elem","lower_elem","lower_elem","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","mask_fill","mask_fill","mask_fill","mask_fill","mask_fill","mask_where","mask_where","mask_where","mask_where","mask_where","matmul","matmul","matmul","matmul","matmul","max","max_dim","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_pool1d","max_pool1d","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool1d_with_indices_backward","max_pool2d","max_pool2d","max_pool2d","max_pool2d","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","max_pool2d_with_indices_backward","mean","mean","mean","mean","mean_dim","mean_dim","mean_dim","mean_dim","mean_dim","min","min_dim","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","mul","mul","mul","mul","mul","mul_scalar","mul_scalar","mul_scalar","mul_scalar","mul_scalar","name","name","name","name","name","ndarray","neg","neg","neg","ones","ones","ones","ones","operations","powf","powf","powf","powf","powf","random","random","random","random","random","recip","recip","recip","recip","recip","relu","relu","relu","relu","repeat","reshape","reshape","reshape","reshape","reshape","scatter","scatter","scatter","scatter","scatter","seed","seed","seed","seed","seed","select","select","select","select","select","select_assign","select_assign","select_assign","select_assign","select_assign","set_require_grad","shape","shape","shape","shape","shape","sin","sin","sin","sin","sin","slice","slice","slice","slice","slice","slice_assign","slice_assign","slice_assign","slice_assign","slice_assign","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sum","sum","sum","sum","sum","sum_dim","sum_dim","sum_dim","sum_dim","sum_dim","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","sync","sync","sync","sync","tanh","tanh","tanh","tanh","tanh","to_data","to_device","to_device","to_device","to_device","to_device","to_full_precision","to_full_precision","to_full_precision","to_full_precision","to_full_precision","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","wgpu","zeros","zeros","zeros","zeros","Config","Config","ConfigError","FileNotFound","InvalidFormat","borrow","borrow_mut","config_to_json","deref","deref_mut","downcast","drop","fmt","fmt","from","init","into","load","load_binary","save","to_string","try_from","try_into","type_id","upcast","vzip","dataloader","dataset","Batch","BatchDataLoader","BatchStrategy","DataLoader","DataLoaderBuilder","DataLoaderIterator","Dataset","DatasetIterator","Done","FixBatchStrategy","Message","MultiThreadDataLoader","Progress","add","add","batch","batch","batch_size","batcher","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","from","get","init","init","init","init","init","init","into","into","into","into","into","into","is_empty","items_processed","items_total","iter","iter","iter","iter","len","multi_thread","new","new","new","new","new_like","new_like","num_workers","progress","shuffle","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","Batcher","batch","ConnectionPool","Dataset","DatasetIterator","Err","FailToDownloadPythonDependencies","FileExists","HuggingfaceDatasetLoader","ImporterError","InMemDataset","Io","Ok","Other","PersistDbFile","PythonNotInstalled","Result","Serde","Sql","SqliteDataset","SqliteDataset","SqliteDatasetError","SqliteDatasetStorage","SqliteDatasetWriter","Unknown","VenvNotInitialized","base_dir","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dataset","db_file","db_file","db_file","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","exists","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_csv","from_dataset","from_db_file","from_file","from_json_rows","from_name","get","get","get","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_fallible","into_iter","is_empty","is_empty","iter","iter","len","len","len","new","new","new","new","next","reader","set_completed","source","source","source","split","to_owned","to_string","to_string","transform","transpose_into_fallible","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_base_dir","with_base_dir","with_huggingface_cache_dir","with_huggingface_token","with_subset","write","writer","huggingface","FailToDownloadPythonDependencies","HuggingfaceDatasetLoader","ImporterError","MNISTDataset","MNISTItem","PythonNotInstalled","SqliteDataset","Unknown","VenvNotInitialized","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","fmt","from","from","get","image","init","init","into","into","label","len","serialize","test","to_owned","train","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","ComposedDataset","Mapper","MapperDataset","PartialDataset","SamplerDataset","ShuffledDataset","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","from","from","from","from","from","get","get","get","get","get","init","init","init","init","init","into","into","into","into","into","len","len","len","len","len","map","new","new","new","new","new","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","with_replacement","with_seed","without_replacement","GradientClipping","GradientClippingConfig","Norm","Norm","Value","Value","borrow","borrow","borrow_mut","borrow_mut","clip_gradient","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","fmt","from","from","init","init","init","into","into","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","LrScheduler","Record","constant","load_record","noam","step","to_record","ConstantLr","borrow","borrow_mut","clone","clone_into","deref","deref_mut","downcast","drop","fmt","from","from","init","into","load_record","new","step","to_owned","to_record","try_from","try_into","type_id","upcast","vzip","NoamLrScheduler","NoamLrSchedulerConfig","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","downcast","downcast","drop","drop","fmt","fmt","from","from","init","init","init","into","into","load_record","new","serialize","step","to_owned","to_owned","to_record","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","with_model_size","with_warmup_steps","AutodiffModule","ConstantRecord","Devices","InnerModule","Module","Module","ModuleMapper","ModuleVisitor","Param","ParamId","Record","RunningState","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constant","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","devices","devices","devices","devices","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","fork","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","from_record","hash","init","init","init","init","into","into","into","into","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","into_record","into_string","list_param_ids","load_file","load_file","load_record","load_record","load_record","load_record","load_record","map","map","map","map","map","map","map_bool","map_bool","map_float","map_float","map_int","map_int","new","new","new","new","no_grad","no_grad","num_params","num_params","save_file","save_file","serialize","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","update","val","valid","valid","valid","valid","valid","value","value_sync","visit","visit","visit","visit","visit","visit_bool","visit_bool","visit_float","visit_float","visit_int","visit_int","vzip","vzip","vzip","vzip","with_id","BatchNorm","BatchNormConfig","BatchNormRecord","BatchNormRecordItem","Constant","Dropout","DropoutConfig","Embedding","EmbeddingConfig","EmbeddingRecord","EmbeddingRecordItem","Explicit","Explicit","GELU","GateController","GateControllerRecord","GateControllerRecordItem","GroupNorm","GroupNormConfig","GroupNormRecord","GroupNormRecordItem","Initializer","KaimingNormal","KaimingUniform","LayerNorm","LayerNormConfig","LayerNormRecord","LayerNormRecordItem","Linear","LinearConfig","LinearRecord","LinearRecordItem","Lstm","LstmConfig","LstmRecord","LstmRecordItem","Normal","Ones","PaddingConfig1d","PaddingConfig2d","PositionalEncoding","PositionalEncodingConfig","PositionalEncodingRecord","PositionalEncodingRecordItem","ReLU","Same","Same","Unfold4d","Unfold4dConfig","Uniform","Valid","Valid","XavierNormal","XavierUniform","Zeros","affine","affine","attention","beta","beta","beta","beta","beta","beta","bias","bias","bias","bias","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cell_gate","cell_gate","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conv","d_hidden","d_hidden","d_hidden","d_input","d_input","d_model","d_output","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","devices","dilation","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget_gate","forget_gate","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","fork","forward","forward","forward","forward","forward","forward","forward","forward","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","from_item","from_item","from_item","gamma","gamma","gamma","gamma","gamma","gamma","generate_sinusoids","gru","hidden_transform","hidden_transform","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_with","init_with","init_with","init_with","init_with","init_with","initializer","initializer","initializer","input_gate","input_gate","input_transform","input_transform","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","into_record","kernel_size","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","load_record","loss","lstm","map","map","map","map","map","map","map","map","map","map","map","map","map","momentum","momentum","momentum","new","new","new","new","new","new","new","new","new","new","new","new_with","num_channels","num_channels","num_features","num_groups","num_groups","num_params","num_params","num_params","num_params","num_params","num_params","num_params","output_gate","output_gate","padding","pool","prob","running_mean","running_mean","running_var","running_var","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sinusoids","sinusoids","stride","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","transformer","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","weight","weight","with_affine","with_bias","with_dilation","with_epsilon","with_epsilon","with_epsilon","with_initializer","with_initializer","with_max_sequence_size","with_max_timescale","with_momentum","with_padding","with_stride","fan_out_only","fan_out_only","gain","gain","gain","gain","max","mean","min","std","value","GeneratePaddingMask","MhaCache","MhaInput","MhaOutput","MultiHeadAttention","MultiHeadAttentionConfig","MultiHeadAttentionRecord","MultiHeadAttentionRecordItem","activation","activation","autoregressive","autoregressive_cross_attention","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","context","d_k","d_k","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","dropout","dropout","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","forward","forward_cache","from","from","from","from","from","from","from","from","from_item","generate_autoregressive_mask","generate_padding_mask","init","init","init","init","init","init","init","init","init","init_with","initializer","into","into","into","into","into","into","into","into","into_item","into_record","key","key","load_record","map","mask","mask_attn","mask_pad","min_float","min_float","n_heads","n_heads","new","new","num_params","output","output","query","query","self_attn","serialize","serialize","tensor","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","value","value","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","with_dropout","with_initializer","with_min_float","TensorCache","borrow","borrow_mut","deref","deref_mut","downcast","drop","empty","from","init","into","try_from","try_into","type_id","upcast","vzip","Conv1d","Conv1dConfig","Conv1dRecord","Conv1dRecordItem","Conv2d","Conv2dConfig","Conv2dRecord","Conv2dRecordItem","ConvTranspose1d","ConvTranspose1dConfig","ConvTranspose1dRecord","ConvTranspose1dRecordItem","ConvTranspose2d","ConvTranspose2dConfig","ConvTranspose2dRecord","ConvTranspose2dRecordItem","bias","bias","bias","bias","bias","bias","bias","bias","bias","bias","bias","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channels","channels","channels","channels_in","channels_out","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","dilation","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","forward","forward","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","groups","groups","groups","groups","groups","groups","groups","groups","groups","groups","groups","groups","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_with","init_with","init_with","init_with","initializer","initializer","initializer","initializer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","load_record","load_record","load_record","load_record","map","map","map","map","new","new","new","new","num_params","num_params","num_params","num_params","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding_out","padding_out","padding_out","padding_out","padding_out","padding_out","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","weight","weight","weight","weight","weight","with_bias","with_bias","with_bias","with_bias","with_dilation","with_dilation","with_dilation","with_dilation","with_groups","with_groups","with_groups","with_groups","with_initializer","with_initializer","with_initializer","with_initializer","with_padding","with_padding","with_padding","with_padding","with_padding_out","with_padding_out","with_stride","with_stride","with_stride","with_stride","Gru","GruConfig","GruRecord","GruRecordItem","bias","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","d_hidden","d_hidden","d_hidden","d_input","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fork","forward","from","from","from","from","from_item","init","init","init","init","init","init_with","initializer","into","into","into","into","into_item","into_record","load_record","map","new","new_gate","new_gate","num_params","reset_gate","reset_gate","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","update_gate","update_gate","valid","visit","vzip","vzip","vzip","vzip","with_initializer","Auto","BinaryCrossEntropyLoss","BinaryCrossEntropyLossConfig","BinaryCrossEntropyLossRecord","BinaryCrossEntropyLossRecordItem","CrossEntropyLoss","CrossEntropyLossConfig","CrossEntropyLossRecord","CrossEntropyLossRecordItem","MSELoss","Mean","Reduction","Sum","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","devices","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","forward","forward","forward","forward_no_reduction","from","from","from","from","from","from","from","from","from","from","from_item","from_item","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_record","into_record","load_record","load_record","logits","logits","logits","logits","map","map","new","new","new","new","num_params","num_params","pad_tokens","pad_tokens","serialize","serialize","serialize","serialize","smoothing","smoothing","smoothing","smoothing","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights","weights","weights","weights","weights","weights","weights","with_logits","with_logits","with_pad_tokens","with_smoothing","with_smoothing","with_weights","with_weights","Lstm","LstmConfig","LstmRecord","LstmRecordItem","bias","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cell_gate","cell_gate","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","d_hidden","d_hidden","d_hidden","d_input","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","forget_gate","forget_gate","fork","forward","from","from","from","from","from_item","init","init","init","init","init","init_with","initializer","input_gate","input_gate","into","into","into","into","into_item","into_record","load_record","map","new","num_params","output_gate","output_gate","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","valid","visit","vzip","vzip","vzip","vzip","with_initializer","AdaptiveAvgPool1d","AdaptiveAvgPool1dConfig","AdaptiveAvgPool2d","AdaptiveAvgPool2dConfig","AvgPool1d","AvgPool1dConfig","AvgPool2d","AvgPool2dConfig","MaxPool1d","MaxPool1dConfig","MaxPool2d","MaxPool2dConfig","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_include_pad","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","devices","devices","dilation","dilation","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","fork","fork","forward","forward","forward","forward","forward","forward","from","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into_record","into_record","into_record","into_record","into_record","into_record","kernel_size","kernel_size","kernel_size","kernel_size","load_record","load_record","load_record","load_record","load_record","load_record","map","map","map","map","map","map","new","new","new","new","new","new","output_size","output_size","padding","padding","padding","padding","serialize","serialize","serialize","serialize","serialize","serialize","stride","stride","strides","strides","to_device","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","valid","valid","visit","visit","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_count_include_pad","with_count_include_pad","with_dilation","with_dilation","with_padding","with_padding","with_padding","with_padding","with_stride","with_stride","with_strides","with_strides","PositionWiseFeedForward","PositionWiseFeedForwardConfig","PositionWiseFeedForwardRecord","PositionWiseFeedForwardRecordItem","TransformerDecoder","TransformerDecoderAutoregressiveCache","TransformerDecoderConfig","TransformerDecoderInput","TransformerDecoderLayer","TransformerDecoderLayerRecord","TransformerDecoderLayerRecordItem","TransformerDecoderRecord","TransformerDecoderRecordItem","TransformerEncoder","TransformerEncoderAutoregressiveCache","TransformerEncoderConfig","TransformerEncoderInput","TransformerEncoderLayer","TransformerEncoderLayerRecord","TransformerEncoderLayerRecordItem","TransformerEncoderRecord","TransformerEncoderRecordItem","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cross_attn","cross_attn","d_ff","d_ff","d_ff","d_model","d_model","d_model","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","devices","devices","devices","devices","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dropout","dropout","dropout","dropout","dropout","dropout","dropout","dropout","dropout","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fork","fork","forward","forward","forward","forward_autoregressive_inference","forward_autoregressive_inference","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","from_item","from_item","from_item","from_item","gelu","gelu","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init_with","init_with","init_with","initializer","initializer","initializer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_item","into_record","into_record","into_record","into_record","into_record","layers","layers","layers","layers","linear_inner","linear_inner","linear_outer","linear_outer","load_record","load_record","load_record","load_record","load_record","map","map","map","map","map","mask_attn","mask_pad","memory_mask_attn","memory_mask_pad","mha","mha","n_heads","n_heads","n_layers","n_layers","new","new","new","new","new","new_autoregressive_cache","new_autoregressive_cache","norm_1","norm_1","norm_1","norm_1","norm_2","norm_2","norm_2","norm_2","norm_3","norm_3","norm_first","norm_first","norm_first","norm_first","norm_first","norm_first","num_params","num_params","num_params","num_params","num_params","pwff","pwff","pwff","pwff","self_attn","self_attn","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","target_mask_attn","target_mask_pad","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","valid","valid","visit","visit","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_dropout","with_dropout","with_dropout","with_initializer","with_initializer","with_initializer","with_norm_first","with_norm_first","AdaGrad","AdaGradConfig","AdaGradState","AdaGradStateItem","Adam","AdamConfig","AdamState","AdamStateItem","AdamW","AdamWConfig","AdamWState","AdamWStateItem","AdaptiveMomentumState","AdaptiveMomentumStateItem","AdaptiveMomentumWState","AdaptiveMomentumWStateItem","CenteredState","CenteredStateItem","GradientsAccumulator","GradientsParams","LRDecayState","LRDecayStateItem","Optimizer","RMSProp","RMSPropConfig","RMSPropMomentum","RMSPropMomentumState","RMSPropMomentumStateItem","RMSPropState","RMSPropStateItem","Record","Sgd","SgdConfig","SgdState","SgdStateItem","SimpleOptimizer","SquareAvgState","SquareAvgStateItem","State","accumulate","adaptor","avg","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","centered","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","decay","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_grads","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","from_item","get","grad_avg","grads","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","into_item","is_empty","len","load_record","lr_decay","moment_1","moment_1","moment_2","moment_2","momentum","momentum","momentum","momentum","momentum","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","record","register","remove","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","square_avg","square_avg","step","step","step","step","step","step","step","sum","time","time","time","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_record","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_alpha","with_beta_1","with_beta_1","with_beta_2","with_beta_2","with_centered","with_epsilon","with_epsilon","with_epsilon","with_epsilon","with_grad_clipping","with_grad_clipping","with_grad_clipping","with_grad_clipping","with_gradient_clipping","with_lr_decay","with_momentum","with_momentum","with_weight_decay","with_weight_decay","with_weight_decay","with_weight_decay","with_weight_decay","OptimizerAdaptor","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","from","from","init","into","load_record","step","to_record","try_from","try_into","type_id","upcast","vzip","with_grad_clipping","WeightDecay","WeightDecayConfig","WeightDecayState","WeightDecayStateItem","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_item","grad_last_step","init","init","init","init","into","into","into","into","into_item","new","new","new","penalty","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_string","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","Momentum","MomentumConfig","MomentumState","MomentumStateItem","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","dampening","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from_item","init","init","init","init","into","into","into","into","into_item","momentum","nesterov","new","new","new","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_string","transform","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","velocity","vzip","vzip","vzip","vzip","with_dampening","with_momentum","with_nesterov","AdaptorRecord","AdaptorRecordItem","AdaptorRecordItemV1","AdaptorRecordV1","Rank1","Rank1","Rank2","Rank2","Rank3","Rank3","Rank4","Rank4","Rank5","Rank5","Rank6","Rank6","Rank7","Rank7","Rank8","Rank8","V1","V1","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","downcast","downcast","downcast","downcast","drop","drop","drop","drop","from","from","from","from","from_item","from_item","from_state","from_state","init","init","init","init","into","into","into","into","into_item","into_item","into_state","into_state","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","BinBytesRecorder","BinFileRecorder","BinGzFileRecorder","BurnMetadata","BurnRecord","BurnRecordNoItem","BytesRecorder","CompactRecorder","DebugRecordSettings","DefaultFileRecorder","DefaultRecorder","DoublePrecisionSettings","FileNotFound","FileRecorder","FloatElem","FullPrecisionSettings","HalfPrecisionSettings","IntElem","Item","JsonGzFileRecorder","LoadArgs","NamedMpkBytesRecorder","NamedMpkFileRecorder","NamedMpkGzFileRecorder","NoStdInferenceRecorder","NoStdTrainingRecorder","ParamSerde","PrecisionSettings","PrettyJsonFileRecorder","Record","Record","RecordArgs","RecordOutput","Recorder","RecorderError","SensitiveCompactRecorder","Settings","Unknown","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","equivalent","equivalent","equivalent","file_extension","file_extension","file_extension","file_extension","file_extension","file_extension","file_extension","float","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_item","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","int","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_item","item","load","load","load_item","load_item","load_item","load_item","load_item","load_item","load_item","load_item","load_item","metadata","metadata","new","new","new","new","new","new","new","new","new","new","new","new","record","record","save_item","save_item","save_item","save_item","save_item","save_item","save_item","save_item","save_item","serialize","serialize","serialize","serialize","settings","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","BasicAutodiffOps","BasicOps","Bernoulli","Bernoulli","Bool","Concrete","DIGITS","DIGITS","Data","DataSerialize","Default","Device","Dim","DimIter","Distribution","DistributionSampler","DistributionSamplerKind","Double","E","E","E","E","EPSILON","EPSILON","Elem","Element","ElementConversion","ElementPrecision","ElementRandom","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","Float","Full","Half","INFINITY","INFINITY","InnerKind","Int","LN_10","LN_10","LN_10","LN_10","LN_2","LN_2","LN_2","LN_2","LOG10_2","LOG10_2","LOG10_2","LOG10_2","LOG10_E","LOG10_E","LOG10_E","LOG10_E","LOG2_10","LOG2_10","LOG2_10","LOG2_10","LOG2_E","LOG2_E","LOG2_E","LOG2_E","MANTISSA_DIGITS","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_10_EXP","MAX_EXP","MAX_EXP","MAX_SUBNORMAL","MAX_SUBNORMAL","MIN","MIN","MIN_10_EXP","MIN_10_EXP","MIN_EXP","MIN_EXP","MIN_POSITIVE","MIN_POSITIVE","MIN_POSITIVE_SUBNORMAL","MIN_POSITIVE_SUBNORMAL","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ZERO","NEG_ZERO","NamedDim","NamedDims","NamedTensor","Normal","Normal","Numeric","ONE","ONE","Other","PI","PI","PI","PI","Precision","Primitive","PrintOptions","RADIX","RADIX","Reader","ReshapeArgs","SQRT_2","SQRT_2","SQRT_2","SQRT_2","Shape","Standard","Sync","T","Tensor","Tensor","TensorKind","Uniform","Uniform","ZERO","ZERO","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acos","acosh","acosh","acosh","acosh","activation","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_scalar","add_scalar","add_scalar","add_scalar","arange","arange_device","arange_step","arange_step_device","argmax","argmax","argmax","argmax","argmin","argmin","argmin","argmin","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","asin","asin","asin","asin","asinh","asinh","asinh","asinh","assert_approx_eq","assert_approx_eq_diff","assert_within_range","atan","atan","atan","atan","atan2","atan2","atan2","atan2","atanh","atanh","atanh","atanh","backend","backward","bf16","bitxor","bool_not","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","cat","cat","cat","cat","cbrt","cbrt","cbrt","cbrt","ceil","ceil","ceil","ceil","ceil","ceil","check","clamp","clamp","clamp","clamp","clamp","clamp","clamp_max","clamp_max","clamp_max","clamp_max","clamp_min","clamp_min","clamp_min","clamp_min","classify","classify","classify","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","container","convert","convert","convert","copysign","copysign","cos","cos","cos","cos","cos","cosh","cosh","cosh","cosh","cov","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","detach","device","device","device","device","device","devices","devices","devices","diagonal","dims","dims","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_scalar","div_scalar","div_scalar","div_scalar","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","edge_items","elem","elem","elem","elem_type_name","empty","empty","empty","empty","empty","empty_device","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal_elem","equal_elem","equal_elem","equal_elem","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","erf","exp","exp","exp","exp","exp","exp2","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","exp_m1","f16","flatten","float","float","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","fork","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_bits","from_bits","from_bool","from_bool_device","from_data","from_data","from_data","from_data","from_data","from_data_device","from_elem","from_elem","from_elem","from_f16","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32_const","from_f32_const","from_f64","from_f64","from_f64","from_f64","from_f64_const","from_f64_const","from_floats","from_full_precision","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i8","from_i8","from_inner","from_inner","from_inner","from_inner","from_inner","from_ints","from_item","from_item","from_item","from_item","from_item","from_item","from_le_bytes","from_le_bytes","from_ne_bytes","from_ne_bytes","from_primitive","from_str","from_str","from_str_radix","from_str_radix","from_tensor","from_u16","from_u16","from_u32","from_u32","from_u32","from_u64","from_u64","from_u8","from_u8","from_usize","full","full","full","full","full","full_device","gather","gather","gather","gather","ge","ge","grad","grad_remove","grad_replace","greater","greater","greater","greater","greater_elem","greater_elem","greater_elem","greater_elem","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","gt","gt","hypot","hypot","hypot","hypot","infinity","infinity","infinity","infinity","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","inner","inner","inner","inner","inplace","int","int","integer_decode","integer_decode","integer_decode","integer_decode","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_data","into_data","into_data","into_data","into_data","into_fallible","into_item","into_item","into_item","into_item","into_item","into_item","into_iter","into_primitive","into_record","into_record","into_record","into_scalar","into_shape","into_shape","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_normal","is_normal","is_normal","is_require_grad","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_valid_bit_pattern","is_valid_bit_pattern","is_zero","is_zero","iter_dim","le","le","ln","ln","ln","ln","ln_1p","ln_1p","ln_1p","ln_1p","load_record","load_record","load_record","log","log","log","log","log","log10","log10","log10","log10","log1p","log2","log2","log2","log2","loss","lower","lower","lower","lower","lower_elem","lower_elem","lower_elem","lower_elem","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","lt","lt","make_element","map","map","map","map","mask_fill","mask_fill","mask_fill","mask_fill","mask_where","mask_where","mask_where","mask_where","matmul","matmul","max","max","max","max","max","max","max","max","max","max","max","max","max_dim","max_dim","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","mean","mean","mean","mean","mean_dim","mean_dim","mean_dim","mean_dim","min","min","min","min","min","min","min","min","min","min","min","min","min_dim","min_dim","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","module","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_scalar","mul_scalar","mul_scalar","mul_scalar","name","name","name","name","nan","nan","nan","nan","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg_infinity","neg_infinity","neg_infinity","neg_infinity","neg_zero","neg_zero","neg_zero","neg_zero","new","new","new","new","new","next","num_elements","one","one","one_hot","ones","ones","ones","ones","ones","ones_device","ones_like","ops","partial_cmp","partial_cmp","powf","powf","powf","powf","powf","powi","powi","powi","powi","powi","powi","precision","precision","precision","product","product","product","product","random","random","random","random","random","random","random_device","random_like","read","read_sync","recip","recip","recip","recip","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","repeat","repeat","repeat","repeat","repeat","require_grad","reshape","reshape","reshape","reshape","reshape","reshape","round","round","round","round","round","round","sample","sampler","scatter","scatter","scatter","scatter","select","select","select","select","select_assign","select_assign","select_assign","select_assign","serialize","serialize","serialize","serialize","serialize_as_f32","serialize_as_f32","serialize_as_string","serialize_as_string","set_print_options","set_require_grad","shape","shape","shape","shape","shape","shape","shape","shape","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin","sin","sin_cos","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sinh","slice","slice","slice","slice","slice","slice_assign","slice_assign","slice_assign","slice_assign","slice_assign","sqrt","sqrt","sqrt","sqrt","sqrt","squeeze","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sum","sum","sum","sum","sum","sum","sum","sum","sum_dim","sum_dim","sum_dim","sum_dim","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","tan","tan","tan","tan","tanh","tanh","tanh","tanh","tanh","testgen_abs","testgen_add","testgen_aggregation","testgen_all","testgen_arange","testgen_arange_step","testgen_arg","testgen_cast","testgen_cat","testgen_clamp","testgen_clone_invariance","testgen_cos","testgen_cov","testgen_create_like","testgen_diagonal","testgen_display","testgen_div","testgen_erf","testgen_exp","testgen_flatten","testgen_full","testgen_gather_scatter","testgen_gelu","testgen_init","testgen_iter_dim","testgen_log","testgen_log1p","testgen_map_comparison","testgen_mask","testgen_matmul","testgen_maxmin","testgen_module_adaptive_avg_pool1d","testgen_module_adaptive_avg_pool2d","testgen_module_avg_pool1d","testgen_module_avg_pool2d","testgen_module_conv1d","testgen_module_conv2d","testgen_module_conv_transpose1d","testgen_module_conv_transpose2d","testgen_module_forward","testgen_module_max_pool1d","testgen_module_max_pool2d","testgen_module_unfold4d","testgen_mul","testgen_neg","testgen_one_hot","testgen_powf","testgen_random","testgen_recip","testgen_relu","testgen_repeat","testgen_reshape","testgen_select","testgen_sigmoid","testgen_silu","testgen_sin","testgen_slice","testgen_softmax","testgen_sqrt","testgen_squeeze","testgen_sub","testgen_tanh","testgen_tanh_activation","testgen_transpose","testgen_var","threshold","to_be_bytes","to_be_bytes","to_bits","to_bits","to_data","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_device","to_f16","to_f32","to_f32","to_f32","to_f32","to_f32","to_f32_const","to_f32_const","to_f64","to_f64","to_f64","to_f64","to_f64_const","to_f64_const","to_full_precision","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_radians","to_radians","to_radians","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u16","to_u16","to_u32","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","total_cmp","total_cmp","transpose","transpose","transpose","transpose","transpose","transpose_into_fallible","trunc","trunc","trunc","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsqueeze","unsqueeze_dim","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","valid","validate_result","value","value","var","var_bias","var_mean","var_mean_bias","visit","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros_device","zeros_like","gelu","log_sigmoid","log_softmax","relu","sigmoid","silu","softmax","tanh","AutodiffBackend","Backend","BoolTensorPrimitive","Device","FloatElem","FullPrecisionBackend","FullPrecisionElem","Gradients","InnerBackend","IntElem","IntTensorPrimitive","TensorPrimitive","ad_enabled","backward","bool_from_inner","bool_inner","from_inner","grad","grad_remove","grad_replace","inner","int_from_inner","int_inner","name","seed","sync","TensorContainer","borrow","borrow_mut","default","deref","deref_mut","downcast","drop","fmt","from","get","init","into","is_empty","len","new","register","remove","try_from","try_into","type_id","upcast","vzip","cross_entropy_with_logits","adaptive_avg_pool1d","adaptive_avg_pool2d","avg_pool1d","avg_pool2d","conv1d","conv2d","conv_transpose1d","conv_transpose2d","embedding","max_pool1d","max_pool1d_with_indices","max_pool2d","max_pool2d_with_indices","unfold4d","ActivationOps","BoolTensor","BoolTensorOps","Conv1dBackward","Conv2dBackward","ConvOptions","ConvTransposeOptions","Device","FloatElem","FloatTensor","FullPrecisionBackend","IntElem","IntTensor","IntTensorOps","MaxPool1dBackward","MaxPool1dWithIndices","MaxPool2dBackward","MaxPool2dWithIndices","ModuleOps","TensorOps","UnfoldOptions","abs","adaptive_avg_pool1d","adaptive_avg_pool1d_backward","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","arange","arange_step","argmax","argmin","avg_pool1d","avg_pool1d_backward","avg_pool2d","avg_pool2d_backward","bias_grad","bias_grad","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_repeat","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_data","bool_to_device","bool_transpose","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv1d","conv1d_backward","conv2d","conv2d_backward","conv_transpose1d","conv_transpose1d_backward","conv_transpose2d","conv_transpose2d_backward","cos","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","detach","device","dilation","dilation","dilation","div","div_scalar","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","embedding","embedding_backward","empty","equal","equal_elem","erf","exp","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_data","from_full_precision","full","gather","gelu","gelu_backward","greater","greater_elem","greater_equal","greater_equal_elem","groups","groups","hash","hash","indices","indices","init","init","init","init","init","init","init","init","init","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max","int_max_dim","int_max_dim_with_indices","int_mean","int_mean_dim","int_min","int_min_dim","int_min_dim_with_indices","int_mul","int_mul_scalar","int_neg","int_ones","int_repeat","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_data","int_to_device","int_transpose","int_zeros","into","into","into","into","into","into","into","into","into","into_data","into_int","is_require_grad","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max","max_dim","max_dim_with_indices","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","min","min_dim","min_dim_with_indices","mul","mul_scalar","neg","new","new","new","new","new","new","new","new","new","ones","output","output","padding","padding","padding","padding_out","pool","powf","random","recip","relu","relu_backward","repeat","reshape","scatter","select","select_assign","set_require_grad","shape","sin","slice","slice_assign","sqrt","stride","stride","stride","sub","sub_scalar","sum","sum_dim","swap_dims","tanh","to_data","to_device","to_full_precision","to_owned","to_owned","to_owned","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold4d","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights_grad","weights_grad","x_grad","x_grad","x_grad","x_grad","zeros","calculate_conv_output_size","calculate_conv_padding","calculate_conv_transpose_output_size","calculate_pool_output_size"],"q":[[0,"burn_core"],[15,"burn_core::backend"],[904,"burn_core::config"],[930,"burn_core::data"],[932,"burn_core::data::dataloader"],[1060,"burn_core::data::dataloader::batcher"],[1062,"burn_core::data::dataset"],[1261,"burn_core::data::dataset::source"],[1262,"burn_core::data::dataset::source::huggingface"],[1311,"burn_core::data::dataset::transform"],[1407,"burn_core::grad_clipping"],[1450,"burn_core::lr_scheduler"],[1457,"burn_core::lr_scheduler::constant"],[1481,"burn_core::lr_scheduler::noam"],[1529,"burn_core::module"],[1713,"burn_core::nn"],[2746,"burn_core::nn::Initializer"],[2757,"burn_core::nn::attention"],[2958,"burn_core::nn::cache"],[2974,"burn_core::nn::conv"],[3491,"burn_core::nn::gru"],[3602,"burn_core::nn::loss"],[3866,"burn_core::nn::lstm"],[3979,"burn_core::nn::pool"],[4322,"burn_core::nn::transformer"],[4900,"burn_core::optim"],[5686,"burn_core::optim::adaptor"],[5707,"burn_core::optim::decay"],[5792,"burn_core::optim::momentum"],[5882,"burn_core::optim::record"],[5978,"burn_core::record"],[6368,"burn_core::tensor"],[7903,"burn_core::tensor::activation"],[7911,"burn_core::tensor::backend"],[7937,"burn_core::tensor::container"],[7960,"burn_core::tensor::loss"],[7961,"burn_core::tensor::module"],[7975,"burn_core::tensor::ops"],[8355,"burn_core::tensor::ops::conv"],[8359,"burn_tch::tensor"],[8360,"burn_tch::element"],[8361,"burn_ndarray::tensor"],[8362,"burn_ndarray::element"],[8363,"burn_autodiff::tensor"],[8364,"core::ops::range"],[8365,"burn_tch::backend"],[8366,"burn_autodiff::grads"],[8367,"alloc::alloc"],[8368,"alloc::vec"],[8369,"burn_ndarray::backend"],[8370,"core::clone"],[8371,"burn_wgpu::graphics"],[8372,"burn_wgpu::element"],[8373,"burn_wgpu::element"],[8374,"core::default"],[8375,"core::fmt"],[8376,"core::fmt"],[8377,"core::fmt"],[8378,"burn_fusion::backend"],[8379,"alloc::string"],[8380,"burn_fusion::backend"],[8381,"core::any"],[8382,"core::fmt"],[8383,"core::convert"],[8384,"std::io::error"],[8385,"core::marker"],[8386,"core::marker"],[8387,"core::marker"],[8388,"std::path"],[8389,"std::io::error"],[8390,"gix_tempfile::handle::persist::error"],[8391,"rusqlite::error"],[8392,"rmp_serde::encode"],[8393,"r2d2"],[8394,"fallible_iterator"],[8395,"core::iter::traits::iterator"],[8396,"serde::ser"],[8397,"core::error"],[8398,"fallible_iterator"],[8399,"core::convert"],[8400,"serde::de"],[8401,"num_traits::cast"],[8402,"exr::block::samples"],[8403,"core::marker"],[8404,"num_traits::cast"],[8405,"rand_core"],[8406,"core::cmp"],[8407,"tch::wrappers::tensor"],[8408,"exr::image::validate_results"]],"d":["Type alias for the learning rate.","Backend module.","The configuration module.","Constant macro.","Data module.","Gradient clipping module.","","Learning rate scheduler module.","Module for the neural network module.","Neural network module.","Optimizer module.","Module for the recorder.","","Module for the tensor.","","Enable auto-differentiation on a backend.","Enable dynamic operation fusion on a backend that …","Tensor backend that uses <code>LibTorch</code> with the tch crate for …","Tensor backend that uses the ndarray crate for executing …","Tensor backend that uses the wgpu crate for executing GPU …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchangedalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configuration trait.","Derive macro for the config.","Configuration IO error.","File not found.","Invalid format.","","","Converts a configuration to a JSON string.","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Loads the configuration from a file.","Loads the configuration from a binary buffer.","Saves the configuration to a file.","","","","","","","Dataloader module.","Dataset module.","A batch of items.","A data loader that can be used to iterate over a dataset …","A strategy to batch items.","A data loader that can be used to iterate over a dataset.","A builder for data loaders.","A data loader iterator that can be used to iterate over a …","The dataset trait defines a basic collection of items with …","Dataset iterator.","The thread is done.","A strategy to batch items with a fixed batch size.","A message that can be sent between threads.","A multi-threaded data loader that can be used to iterate …","A progress struct that can be used to track the progress …","Adds an item to the strategy.","","Batches the items.","","Sets the batch size to a fix number.The fix batch strategy …","Module for batching items.","","","","","","","","","","","","","Builds the data loader.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the item at the given index.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the dataset is empty.","The number of items that have been processed.","The total number of items that need to be processed.","Returns a boxed iterator to iterate over the data loader.","","","Returns an iterator over the dataset.","Gets the number of items in the dataset.","Creates a new multi-threaded batch data loader.","Creates a new batch data loader.","Creates a new data loader builder.","Creates a new multi-threaded data loader.","Creates a new strategy to batch items with a fixed batch …","Creates a new strategy of the same type.","","Sets the number of workers.","Returns the progress of the data loader.","Sets the seed for shuffling.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait for batching items of type <code>I</code> into items of type <code>O</code>.","Batches the given items.","Error when creating the connection pool.","The dataset trait defines a basic collection of items with …","Dataset iterator.","Contains the error value","Fail to download python dependencies.","The database file already exists error.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","Dataset where all items are stored in ram.","IO related error.","Contains the success value","Any other error.","Error when persisting the temporary database file.","python3 is not installed.","Result type for the sqlite dataset.","Serde related error.","Sql related error.","This struct represents a dataset where all items are …","Fail to create sqlite dataset.","Sqlite dataset error.","The <code>SqliteDatasetStorage</code> struct represents a SQLite …","This <code>SqliteDatasetWriter</code> struct is a SQLite database …","Unknown error.","venv environment is not initialized.","Determines the base directory for storing the dataset.","","","","","","","","","","","","","","","","","","","Load the dataset.","Get the path to the sqlite database file.","Get the database file name.","Fetches the database file path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks if the database file exists in the given path.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create from a csv file.","Create from a dataset. All items are loaded in memory.","Initializes a <code>SqliteDataset</code> from a SQLite database file …","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Create from a json rows file (one json per line).","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Gets the item at the given index.","","Get an item from the dataset.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert an iterator of anything into <code>FallibleIterator</code> by …","","Checks if the dataset is empty.","Checks if the dataset is empty.","Returns an iterator over the dataset.","Returns an iterator over the dataset.","Gets the number of items in the dataset.","","Return the number of rows in the dataset.","Create a huggingface dataset loader.","Creates a new in memory dataset from the given items.","Creates a new dataset iterator.","Creates a new instance of <code>SqliteDatasetWriter</code>.","","Provides a reader instance for the SQLite dataset.","Marks the dataset as completed and persists the temporary …","Sources for datasets.","","","Get the split name.","","","","Transformations to be used with datasets.","Convert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Specify a base directory to store the dataset.","Sets the base directory for storing the dataset.","Specify a huggingface cache directory to store the …","Specify a huggingface token to download datasets behind …","Create a huggingface dataset loader for a subset of the …","Serializes and writes an item to the database. The item is …","Provides a writer instance for the SQLite dataset.","Huggingface source","Fail to download python dependencies.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","MNIST dataset from Huggingface.","MNIST item.","python3 is not installed.","Fail to create sqlite dataset.","Unknown error.","venv environment is not initialized.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Image as a 2D array of floats.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Label of the image.","","","Creates a new test dataset.","","Creates a new train dataset.","","","","","","","","","","","Compose multiple datasets together to create a bigger one.","Basic mapper trait to be used with the mapper dataset.","Dataset mapping each element in an inner dataset to …","Only use a fraction of an existing dataset lazily.","Sample items from a dataset.","Shuffled a dataset, consider using sampler dataset is you …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Maps an item of type I to an item of type O.","Creates a new shuffled dataset.","Creates a new sampler dataset with replacement.","Constructs a new <code>ComposedDataset</code>.","Constructs a new <code>MapperDataset</code>.","Constructs a new <code>PartialDataset</code>.","Splits a dataset into multiple partial datasets.","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new sampler dataset with replacement.","Creates a new shuffled dataset with a fixed seed.","Creates a new sampler dataset without replacement.","Gradient Clipping provides a way to mitigate exploding …","Gradient Clipping provides a way to mitigate exploding …","Clip the gradient by norm.","Clip the gradient by norm.","Clip the gradient by value.","Clip the gradient by value.","","","","","Clip the gradient.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Initialize the gradient clipping.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Learning rate scheduler defines how the learning rate will …","Scheduler associative type to be used when saving and …","Constant learning rate scheduler","Load the state of the scheduler as a record.","Noam Learning rate schedule","Perform the scheduler step, potentially updating its …","Get the current state of the scheduler as a record.","Constant learning rate implementing learning rate scheduler…","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Constructs a new <code>ConstantLr</code>.","","","","","","","","","Noam learning rate scheduler as described in Attention Is …","Configuration to create a noam learning rate scheduler.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize a new noam learning rate scheduler.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new instance of the config.","","","","","","","","","","","","","","","","","The size of the model.","The number of steps before the exponential decay stats.","Module with auto-differentiation backend.","Record used for constant type implementing the module …","Type alias to <code>Vec&lt;B::Device&gt;</code> which supports <code>no_std</code> …","Inner module without auto-differentiation.","Trait for all neural network modules.","Derive macro for the module.","Module mapper trait.","Module visitor trait.","Define a parameter.","Parameter ID.","Type to save and load the module.","A state that can be updated during the forward pass while …","","","","","","","","","","","","","","","","","Constant macro.","","","","","","","","","","","","Collects devices in the given vector and returns it with …","","","","","","","","","","","","","","","","","","","","","","","Fork the module and all of its sub-modules to the given …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Create a new running state from a record.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Convert the module into a record containing the state.","","","","","Convert the parameter ID into a string.","List all the parameter ids in a module.","Load the module from a file using the provided file …","Load the module from a file using the provided file …","Load the module state from a record.","","","","","Map each tensor parameter in the module with a mapper.","Execute the given function on the inner value.","","","","","Map a bool tensor in the module.","Map a bool tensor in the module.","Map a float tensor in the module.","Map a float tensor in the module.","Map an int tensor in the module.","Map an int tensor in the module.","Constructs a new <code>Param</code>.","Constructs a new <code>ConstantRecord</code>.","Create a new parameter ID.","Create a new running state.","Each tensor in the module tree will not require grad.","Each tensor in the module tree will not require grad.","Get the number of parameters the module has, including all …","Get the number of parameters the module has, including all …","Save the module to a file using the provided file recorder.","Save the module to a file using the provided file recorder.","","Move the module and all of its sub-modules to the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the value on the current thread.","Gets the parameter value.","Get the same module, but on the inner backend without …","","","","","Get the current value,","Get the current value and make sure it is sync.","Visit each tensor parameter in the module with a visitor.","","","","","Visit a bool tensor in the module.","Visit a bool tensor in the module.","Visit a float tensor in the module.","Visit a float tensor in the module.","Visit an int tensor in the module.","Visit an int tensor in the module.","","","","","Create a new running state.","Applies Batch Normalization over a tensor as described in …","Configuration to create a BatchNorm layer.","The record type for the module.","The record item type for the module.","Fills tensor with specified value everywhere","Set at random some elements of the input tensor to zero …","Configuration to create a Dropout layer.","Lookup table to store a fix number of vectors.","Configuration to create an Embedding layer.","The record type for the module.","The record item type for the module.","Applies the specified amount of padding to all inputs.","Applies the specified amount of padding to all inputs.","Applies the Gaussian Error Linear Units function …","A GateController represents a gate in an LSTM cell. An …","The record type for the module.","The record item type for the module.","Applies Group Normalization over a mini-batch of inputs.","Configuration to create a GroupNorm layer.","The record type for the module.","The record item type for the module.","Enum specifying with what values a tensor should be …","Fills tensor with values according to the uniform version …","Fills tensor with values according to the uniform version …","Applies Layer Normalization over an input tensor as …","Configuration to create a LayerNorm layer.","The record type for the module.","The record item type for the module.","Applies a linear transformation to the input tensor:","Configuration to create a Linear layer.","The record type for the module.","The record item type for the module.","The Lstm module. This implementation is for a …","The configuration for a lstm module.","The record type for the module.","The record item type for the module.","Fills tensor with values drawn from normal distribution …","Fills tensor with 1s everywhere","Padding configuration for 1D operators.","Padding configuration for 2D operators.","Positional encoding layer for transformer models.","Configuration to create an PositionalEncoding layer.","The record type for the module.","The record item type for the module.","Applies the rectified linear unit function element-wise:","Dynamically calculate the amount of padding necessary to …","Dynamically calculate the amount of padding necessary to …","Four-dimensional unfolding.","Configuration to create an unfold 4D layer.","Fills tensor with values drawn uniformly between specified …","Same as no padding.","Same as no padding.","Fills tensor with values according to the normal version …","Fills tensor with values according to the uniform version …","Fills tensor with 0s everywhere","The module record associative type.","Field to be serialized.","Attention module","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","If a bias should be applied during the linear …","Vector of size <code>d_output</code> initialized from a uniform …","The module record associative type.","Field to be serialized.","If a bias should be applied during the Lstm transformation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cache module","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convolution module","The size of the hidden state.","The module record associative type.","Field to be serialized.","The size of the input features.","The size of the input features.","The size of the input features.","The size of the output features.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Spacing between kernel elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A value required for numerical stability. Default: 1e-5","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","A value required for numerical stability. Default: 1e-5","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor by adding the …","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Returns sinusoids for positional embedding introduced in …","Gated Recurrent Unit module.","The module record associative type.","Field to be serialized.","Initialize a new dropout module.","","","Initialize a new embedding module.","","","","","","","Inits a tensor of given shape with values depending on …","Initialize a new linear module.","","","","","Initialize a new batch norm module.","","","","","Initialize a new group norm module.","","","","","Initialize a new layer norm module.","","","","","","","Initialize a new PositionalEncoding module.","","","","","","","","","","Initialize a new unfold 4k module.","","Initialize a new embedding module with a record.","Inits a tensor of given shape with values depending on …","Initialize a new linear module with a record.","Initialize a new batch norm module with a record.","Initialize a new group norm module with a record.","Initialize a new layer norm module with a record.","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Lstm initializer","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The size of the kernel.","","","","","","","","","","","","","","Loss module","Long Short-Term Memory module.","","","","","","","","","","","","","","Momentum used to update the metrics. Default: 0.1","The module record associative type.","Field to be serialized.","Create a new instance of the config.","Create a new instance of the config.","Create the module.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create the module.","Initialize a new gate_controller module.","Create a new instance of the config.","Initialize a new gate_controller module with a record.","The module record associative type.","Field to be serialized.","The number of features.","The module record associative type.","Field to be serialized.","","","","","","","","The module record associative type.","Field to be serialized.","The padding configuration.","Pooling module","The probability of randomly zeroes some elements of the …","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The stride of the convolution.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Transformer modulehe module record associative type.","Field to be serialized.","Matrix of shape <code>[d_input, d_output]</code> initialized from a …","The module record associative type.","Field to be serialized.","A boolean value that when set to <code>true</code>, this module has …","If a bias should be applied during the linear …","Spacing between kernel elements.","A value required for numerical stability. Default: 1e-5","A value required for numerical stability. Default: 1e-5","A value required for numerical stability. Default: 1e-5","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Maximum sequence size to use.","Max time scale to use.","Momentum used to update the metrics. Default: 0.1","The padding configuration.","The stride of the convolution.","Whether to use fan out only in initialization formula","Whether to use fan out only in initialization formula","The gain to use in initialization formula","The gain to use in initialization formula","The gain to use in initialization formula","The gain to use in initialization formula","The maximum value to draw from","The mean of the normal distribution","The minimum value to draw from","The standard deviation of the normal distribution","The value to fill the tensor with","Generate a padding attention mask.","Cache for the Multi Head Attention layer.","Multihead attention forward pass input argument.","Multihead attention outputs.","The multihead attention module as describe in the paper …","Configuration to create a Multi Head Attention layer.","The record type for the module.","The record item type for the module.","The module record associative type.","Field to be serialized.","Initialize a cache for autoregressive inference.","Initialize a cache for autoregressive inference, but with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The context tensor [batch_size, seq_length_1, d_model].","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","Applies the forward pass on the input tensors.","Applies the forward pass using a cache.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generate an autoregressive attention mask.","Generation padding attention mask.","","","","Initialize a new multihead attention module.","","","","","","Initialize a new multihead attention module with a record.","The type of function used to initialize neural network …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The module record associative type.","Field to be serialized.","","","The generated mask.","Register the attention mask.","Register the padding mask.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Create a new instance of the config.","Create a multihead attention input argument.","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Create a multihead attention input argument by setting the …","","","The generated tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","The attention weights [batch_size, seq_length_1, …","The dropout rate. Default: 0.1","The type of function used to initialize neural network …","The minimum value a float can take. Default: -1.0e4","A cache for a tensor.","","","","","","","Creates a new empty cache.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Applies a 1D convolution over input tensors.","Configuration to create an 1D convolution layer.","The record type for the module.","The record item type for the module.","Applies a 2D convolution over input tensors.","Configuration to create an 2D convolution layer.","The record type for the module.","The record item type for the module.","Applies a 1D transposed convolution over input tensors.","Configuration to create an 1D transposed convolution layer.","The record type for the module.","The record item type for the module.","Applies a 2D transposed convolution over input tensors.","Configuration to create an 2D transposed convolution layer.","The record type for the module.","The record item type for the module.","If bias should be added to the output.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of channels.","The number of channels.","The number of channels.","The number of input channels.","The number of output channels.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","Spacing between kernel elements.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","Controls the connections between input and output channels.","The module record associative type.","Field to be serialized.","","Initialize a new conv1d module.","","","","Initialize a new conv2d module.","","","","","Initialize a new conv transpose 1d module.","","","","","Initialize a new conv transpose 2d module.","","","","","Initialize a new conv1d module with a record.","Initialize a new conv2d module with a record.","Initialize a new conv transpose 1d module with a record.","Initialize a new conv transpose 2d module with a record.","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","The size of the kernel.","The module record associative type.","Field to be serialized.","The size of the kernel.","The module record associative type.","Field to be serialized.","The size of the kernel.","The module record associative type.","Field to be serialized.","The size of the kernel.","The module record associative type.","Field to be serialized.","","","","","","","","","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","","","","","The padding configuration.","The module record associative type.","Field to be serialized.","The padding configuration.","The module record associative type.","Field to be serialized.","The padding configuration.","The module record associative type.","Field to be serialized.","The padding configuration.","The module record associative type.","Field to be serialized.","The padding output configuration.","The module record associative type.","Field to be serialized.","The padding output configuration.","The module record associative type.","Field to be serialized.","","","","","","","","","The stride of the convolution.","The module record associative type.","Field to be serialized.","The stride of the convolution.","The module record associative type.","Field to be serialized.","The stride of the convolution.","The module record associative type.","Field to be serialized.","The stride of the convolution.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","If bias should be added to the output.","If bias should be added to the output.","If bias should be added to the output.","If bias should be added to the output.","Spacing between kernel elements.","Spacing between kernel elements.","Spacing between kernel elements.","Spacing between kernel elements.","Controls the connections between input and output channels.","Controls the connections between input and output channels.","Controls the connections between input and output channels.","Controls the connections between input and output channels.","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The padding configuration.","The padding configuration.","The padding configuration.","The padding configuration.","The padding output configuration.","The padding output configuration.","The stride of the convolution.","The stride of the convolution.","The stride of the convolution.","The stride of the convolution.","The Gru module. This implementation is for a …","The configuration for a gru module.","The record type for the module.","The record item type for the module.","If a bias should be applied during the Gru transformation.","","","","","","","","","","","","","","","","","The size of the hidden state.","The module record associative type.","Field to be serialized.","The size of the input features.","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass on the input tensor. This GRU …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Initialize a new gru module.","","","","","Initialize a new gru module.","Gru initializer","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new instance of the config.","The module record associative type.","Field to be serialized.","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","Gru initializer","The mean of the losses will be returned.","Calculate the cross entropy loss from the input logits and …","Configuration to create a Binary Cross-entropy loss.","The record type for the module.","The record item type for the module.","Calculate the cross entropy loss from the input logits and …","Configuration to create a Cross-entropy loss.","The record type for the module.","The record item type for the module.","Calculate the mean squared error loss from the input …","The mean of the losses will be returned.","The reduction type for the loss.","The sum of the losses will be returned.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the criterion on the input tensor.","Compute the criterion on the input tensor.","Compute the criterion on the input tensor.","Compute the criterion on the input tensor without reducing.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Initialize Binary Cross-entropy loss.","","","","","Initialize Cross-entropy loss.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","Create a new instance of the config.","Create a new instance of the config.","For backward compatibility.","Create the criterion.","","","The module record associative type.","Field to be serialized.","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create weighted binary cross-entropy.","Weights for cross-entropy.","The module record associative type.","Field to be serialized.","Weights for cross-entropy.","The module record associative type.","Field to be serialized.","Create binary cross-entropy with probabilities as input …","Create cross-entropy with probabilities as input instead …","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","The Lstm module. This implementation is for a …","The configuration for a lstm module.","The record type for the module.","The record item type for the module.","If a bias should be applied during the Lstm transformation.","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","The size of the hidden state.","The module record associative type.","Field to be serialized.","The size of the input features.","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","Applies the forward pass on the input tensor. This LSTM …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialize a new lstm module.","","","","Initialize a new lstm module with a record.","Lstm initializer","The module record associative type.","Field to be serialized.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new instance of the config.","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lstm initializer","Applies a 1D adaptive avg pooling over input tensors.","Configuration to create a 1D adaptive avg pooling layer.","Applies a 2D adaptive avg pooling over input tensors.","Configuration to create a 2D adaptive avg pooling layer.","Applies a 1D avg pooling over input tensors.","Configuration to create a 1D avg pooling layer.","Applies a 2D avg pooling over input tensors.","Configuration to create a 2D avg pooling layer.","Applies a 1D max pooling over input tensors.","Configuration to create a 1D max pooling layer.","Applies a 2D max pooling over input tensors.","Configuration to create an 2D max pooling layer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the padding is counted in the denominator when …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dilation.","The dilation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Initialize a new adaptive avg pool 1d module.","","Initialize a new adaptive avg pool 2d module.","","","","Initialize a new avg pool 1d module.","","Initialize a new avg pool 2d module.","","","Initialize a new max pool 1d module.","","","","Initialize a new max pool 2d module.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","The size of the kernel.","The size of the kernel.","The size of the kernel.","The size of the kernel.","","","","","","","","","","","","","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","Create a new instance of the config.","The size of the output.","The size of the output.","The padding configuration.","The padding configuration.","The padding configuration.","The padding configuration.","","","","","","","The stride.","The stride.","The strides.","The strides.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","If the padding is counted in the denominator when …","If the padding is counted in the denominator when …","The dilation.","The dilation.","The padding configuration.","The padding configuration.","The padding configuration.","The padding configuration.","The stride.","The stride.","The strides.","The strides.","Applies the position-wise feed-forward network to the …","Configuration to create a position-wise feed-forward layer.","The record type for the module.","The record item type for the module.","The transformer decoder module as describe in the paper …","Autoregressive cache for the Transformer Decoder layer.","Configuration to create a Transformer Decoder layer.","Transformer Decoder forward pass input argument.","Transformer Decoder layer module.","The record type for the module.","The record item type for the module.","The record type for the module.","The record item type for the module.","The transformer encoder module as describe in the paper …","Autoregressive cache for the Transformer Encoder layer.","Configuration to create a Transformer Encoder layer.","Transformer Encoder forward pass input argument.","Transformer encoder layer module.","The record type for the module.","The record item type for the module.","The record type for the module.","The record item type for the module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The size of the position-wise feed-forward network.","The size of the position-wise feed-forward network.","The size of the hidden inner features.","The size of the model.","The size of the model.","The size of the input and output features.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dropout rate. Default: 0.1","The module record associative type.","Field to be serialized.","The dropout rate. Default: 0.1","The module record associative type.","Field to be serialized.","The dropout rate. Default: 0.1","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the forward pass.","Applies the forward pass on the input tensor.","Applies the forward pass on the input tensor.","Applies the forward pass on the input using autoregressive …","Applies the forward pass on the input tensor using …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","The module record associative type.","Field to be serialized.","","","","Initialize a new Transformer Decoder module.","","","","","","","","","Initialize a new transformer encoder module.","","","","","","","","","Initialize a new position-wise feed-forward module.","","","","Initialize a new Transformer Decoder module with a record.","Initialize a new transformer encoder module with a record.","Initialize a new position-wise feed-forward module with a …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","Register the attention mask.","Register the padding mask.","Register the memory attention mask.","Register the memory padding mask.","The module record associative type.","Field to be serialized.","The number of attention heads.","The number of attention heads.","The number of layers.","The number of layers.","Create a new instance of the config.","Create a transformer decoder input argument.","Create a new instance of the config.","Create a transformer encoder input argument.","Create a new instance of the config.","Create an empty autoregressive cache.","Create an empty autoregressive cache.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","Layer norm will be applied first instead of after the …","The module record associative type.","Field to be serialized.","Layer norm will be applied first instead of after the …","The module record associative type.","Field to be serialized.","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","Register the target attention mask.","Register the target padding mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The dropout rate. Default: 0.1","The dropout rate. Default: 0.1","The dropout rate. Default: 0.1","The type of function used to initialize neural network …","The type of function used to initialize neural network …","The type of function used to initialize neural network …","Layer norm will be applied first instead of after the …","Layer norm will be applied first instead of after the …","AdaGrad optimizer","AdaGrad configuration.","AdaGrad state.","The record item type for the module.","Adam optimizer as described in the paper Adam: A Method …","Adam configuration.","Adam state.","The record item type for the module.","AdamW optimizer as described in the paper Decoupled Weight …","AdamW configuration.","AdamW state.","The record item type for the module.","Adaptive momentum state.","The record item type for the module.","Adaptive momentum state.","The record item type for the module.","CenteredState is to store and pass optimizer step params.","The record item type for the module.","Accumulate gradients into a single Gradients object.","Data type that contains gradients for parameters.","Learning rate decay state (also includes sum state).","The record item type for the module.","General trait to optimize module.","Optimizer that implements stochastic gradient descent with …","Configuration to create the RMSProp optimizer.","RMSPropMomentum is to store config status for optimizer. …","RMSPropMomentumState is to store and pass optimizer step …","The record item type for the module.","State of RMSProp","The record item type for the module.","Optimizer associative type to be used when saving and …","Optimizer that implements stochastic gradient descent with …","Configuration to create the Sgd optimizer.","State of Sgd.","The record item type for the module.","Simple optimizer is an opinionated trait to simplify the …","SquareAvgState is to store and pass optimizer step params.","The record item type for the module.","The state of the optimizer. It also implements record, so …","Accumulate the given gradients for each parameter in the …","Adaptor module for optimizers.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Field to be serialized.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Weight decay module for optimizerseturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Extract each tensor gradients for the given module.","","","","","","","","","","","","Get the gradients for the given parameter id.","Field to be serialized.","Return the accumulated gradients and reset the accumulator …","","","","","","","","Initialize AdaGrad optimizer.","","","","","","Initialize Adam optimizer.","","","","","","","Initialize AdamW optimizer.","","","","","","Initialize RMSProp optimizer.","","","","","","","","","","Creates a new SgdConfig with default values.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","If any tensor is contained.","The number of gradients tensors registered.","Load the state of the optimizer as a record.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Momentum module for optimizers.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Create a new gradients accumulator.","Create a new instance of the config.","Constructs a new <code>AdaGradState</code>.","Constructs a new <code>LRDecayState</code>.","Create a new instance of the config.","Constructs a new <code>AdamState</code>.","Constructs a new <code>AdaptiveMomentumState</code>.","Create a new instance of the config.","Constructs a new <code>AdamWState</code>.","Constructs a new <code>AdaptiveMomentumWState</code>.","Creates a new GradientsParams.","Create a new instance of the config.","Constructs a new <code>RMSPropState</code>.","Constructs a new <code>SquareAvgState</code>.","Constructs a new <code>CenteredState</code>.","Constructs a new <code>RMSPropMomentumState</code>.","Create a new instance of the config.","Constructs a new <code>SgdState</code>.","Record module for optimizers.","Register a gradients tensor for the given parameter id.","Remove the gradients for the given parameter id.","","","","","","","","","","","","","","","","","Field to be serialized.","Field to be serialized.","Perform the optimizer step using the given learning rate …","The optimizer step is performed for one tensor at a time …","","","A single optimization step for any tensor that represents …","","","Field to be serialized.","Field to be serialized.","Field to be serialized.","Field to be serialized.","Change the device of the state.","","","","","","Move state to device.","Move state to device.","Move state to device.","Change the device of each tensor gradients registered for …","Moves the state to a device.","Moves the state to a device.","Moves the state to a device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the current state of the optimizer as a recordmoothing constant.","Parameter for Adam.","Parameter for AdamW.","Parameter for Adam.","Parameter for AdamW.","if True, compute the centered RMSProp, the gradient is …","Set the default value for the field.","A value required for numerical stability.","A value required for numerical stability.","A value required for numerical stability.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","momentum for RMSProp.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Weight decay config.","Set the default value for the field.","Set the default value for the field.","Wrapper struct that adapts any simple optimizer into an …","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Sets the gradient clipping.","Weight decay implementation that transforms gradients.","Configuration to create weight decay.","State of weight decay.","The record item type for the module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Field to be serialized.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new weight decay from a config.","Create a new instance of the config.","Constructs a new <code>WeightDecayState</code>.","L2 penalty.","","","Moves the state to a device.","","","","","Transforms a gradient.","","","","","","","","","","","","","","","","","","","","","Momemtum implementation that transforms gradients.","Configuration to create momentum.","State of momentum.","The record item type for the module.","","","","","","","","","","","","","","","Dampening factor.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Momemtum factor","Enables Nesterov momentum, see On the importance of …","Creates a new momentum from a config.","Create a new instance of the config.","Constructs a new <code>MomentumState</code>.","","","Moves the state to a device.","","","","","Transforms a gradient.","","","","","","","","","","","","","","","","","Field to be serialized.","","","","","Dampening factor.","Momemtum factor","Enables Nesterov momentum, see [On the importance of …","Optimizer adaptor record.","Optimizer adaptor record item.","Optimizer adaptor record item.","Optimizer adaptor record item.","Rank 1.","Rank 1.","Rank 2.","Rank 2.","Rank 3.","Rank 3.","Rank 4.","Rank 4.","Rank 5.","Rank 5.","Rank 6.","Rank 6.","Rank 7.","Rank 7.","Rank 8.","Rank 8.","Version 1.","Version 1.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Converts the optimizer state into the record.","Convert the state into the record.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts the record into the optimizer state.","Convert the record into the state.","","","","","","","","","","","","","","","","","","","","","","","","","In memory recorder using the bincode format.","File recorder using the bincode format.","File recorder using the bincode format compressed with …","Metadata of a record.","Record that can be saved by a Recorder.","Record that can be saved by a Recorder without the item.","Recorder trait specialized to save and load data to and …","Recorder optimized for compactness.","Debug recorder.","Default file recorder.","Default recorder.","Precision settings optimized for precision.","File not found.","Recorder trait specialized to save and load data to and …","Float element type.","Default precision settings.","Precision settings optimized for compactness.","Integer element type.","Type of the item that can be serialized and deserialized.","File recorder using the json format compressed with gzip.","Arguments used to load recorded objects.","In memory recorder using the Named MessagePack.","File recorder using the named msgpack format.","File recorder using the named msgpack format compressed …","Inference recorder compatible with no-std.","Training recorder compatible with no-std inference.","(De)serialize parameters into a clean format.","Settings allowing to control the precision when …","File recorder using pretty json format for easy …","Trait to define a family of types which can be recorded …","Derive macro for the record.","Arguments used to record objects.","Record output type.","Record any item implementing Serialize and DeserializeOwned…","Error that can occur when using a Recorder.","Recorder optimized for compactness making it a good choice …","Type of the settings used by the recorder.","Other error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","File extension of the format used by the recorder.","","","","","","","Float type used to record the item.","","","","","","","","","","","","","","","","","","Format used to record the item.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert the given item into a record.","","","","","","","","","","","","","","","","","Int type used to record the item.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the current record into the corresponding item …","Item to record.","Load an item from the given arguments.","Load an item from the given arguments.","Loads an item.","","","","","","","","","Metadata of the record.","Metadata of the record.","Constructs a new <code>ParamSerde</code>.","Constructs a new <code>BinBytesRecorder</code>.","Constructs a new <code>NamedMpkBytesRecorder</code>.","Constructs a new <code>BurnMetadata</code>.","Creates a new record.","Constructs a new <code>BurnRecordNoItem</code>.","Constructs a new <code>BinFileRecorder</code>.","Constructs a new <code>BinGzFileRecorder</code>.","Constructs a new <code>JsonGzFileRecorder</code>.","Constructs a new <code>PrettyJsonFileRecorder</code>.","Constructs a new <code>NamedMpkGzFileRecorder</code>.","Constructs a new <code>NamedMpkFileRecorder</code>.","Records an item.","Records an item.","Saves an item.","","","","","","","","","","","","","Settings used to record the item.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Burn record version used to record the item.","","","","","","","","","","","","","","","","","Trait that list all operations that can be applied on all …","Trait that list all operations that can be applied on all …","Bernoulli distribution.","Bernoulli distribution with the given probability.","A type-level representation of the kind of a bool tensor.","Concrete variant.","Approximate number of <code>bf16</code> significant digits in base 10","Approximate number of <code>f16</code> significant digits in base 10","Data structure for tensors.","Data structure for serializing and deserializing tensor …","Uniform distribution from 0 (inclusive) to 1 (exclusive).","Device type used by the backend.","Dimension trait.","Iterator given by (Tensor::iter_dim).","Distribution for random value of a tensor.","Distribution sampler for random value of a tensor.","Distribution sampler kind for random value of a tensor.","Double precision, e.g. f64.","","","<code>bf16</code> Euler’s number (ℯ)","<code>f16</code> Euler’s number (ℯ)","<code>bf16</code> machine epsilon value","<code>f16</code> machine epsilon value","The type of the tensor elements.","Element trait for tensor.","Element conversion trait for tensor.","Element precision trait for tensor.","Element trait for random value of a tensor.","","","<code>bf16</code> 1/π","<code>f16</code> 1/π","","","<code>bf16</code> 1/√2","<code>f16</code> 1/√2","","","<code>bf16</code> 2/π","<code>f16</code> 2/π","","","<code>bf16</code> 2/√π","<code>f16</code> 2/√π","","","<code>bf16</code> π/2","<code>f16</code> π/2","","","<code>bf16</code> π/3","<code>f16</code> π/3","","","<code>bf16</code> π/4","<code>f16</code> π/4","","","<code>bf16</code> π/6","<code>f16</code> π/6","","","<code>bf16</code> π/8","<code>f16</code> π/8","A type-level representation of the kind of a float tensor","Full precision, e.g. f32.","Half precision, e.g. f16.","<code>bf16</code> positive Infinity (+∞)","<code>f16</code> positive Infinity (+∞)","Inner primitive tensor.","A type-level representation of the kind of a int tensor.","","","<code>bf16</code> 𝗅𝗇 10","<code>f16</code> 𝗅𝗇 10","","","<code>bf16</code> 𝗅𝗇 2","<code>f16</code> 𝗅𝗇 2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀2","<code>f16</code> 𝗅𝗈𝗀₁₀2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀ℯ","<code>f16</code> 𝗅𝗈𝗀₁₀ℯ","","","<code>bf16</code> 𝗅𝗈𝗀₂10","<code>f16</code> 𝗅𝗈𝗀₂10","","","<code>bf16</code> 𝗅𝗈𝗀₂ℯ","<code>f16</code> 𝗅𝗈𝗀₂ℯ","Number of <code>bf16</code> significant digits in base 2","Number of <code>f16</code> significant digits in base 2","Largest finite <code>bf16</code> value","Largest finite <code>f16</code> value","Maximum possible <code>bf16</code> power of 10 exponent","Maximum possible <code>f16</code> power of 10 exponent","Maximum possible <code>bf16</code> power of 2 exponent","Maximum possible <code>f16</code> power of 2 exponent","Maximum subnormal <code>bf16</code> value","Maximum subnormal <code>f16</code> value","Smallest finite <code>bf16</code> value","Smallest finite <code>f16</code> value","Minimum possible normal <code>bf16</code> power of 10 exponent","Minimum possible normal <code>f16</code> power of 10 exponent","One greater than the minimum possible normal <code>bf16</code> power of …","One greater than the minimum possible normal <code>f16</code> power of …","Smallest positive normal <code>bf16</code> value","Smallest positive normal <code>f16</code> value","Minimum positive subnormal <code>bf16</code> value","Minimum positive subnormal <code>f16</code> value","<code>bf16</code> Not a Number (NaN)","<code>f16</code> Not a Number (NaN)","<code>bf16</code> negative infinity (-∞).","<code>f16</code> negative infinity (-∞)","<code>bf16</code> -1","<code>f16</code> -1","<code>bf16</code> -0","<code>f16</code> -0","Named dimension macro.","Named dimensions trait.","A tensor with named dimensions.","Normal distribution.","Normal distribution with the given mean and standard …","Trait that list all operations that can be applied on all …","<code>bf16</code> 1","<code>f16</code> 1","Other precision.","","","<code>bf16</code> Archimedes’ constant (π)","<code>f16</code> Archimedes’ constant (π)","Element precision trait for tensor.","The primitive type of the tensor.","Options for Tensor pretty printing","The radix or base of the internal representation of <code>bf16</code>","The radix or base of the internal representation of <code>f16</code>","Define how data is read, sync or async.","Trait used for reshape arguments.","","","<code>bf16</code> √2","<code>f16</code> √2","Shape of a tensor.","Standard distribution.","Sync data variant.","Transpose marker (zero-size type). Used to sugar the …","A tensor with a given backend, shape and data type.","Tensor type.","A type-level representation of the kind of a tensor.","Uniform distribution.","Uniform distribution. The range is inclusive.","<code>bf16</code> 0","<code>f16</code> 0","Calculate absolute value on all elements of a tensor","","","","","","","Apply element wise absolute value operation","","","","","","","","","","","","","","","The activation module.","Adds two tensors together.","","","","","","","","","","","Applies element wise addition operation.","","","","","","","Adds a scalar to a tensor element-wise.","Applies element wise addition operation with a scalar.","","","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Gets the indices of the maximum elements of a tensor along …","Applies the argmax function along the given dimension and …","","","Gets the indices of the minimum elements of a tensor along …","Applies the argmin function along the given dimension and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Asserts the data is approximately equal to another data.","Asserts the data is approximately equal to another data.","Asserts each value is within a given range.","","","","","","","","","","","","","The backend module.","Backward pass of the tensor.","A 16-bit floating point type implementing the <code>bfloat16</code> …","","Inverses boolean values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Concatenates the given tensors along the given dimension.","Concatenates all tensors into a new one along the given …","","","","","","","","","","","","","","We use a macro for all checks, since the panic message …","Clamp the tensor between the given min and max values.","Restrict a value to a certain interval unless it is NaN.","Restrict a value to a certain interval unless it is NaN.","Clamp the tensor between the given min and max values.","","","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","","","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","","","","","Returns the floating point category of the number.","","Returns the floating point category of the number.","","","","","","","","","","","","","","","","","","","","","","","","","","The container module.","Converts the data to a different element type.","Converts the data to a different element type.","Converts the data to a different element type.","Returns a number composed of the magnitude of <code>self</code> and the …","Returns a number composed of the magnitude of <code>self</code> and the …","","","","","Applies element wise cosine operation.","","","","","Calculate covaraince matrix between different entries …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Detach the current tensor from the autodiff graph.","Returns the device on which the tensor is allocated.","Returns the device of the current tensor.","","","","","","","Create diagonal matrix.","Returns the dimensions of the current tensor.","The dimensions of the tensor.","Divides two tensors.","","","","","","","","","Applies element wise division operation.","","","","","","","","","Divides a tensor by a scalar element-wise.","Applies element wise division operation with a scalar.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of starting elements and ending elements to display","Converts and returns the converted element.","","","Returns the name of the element type.","Creates an empty tensor with the given shape.","Create an empty tensor of the given shape.","","","","Create an empty tensor of the given shape.","","","","","","","","","","","","","Equates the given tensors.","Applies element wise equal comparison and returns a …","","","","Element-wise equality between two tensors.","Applies element wise equal comparison and returns a …","","","","","","","","","","","","","","","Applies the error function element wise.","","","","","Applies element wise exponential operation.","","","","","","","","","A 16-bit floating point type implementing the IEEE …","Flatten the tensor along a given range of dimensions.","Convert the bool tensor into an float tensor.","Returns a new tensor with the same shape and device as the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Constructs a <code>bf16</code> value from the raw bits.","Constructs a 16-bit floating point value from the raw bits.","Create a boolean tensor from data.","Create a boolean tensor from data on the given device.","Creates a tensor from the given data.","Create a tensor from the given data.","","","","Create a tensor from the given data on the given device.","Converts an element to another element.","","","","","Constructs a <code>bf16</code> value from a 32-bit floating point value.","Constructs a 16-bit floating point value from a 32-bit …","","","Constructs a <code>bf16</code> value from a 32-bit floating point value.","Constructs a 16-bit floating point value from a 32-bit …","","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","Create a tensor from floats (f32).","Returns a tensor on the selected backend from a full …","","","","","","","","","Convert a tensor to the autodiff backend.","Convert a tensor to the autodiff backend.","","","","Create a tensor from integers (i32).","","","","","","","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Converts from a primitive tensor into a tensor.","","","","","Create a named tensor from a tensor.","","","","","","","","","","Converts the usize data to a different element type.","Creates a tensor filled with elements equal to the given …","Create a tensor of the given shape where each element is …","","","Populates the data with the given value","Create a tensor of the given shape where each element is …","Gathers elements from a tensor along an axis.","Gather tensor elements corresponding to the given indices …","","","","","Get the gradients of a tensor if it exist.","Remove the grad tensor from the grads struct returning the …","Replace the grad tensor from the grads struct with the …","Element-wise greater than comparison between two tensors.","Applies element wise greater comparison and returns a …","","","Element-wise greater than comparison between a tensor and …","Applies element wise greater comparison and returns a …","","","Element-wise greater than or equal comparison between two …","Applies element wise greater-equal comparison and returns …","","","Element-wise greater than or equal comparison between a …","Applies element wise greater-equal comparison and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the inner tensor without the autodiff information.","Returns the inner tensor without the autodiff information.","","","","Executes an operation on the tensor and modifies its value.","Convert the bool tensor into an int tensor.","Returns a new tensor with the same shape and device as the …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the data from the tensor.","Returns the data of the current tensor.","","","","Convert an iterator of anything into <code>FallibleIterator</code> by …","","","","","","","","Converts the tensor into a primitive tensor.","","","","Convert the tensor into a scalar.","Converts to a shape.","","","Returns <code>true</code> if this number is neither infinite nor NaN.","","","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","","Returns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.","Returns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.","","","","Returns <code>true</code> if this value is NaN and <code>false</code> otherwise.","","Returns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.","","","Returns <code>true</code> if the number is neither zero, infinite, …","","","Returns <code>true</code> if the number is neither zero, infinite, …","","","Returns true if the tensor requires gradients during the …","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","","","","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","","","","Iterate over slices of tensors alongside a given dimension.","","","","","","","","","","","","","","","","","","Applies element wise natural log operation <em>ln</em>.","","","","","Applies the natural logarithm of one plus the input …","","","","","The loss module.","Element-wise less than comparison between two tensors.","Applies element wise lower comparison and returns a …","","","Element-wise less than comparison between a tensor and a …","Applies element wise lower comparison and returns a …","","","Element-wise less than or equal comparison between two …","Applies element wise lower-equal comparison and returns a …","","","Element-wise less than or equal comparison between a …","Applies element wise lower-equal comparison and returns a …","","","","","Macro to implement the element trait for a type.","Map the current reader to another type.","","","","Fills elements of a tensor based on a boolean mask.","Update the given tensor with the value where the mask is …","","","Selects elements from a tensor based on a boolean mask.","Update the given tensor with the value tensor where the …","","","Applies the matrix multiplication operation.","Applies the matrix multiplication operation.","Gets the maximum elements of a tensor along an axis.","","Returns the maximum of the two numbers.","","","","Returns the maximum of the two numbers.","","","Find the maximum value.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","","","","","","","","","","","Computes the mean of all the elements of the tensor.","Aggregate all elements in the tensor with the mean …","","","Computes the mean of all the elements of the tensor along …","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Gets the minimum elements of a tensor along an axis.","Returns the minimum of the two numbers.","","","","","","Returns the minimum of the two numbers.","","Find the minimum value.","","","Gets the minimum elements of a tensor along an axis.","Find the minimum value along the given dimension.","","","Gets the minimum elements and indices of a tensor along an …","Find the minimum value along the given dimension.","","","","","","","","","","","","","","","","","","","The burn module.","Multiplies two tensors.","","","","","","","","","Applies element wise multiplication operation.","","","","","Applies element wise multiplication operation.","","","","","","","","","Multiplies a tensor by a scalar element-wise.","Applies element wise multiplication operation with a …","","","The name of the tensor kind.","","","","","","","","Negates a tensor.","","","","","Switch sign of each element in the tensor.","","","","","","","","","","","","Constructs a new <code>Tensor</code>.","Constructs a new <code>DataSerialize</code>.","Constructs a new <code>Data</code>.","Constructs a new <code>DistributionSampler</code>.","Constructs a new <code>Shape</code>.","","Returns the total number of elements of a tensor having …","","","Create a one hot tensor.","Creates a tensor filled with ones.","Create a tensor of the given shape where each element is …","","","Populates the data with ones.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Operations on tensors module.","","","","","","","Applies element wise power operation.","","","","","","","Returns the precision of the element.","","","","","","","Returns a random value for the given distribution.","","","Create a random tensor of the given shape where each …","Populates the data with random values.","Create a random named tensor of the given shape where each …","Create a random tensor of the given shape on the given …","Returns a new tensor with the same shape and device as the …","Read the data.","Read the data only if sync, returns None if an async …","","","","","","","Applies element wise reciprocal operation.","","","","","","","","","","","","","Repeat the tensor along the given dimension.","Repeat the tensor along the given dimension.","","","","Mark the tensor to keep gradients during the backward pass.","Reshapes the tensor.","Reshape the tensor to have the given shape.","","","","Reshape the tensor to have the given shape.","","","","","","","Sames a random value from the distribution.","Creates a new distribution sampler.","Scatters elements into a tensor along an axis.","Assign the gathered elements corresponding to the given …","","","Select tensor elements along the given dimension …","Select the tensor elements along the given dimension …","","","Assign the selected elements along the given dimension …","Assign the selected elements along the given dimension …","","","","","","Serializes the data.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a string.","Alternate serialize adapter for serializing as a string.","Set print options","Mark the tensor as tracked or untracked depending on the …","Returns the shape of the tensor.","Returns the shape of the current tensor.","","","","Returns the shape of the current tensor.","The shape of the tensor.","The shape of the tensor.","","","Returns a number that represents the sign of <code>self</code>.","","Returns a number that represents the sign of <code>self</code>.","","","","","","","","Applies element wise sine operation.","","","","","","","","","Select tensor elements corresponding for the given ranges.","Returns a tensor containing the elements selected from the …","","","","Assigns the given value to the tensor elements …","Returns a copy of the current tensor with the selected …","","","","","","","","Applies element wise root square operation.","Squeeze the tensor along the given dimension, removing the …","Subtracts two tensors.","","","","","","","","","","Applies element wise subtraction operation.","","","","","","","","Subtracts a scalar from a tensor element-wise.","Applies element wise subtraction operation with a scalar.","","","Sums all the elements of the tensor.","","","","","Aggregate all elements in the tensor with the sum …","","","Sums all the elements of the tensor along a dimension.","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Swaps two dimensions of a tensor.","Swaps two dimensions of a tensor.","","","","Swap two dimensions.","","","","","","","","","Applies element wise hyperbolic tangent operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of elements to start summarizing tensor","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Converts a <code>bf16</code> into the underlying bit representation.","Converts a <code>f16</code> into the underlying bit representation.","Returns the data of the current tensor without taking …","","","","","","","Moves the tensor to the given device.","","","","Returns a new tensor on the given device.","","","","","","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f32</code> value.","","","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f32</code> value.","","Converts a <code>bf16</code> value into an <code>f64</code> value.","","Converts a <code>f16</code> value into a <code>f64</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","Converts a <code>f16</code> value into a <code>f64</code> value.","Returns a tensor with full precision based on the selected …","","","","","","","","","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","","","","","","","","","","","","","","","","","","","Converts the dimension to a string.","Converts the named dimensions to a string.","","","","","","","","","","","","","","","Returns the ordering between <code>self</code> and <code>other</code>.","Returns the ordering between <code>self</code> and <code>other</code>.","Transposes a tensor.","Transpose the tensor.","","","","Convert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsqueeze the current tensor. Create new dimensions to fit …","Creates a new tensor with a dimension of size one inserted …","","","","","","","","","","","","","","","","","","","","","","","The values of the tensor.","The values of the tensor.","Calculate the variance along the given dimension.","Calculate the variance along the given dimension without …","Calculate the variance along the given dimension and also …","Calculate the variance along the given dimension without …","","","","","","","","","","","","","","","","","","","","","","","","Creates a tensor filled with zeros.","Create a tensor of the given shape where each element is …","","","Populates the data with zeros.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Applies the Gaussian Error Linear Units function as …","Applies the log sigmoid function.","Applies the log softmax function on the input tensor along …","Applies the rectified linear unit function.","Applies the sigmoid function.","Applies the silu function","Applies the softmax function on the input tensor along the …","Applies the tanh function","Trait that allows a backend to support autodiff.","This trait defines all types and functions needed for a …","Tensor primitive to be used for all bool operations.","Device type.","Float element type.","Pointer to another backend that have a full precision …","Full precision float element type.","Gradients type.","The inner backend type.","Int element type.","Tensor primitive to be used for all int operations.","Tensor primitive to be used for all float operations.","If autodiff is enabled.","Backward pass.","Converts the inner backend tensor to the autodiff backend …","Returns the tensor with inner backend type.","Converts the inner backend tensor to the autodiff backend …","Returns the gradients of a tensor.","Pops the gradients of a tensor and returns them.","Replace the gradients of a tensor with the one provided.","Returns the tensor with inner backend type.","Converts the inner backend tensor to the autodiff backend …","Returns the tensor with inner backend type.","Name of the backend.","Seed the backend.","Sync the backend, ensure that all computation are finished.","Contains tensor of arbitrary dimension.","","","","","","","","","Returns the argument unchanged.","Get a tensor with the given ID.","","Calls <code>U::from(self)</code>.","If any tensor is contained.","The number of tensors registered.","Create an empty container.","Register a new tensor for the given ID.","Remove a tensor for the given ID and returns it.","","","","","","Computes the log softmax cross entropy between logits and …","Applies a 1D adaptive avg pooling.","Applies a 2D adaptive avg pooling.","Applies a 1D avg pooling.","Applies a 2D avg pooling.","Applies a 1D convolution.","Applies a 2D convolution.","Applies a 1D transposed convolution.","Applies a 2D transposed convolution.","Applies the embedding module.","Applies a 1D max pooling.","Applies a 1D max pooling.","Applies a 2D max pooling.","Applies a 2D max pooling with indices.","Applies a 4D to 3D unfold.","Activation function operations.","Boolean tensor primitive type used by the backend.","Bool Tensor API for basic operations, see tensor for …","Gradient computed during the backward pass for each tensor …","Gradient computed during the backward pass for each tensor …","Convolution options.","Transposed convolution options.","Device type used by the backend.","Float element type used by backend.","Float tensor primitive type used by the backend.","Full precision float element type used by the backend.","Integer element type used by backend.","Integer tensor primitive type used by the backend.","Int Tensor API for basic and numeric operations, see tensor","Gradient computed during the backward pass for each tensor …","Results from max_pool1d.","Gradient computed during the backward pass for each tensor …","Results from max_pool2d.","Module operations trait.","Operations on float tensors.","Unfold operation options.","Returns a new tensor with absolute values.","One dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 1d operation.","Two dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 2d operation.","Adds two tensors together.","Adds a scalar to a tensor.","Creates a new tensor with values from the given range.","Creates a new tensor with values from the given range with …","Gets the indices of the maximum elements of a tensor along …","Gets the indices of the minimum elements of a tensor along …","One dimensional avg pooling.","Backward pass for the avg pooling 1d operation.","Two dimensional avg pooling.","Backward pass for the avg pooling 2d operation.","Bias gradient.","Bias gradient.","Concatenates the tensors along the given dimension.","Gets the device of the tensor.","Creates a new bool tensor.","Equates the two tensors.","Creates a tensor from the data structure.","Converts the tensor to a data structure.","Converts bool tensor to float tensor.","Converts bool tensor to int tensor.","Inverses boolean values.","Repeats one dimension of the tensor a given number of …","Reshapes the tensor.","Returns the shape of the tensor.","Gets the values from the tensor for the given ranges.","Sets the values in the tensor for the given ranges.","Swaps two dimensions of a bool tensor.","Gets the data from the tensor.","Moves the tensor to the device.","Transposes a bool tensor.","","","","","","","","","","","","","","","","","","","Catcatenates tensors along a dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","","","","","","","Module with convolution operations.","One dimensional convolution.","Backward pass for the conv1d operation.","Two dimensional convolution.","Backward pass for the conv2d operation.","One dimensional transposed convolution.","Backward pass for the conv transpose 1d operation.","Two dimensional transposed convolution.","Backward pass for the conv transpose 2d operation.","Returns a new tensor with cosine values.","","","","","","","","","","","","","","","","","","","Detaches a tensor from the computation graph.","Gets the device of the tensor.","Dilation.","Dilation.","The spacing between the blocks (patches) in the original …","Divides two tensors element-wise.","Divides a tensor by a scalar.","","","","","","","","","","","","","","","","","","","Embedding operation.","Embedding backward operation.","Creates an empty tensor with the given shape.","Equal comparison of two tensors.","Equal comparison of a tensor and a scalar.","Returns a new tensor with the error function values.","Returns a new tensor with exponential values.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new tensor from the data structure.","Converts a tensor from full precision.","Creates a tensor filled with given value.","Gather elements from a tensor.","Applies the Gelu activation function.","Applies the Gelu activation function backward.","Greater than comparison of two tensors.","Greater than comparison of a tensor and a scalar.","Greater than or equal comparison of two tensors.","Greater than or equal comparison of a tensor and a scalar.","Groups.","Groups.","","","The indices tensor.","The indices tensor.","","","","","","","","","","Returns a new tensor with absolute values.","Elementwise addition.","Elementwise addition with a scalar.","Gets the indices of the maximum elements along a dimension.","Gets the indices of the minimum elements along a dimension.","Concatenates the given tensors along the given dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","Gets the device of the tensor.","Elementwise division.","Elementwise division with a scalar.","Creates a new int tensor.","Elementwise equality comparison.","Elementwise equality comparison with a scalar.","Creates a tensor from the data structure.","Creates a tensor filled with given value.","Gather elements from the tensor at the given indices.","Elementwise greater than comparison.","Elementwise greater than comparison with a scalar.","Elementwise greater than or equal comparison.","Elementwise greater than or equal comparison with a scalar.","Converts the tensor to a data structure.","Converts int tensor to float tensor.","Elementwise less than comparison.","Elementwise less than comparison with a scalar.","Elementwise less than or equal comparison.","Elementwise less than or equal comparison with a scalar.","Fills the tensor with the given value if the mask is true …","Fills the tensor with values from the source tensor if the …","Gets the maximum element in the tensor.","Gets the maximum element in the tensor along a dimension.","Gets the maximum elements and corresponding indices along …","Computes the mean of all elements in the tensor.","Computes the mean of all elements in the tensor along a …","Gets the minimum element in the tensor.","Gets the minimum elements in the tensor along a dimension.","Gets the minimum elements and corresponding indices along …","Elementwise multiplication.","Elementwise multiplication with a scalar.","Elementwise negation.","Creates a tensor of ones.","Repeats the tensor along the given dimension the given …","Reshapes the tensor.","Scatter a given value to the tensor at the given indices.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Returns the shape of the tensor.","Gets the element at the given indices.","Sets the element at the given indices.","Elementwise subtraction.","Elementwise subtraction with a scalar.","Sums all elements in the tensor.","Sums all elements in the tensor along a dimension.","Swaps two dimensions of an int tensor.","Gets the data from the tensor.","Moves the tensor to the given device.","Transposes an int tensor.","Creates a tensor of zeros.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the tensor to a data structure.","Converts float tensor to int tensor.","Returns the <code>require_grad</code> flag of a tensor.","Returns a new tensor with natural logarithm values.","Returns a new tensor with logarithm values of (1 + Xi).","Less than comparison of two tensors.","Less than comparison of a tensor and a scalar.","Less than or equal comparison of two tensors.","Less than or equal comparison of a tensor and a scalar.","Update the given tensor with the value where the mask is …","Update the given tensor with the value tensor where the …","Multiplies two tensors together using matrix …","Gets the maximum element of a tensor.","Gets the maximum elements of a tensor along an axis.","Gets the maximum elements of a tensor along an axis and …","One dimensional max pooling.","One dimensional max pooling with indices.","Backward pass for the max pooling 1d operation.","Two dimensional max pooling.","Two dimensional max pooling with indices.","Backward pass for the max pooling 2d operation.","Mean of all elements in a tensor.","Mean of all elements in a tensor along a dimension.","Gets the minimum element of a tensor.","Gets the minimum elements of a tensor along an axis.","Gets the minimum elements of a tensor along an axis and …","Multiplies two tensors together element-wise.","Multiplies a tensor by a scalar.","Negates a tensor element-wise.","Constructs a new <code>Conv2dBackward</code>.","Constructs a new <code>MaxPool1dBackward</code>.","Constructs a new <code>MaxPool1dWithIndices</code>.","Constructs a new <code>MaxPool2dBackward</code>.","Constructs a new <code>MaxPool2dWithIndices</code>.","Constructs a new <code>Conv1dBackward</code>.","Constructs a new <code>ConvOptions</code>.","Constructs a new <code>ConvTransposeOptions</code>.","Constructs a new <code>UnfoldOptions</code>.","Creates a new tensor with ones.","The output tensor.","The output tensor.","Padding.","Padding.","The number of zero-padding pixels added to each side of …","Padding out.","Module with pooling operations.","Returns a new tensor with values raised to the power of …","Creates a new tensor with random values.","Calculates the reciprocals elementwise","Applies the ReLU activation function.","Applies the ReLU activation function backward.","Repeat the tensor along the given dimension.","Reshapes a tensor.","Scatter elements into a tensor.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Sets the <code>require_grad</code> flag of a tensor.","Gets the shape of the tensor.","Returns a new tensor with sine values.","Select tensor elements corresponding for the given ranges.","Assign the selected elements corresponding for the given …","Returns a new tensor with square root values.","Stride.","Stride.","The number of positions to slide over the input tensor in …","Subtracts two tensors.","Subtracts a scalar from a tensor.","Sum of all elements in a tensor.","Sum of all elements in a tensor along a dimension.","Swaps two dimensions of a tensor.","Returns a new tensor with tangent values.","Converts the tensor to a data structure.","Moves the tensor to the given device.","Converts a tensor to full precision.","","","","Transposes a tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Four-dimensional unfolding.","","","","","","","","","","","","","","","","","","","Weights gradient.","Weights gradient.","Gradient.","Gradient.","Gradient.","Gradient.","Creates a new tensor with zeros.","Calculate the expected output size when doing a …","Calculate the expected padding size required when applying …","Calculate the expected output size when doing a transposed …","Calculate the expected output size when doing a pooling …"],"i":[0,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,21,23,24,25,26,21,23,24,26,21,24,25,25,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,24,21,23,24,25,26,21,23,24,25,26,0,21,24,25,25,21,23,24,25,26,21,23,24,25,26,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,26,26,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,25,26,21,23,25,26,21,23,25,26,21,23,24,25,26,21,23,24,25,26,21,24,25,21,23,24,25,26,21,24,25,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,23,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,24,21,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,26,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,25,26,21,23,24,25,26,21,24,21,24,24,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,21,23,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,25,21,24,25,21,24,25,21,23,24,25,21,23,24,25,26,24,25,21,24,25,21,24,25,21,23,24,25,26,21,23,24,25,26,21,23,24,21,23,24,25,26,21,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,26,26,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,0,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,25,21,24,25,21,24,25,21,24,25,21,24,25,24,25,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,21,23,24,25,26,25,21,24,25,21,24,25,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,0,21,23,24,21,24,25,26,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,26,21,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,24,25,26,21,23,24,25,26,24,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,21,23,24,25,26,0,21,24,25,26,0,0,0,53,53,53,53,0,53,53,53,53,53,53,53,53,53,52,52,52,53,53,53,53,53,53,0,0,68,0,0,0,0,0,0,0,68,0,0,0,0,74,60,74,60,63,0,70,63,71,60,67,68,70,63,71,60,67,68,63,67,67,70,63,71,60,67,68,70,63,71,60,67,68,70,63,71,60,67,68,70,63,71,60,67,68,67,68,70,63,71,60,67,68,66,70,63,71,60,67,68,70,63,71,60,67,68,66,67,67,64,70,71,66,66,70,70,63,71,60,74,60,63,69,63,67,70,63,71,60,67,68,70,63,71,60,67,68,70,63,71,60,67,68,70,63,71,60,67,68,70,63,71,60,67,68,0,75,84,0,0,353,82,84,0,0,0,84,353,84,84,82,0,84,84,0,82,0,0,0,82,82,78,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,78,78,79,79,81,78,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,78,82,82,84,84,81,78,85,79,92,72,82,82,84,84,84,84,84,84,84,81,78,85,92,92,81,78,92,78,66,92,81,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,72,72,66,66,66,66,66,92,81,79,92,72,85,72,78,85,0,82,84,81,78,82,84,0,72,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,79,92,72,82,84,81,78,85,79,78,79,79,79,85,78,0,82,0,0,0,0,82,82,82,82,100,98,100,98,98,98,100,98,100,98,98,100,98,100,98,98,100,98,100,98,100,98,100,98,98,100,98,100,98,100,100,98,100,98,100,98,100,98,100,98,0,0,0,0,0,0,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,106,102,103,104,105,107,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,102,103,104,105,107,103,102,103,0,0,108,110,108,110,108,110,108,110,108,110,110,108,110,108,110,110,108,110,108,110,110,108,110,108,110,110,108,110,110,110,110,108,110,108,110,108,110,108,110,108,110,0,354,0,354,0,354,354,0,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,0,0,112,113,112,113,112,113,112,113,112,113,112,113,112,112,113,112,113,112,113,112,113,112,112,113,112,113,113,112,112,113,112,113,113,112,112,113,112,113,112,113,112,113,112,113,112,112,0,0,0,247,0,0,0,0,0,0,122,0,114,115,116,117,114,115,116,117,114,115,116,117,114,115,116,117,0,116,114,114,115,116,117,114,115,116,117,115,122,114,114,114,117,114,115,116,117,114,115,116,117,116,116,116,116,114,114,115,116,116,117,122,114,114,114,117,114,114,114,114,115,116,116,116,117,114,114,114,115,117,116,114,115,116,117,114,115,116,117,114,114,114,115,122,114,114,114,117,116,0,122,122,122,114,114,114,117,122,114,114,114,114,117,126,126,126,126,126,126,114,115,116,117,122,122,122,122,122,122,115,122,114,114,114,117,114,115,116,117,114,116,114,115,116,117,114,115,116,117,114,115,116,117,114,115,116,117,117,114,247,114,114,114,117,117,117,122,114,114,114,117,129,129,129,129,129,129,114,115,116,117,117,0,0,0,0,138,0,0,0,0,0,0,155,156,0,0,0,0,0,0,0,0,0,138,138,0,0,0,0,0,0,0,0,0,0,0,0,138,138,0,0,0,0,0,0,0,155,156,0,0,138,155,156,138,138,138,149,150,0,145,146,149,150,153,154,139,140,141,142,207,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,0,209,210,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,0,207,209,210,139,207,151,139,137,161,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,132,135,138,139,142,143,146,147,150,151,154,155,156,157,160,164,165,131,133,137,140,144,148,152,155,156,158,161,162,166,165,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,143,145,146,149,150,151,153,154,138,155,156,130,130,131,132,133,133,134,135,137,138,138,139,139,140,140,141,142,143,143,144,144,145,146,147,148,148,149,150,151,152,152,153,154,155,155,156,156,157,158,158,159,160,161,162,162,163,164,165,165,166,209,210,131,133,137,140,144,148,152,155,156,158,161,162,166,131,133,137,140,144,148,152,158,161,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,134,141,145,149,153,159,163,145,146,149,150,153,154,0,0,163,164,130,130,131,132,132,133,134,135,137,138,138,139,139,140,141,142,143,143,144,145,146,147,147,148,149,150,151,151,152,153,154,155,156,157,157,158,159,160,161,162,163,164,165,165,166,132,138,139,143,147,151,132,139,207,209,210,163,164,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,134,141,145,149,153,159,163,131,133,137,140,144,148,152,155,156,158,161,162,166,165,131,133,137,140,144,148,152,155,156,158,161,162,166,0,0,131,133,137,140,144,148,152,155,156,158,161,162,166,143,145,146,130,132,137,139,143,147,151,157,161,162,165,162,149,150,143,149,150,133,140,144,148,152,158,162,209,210,165,0,130,145,146,145,146,130,132,135,138,139,142,143,146,147,150,151,154,155,156,157,160,164,165,159,160,165,131,133,137,140,144,148,152,155,156,158,161,162,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,132,133,138,139,140,143,144,147,148,151,152,155,156,157,158,162,165,0,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,131,133,137,140,144,148,152,155,156,158,161,162,166,131,133,137,140,144,148,152,155,156,158,161,162,166,130,131,132,133,134,135,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,134,135,140,141,142,147,139,165,143,147,151,132,139,157,157,143,165,165,355,356,355,356,357,358,359,360,359,360,361,0,0,0,0,0,0,0,0,171,172,168,168,175,168,169,170,171,172,173,174,175,168,169,170,171,172,173,174,169,170,171,172,173,174,169,170,171,172,173,174,174,171,172,175,168,169,170,171,172,173,174,175,168,169,170,171,172,173,174,169,172,170,175,168,169,170,171,172,173,174,175,168,169,170,171,172,173,174,171,172,169,170,170,171,172,173,174,170,170,170,175,168,169,170,171,172,173,174,171,0,0,175,168,169,169,170,171,172,173,174,169,169,175,168,169,170,171,172,173,174,171,170,171,172,170,170,175,173,173,171,172,171,172,169,173,170,171,172,171,172,173,169,172,175,170,169,170,171,172,173,174,169,170,175,168,169,170,171,172,173,174,175,168,169,170,171,172,173,174,175,168,169,170,171,172,173,174,175,168,169,170,171,172,173,174,170,171,172,170,175,168,169,170,171,172,173,174,174,169,169,169,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,179,180,181,183,184,185,187,188,189,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,181,185,189,177,177,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,180,181,184,185,188,189,192,178,182,186,190,177,179,180,181,183,184,185,187,188,189,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,177,178,178,179,180,181,181,182,182,183,184,185,185,186,186,187,188,189,189,190,190,191,192,178,182,186,190,178,182,186,190,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,179,183,187,191,177,179,180,181,183,184,185,187,188,189,191,192,177,177,178,179,180,181,181,182,183,184,185,185,186,187,188,189,189,190,191,192,177,181,185,189,177,181,185,189,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,179,183,187,191,178,182,186,190,177,179,180,181,183,184,185,187,188,189,191,192,178,182,186,190,178,182,186,190,177,181,185,189,178,182,186,190,177,179,180,181,183,184,185,187,188,189,191,192,185,187,188,189,191,192,177,180,181,184,185,188,189,192,177,179,180,181,183,184,185,187,188,189,191,192,178,182,186,190,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,181,182,185,186,189,190,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,178,182,186,190,178,182,186,190,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,179,180,183,184,187,188,191,192,177,181,185,189,177,181,185,189,177,181,185,189,177,181,185,189,177,181,185,189,185,189,177,181,185,189,0,0,0,0,193,193,194,195,196,193,194,195,196,193,194,195,196,193,194,195,196,193,195,196,193,193,194,195,196,193,194,195,196,193,196,194,193,194,195,196,193,194,195,196,193,194,194,195,196,194,194,193,194,195,196,195,193,193,194,195,196,193,193,193,194,195,196,195,194,194,194,193,195,196,194,195,196,193,196,194,193,194,195,196,193,194,193,194,195,196,193,194,195,196,193,194,195,196,193,194,195,196,195,196,194,194,193,194,195,196,193,206,0,0,0,0,0,0,0,0,0,206,0,206,206,197,198,199,200,201,202,203,204,205,206,197,198,199,200,201,202,203,204,205,197,198,199,200,201,202,203,204,205,197,198,199,200,201,202,203,204,205,198,202,205,206,197,198,199,200,201,202,203,204,205,206,197,198,199,200,201,202,203,204,205,197,200,201,204,198,202,206,197,198,199,200,201,202,203,204,205,206,197,198,199,200,201,202,203,204,205,197,197,198,198,199,200,201,201,202,202,203,204,205,198,202,198,202,205,205,206,197,198,199,200,201,202,203,204,205,199,203,206,197,197,198,199,200,201,201,202,203,204,205,206,197,198,199,200,201,202,203,204,205,199,203,198,202,198,202,199,200,203,204,198,202,197,201,202,205,198,202,203,204,197,200,201,204,199,200,203,204,198,202,197,198,199,200,201,202,203,204,205,197,198,201,202,206,197,198,199,200,201,202,203,204,205,206,197,198,199,200,201,202,203,204,205,206,197,198,199,200,201,202,203,204,205,206,197,198,199,200,201,202,203,204,205,198,202,198,202,206,197,198,199,200,201,202,203,204,205,197,198,199,200,202,203,204,197,201,201,197,201,197,201,0,0,0,0,207,207,208,209,210,207,208,209,210,209,210,207,208,209,210,207,208,209,210,207,209,210,207,207,208,209,210,207,208,209,210,207,210,208,207,208,209,210,207,208,209,210,207,208,208,209,210,209,210,208,208,207,208,209,210,209,207,207,208,209,210,207,207,209,210,207,208,209,210,209,208,208,208,207,208,209,210,207,210,208,207,208,209,210,207,208,207,208,209,210,207,208,209,210,207,208,209,210,207,208,209,210,208,208,207,208,209,210,207,0,0,0,0,0,0,0,0,0,0,0,0,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,217,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,211,213,215,217,219,221,212,214,216,218,220,222,219,221,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,217,218,219,220,221,221,222,212,214,216,218,220,222,212,214,216,218,220,222,211,212,213,214,215,216,217,218,219,220,221,222,211,211,212,213,213,214,215,215,216,217,217,218,219,219,220,221,221,222,211,212,213,214,215,216,217,218,219,220,221,222,212,214,216,218,220,222,215,217,219,221,212,214,216,218,220,222,212,214,216,218,220,222,211,213,215,217,219,221,211,213,215,217,219,221,211,213,215,217,219,221,215,219,217,221,212,214,216,218,220,222,211,212,213,214,215,216,217,218,219,220,221,222,211,213,215,217,219,221,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,211,212,213,214,215,216,217,218,219,220,221,222,212,214,216,218,220,222,212,214,216,218,220,222,211,212,213,214,215,216,217,218,219,220,221,222,215,217,219,221,215,217,219,221,215,219,217,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,228,229,223,230,237,223,230,237,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,223,226,229,230,233,236,237,240,224,227,231,234,238,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,223,228,229,230,235,236,237,239,240,223,224,224,225,226,241,227,227,228,229,230,231,231,232,233,242,234,234,235,236,237,238,238,239,240,224,227,231,234,238,224,231,238,224,231,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,225,228,232,235,239,239,240,243,244,223,223,224,225,226,241,227,228,229,230,230,231,232,233,242,234,235,236,237,237,238,239,240,223,230,237,223,230,237,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,225,228,232,235,239,224,227,231,234,238,225,226,232,233,239,240,239,240,224,227,231,234,238,224,227,231,234,238,242,242,241,241,235,236,223,230,223,230,223,241,230,242,237,224,231,228,229,235,236,228,229,235,236,228,229,223,228,229,230,235,236,224,227,231,234,238,228,229,235,236,228,229,223,226,229,230,233,236,237,240,241,241,224,227,231,234,238,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,223,224,227,230,231,234,237,238,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,224,227,231,234,238,224,227,231,234,238,243,244,223,224,225,226,241,227,228,229,230,231,232,233,242,234,235,236,237,238,239,240,223,230,237,223,230,237,223,230,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,275,0,0,0,0,0,0,0,285,245,0,269,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,271,265,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,0,245,246,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,248,250,252,253,255,257,258,260,262,263,265,267,269,271,272,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,248,250,252,253,255,257,258,260,262,263,265,267,269,271,272,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,246,249,251,254,256,259,261,264,266,268,270,273,246,269,245,280,281,282,245,276,362,278,248,248,249,250,251,252,253,253,254,255,256,257,258,258,259,260,261,262,246,263,263,264,265,266,267,268,269,270,271,272,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,249,251,254,256,259,261,264,266,268,270,273,246,246,275,250,257,262,257,262,0,255,260,265,274,245,248,249,251,253,254,256,258,259,261,246,263,264,266,268,270,272,273,0,246,246,248,250,252,253,255,257,258,260,262,263,265,267,269,271,272,274,265,267,275,285,280,281,282,276,278,252,252,257,262,285,280,281,282,276,278,251,256,261,246,266,268,270,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,248,253,258,263,272,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,280,281,282,245,276,362,278,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,246,263,264,265,266,267,268,269,270,271,272,273,274,263,253,258,253,258,263,248,253,258,263,248,253,258,263,272,248,263,272,248,253,258,263,272,0,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,0,0,0,0,289,284,287,288,289,284,287,288,284,287,288,284,287,288,289,284,287,288,289,284,287,288,284,288,289,284,287,288,289,284,287,288,284,288,289,284,287,288,287,288,289,284,287,288,289,284,287,288,287,289,284,287,284,284,288,287,284,287,288,284,289,289,284,287,288,289,284,287,288,289,284,287,288,289,284,287,288,289,284,287,288,0,0,0,0,291,283,279,290,291,283,279,290,283,279,290,283,279,290,283,291,283,279,290,291,283,279,290,283,290,291,283,279,290,291,283,279,290,283,290,291,283,279,290,279,291,283,279,290,291,283,279,290,279,283,283,291,283,279,283,290,279,283,279,290,283,291,291,283,279,290,291,283,279,290,291,283,279,290,291,283,279,290,290,291,283,279,290,283,283,283,0,0,0,0,293,295,293,295,293,295,293,295,293,295,293,295,293,295,293,295,292,294,292,293,294,295,292,293,294,295,292,293,292,293,292,293,294,295,292,293,294,295,294,295,292,293,294,295,292,293,294,295,292,293,294,295,292,293,292,293,292,293,294,295,292,293,294,295,292,293,292,293,294,295,292,293,292,293,294,295,292,293,294,295,292,293,294,295,292,293,294,295,292,293,294,295,0,0,0,0,0,0,0,0,0,0,0,0,123,0,136,0,0,136,312,0,363,0,0,0,0,0,0,0,0,0,0,363,363,0,0,0,363,123,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,297,298,299,300,301,302,303,304,305,306,307,296,297,298,299,300,301,302,303,304,305,306,307,297,298,299,300,301,302,303,304,305,306,307,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,309,310,311,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,309,309,309,309,125,302,303,304,305,306,307,309,296,297,298,123,123,309,310,311,299,300,301,302,303,304,305,306,307,309,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,312,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,309,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,312,310,363,363,363,297,298,302,303,304,305,306,307,310,311,296,297,298,309,310,311,302,303,304,305,306,307,363,363,363,297,298,302,303,304,305,306,307,296,309,310,311,309,296,297,298,299,300,301,302,303,304,305,306,307,123,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,309,296,297,298,123,309,310,311,299,300,301,302,303,304,305,306,307,0,0,340,49,0,20,313,314,0,0,49,0,0,0,0,0,0,330,313,314,313,314,313,314,326,0,0,0,0,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,0,330,330,313,314,336,0,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,313,314,0,0,0,340,49,0,313,314,330,313,314,313,314,0,328,0,313,314,0,0,313,314,313,314,0,340,20,0,0,332,0,340,49,313,314,315,313,313,313,314,314,314,109,324,120,313,313,314,314,313,313,314,314,313,313,314,314,0,315,313,313,313,313,314,314,314,314,109,109,109,324,120,313,313,314,314,315,109,324,120,109,109,109,109,315,109,324,120,315,109,324,120,313,313,313,313,313,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,314,314,314,314,314,314,313,313,314,314,313,313,314,314,18,18,18,313,313,314,314,313,313,314,314,313,313,314,314,0,109,0,109,109,20,339,346,325,340,313,313,314,314,109,324,120,119,329,18,49,341,330,17,331,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,326,109,324,120,119,313,313,314,314,313,313,313,314,314,314,0,315,313,314,109,324,120,315,109,324,120,315,109,324,120,313,313,313,314,314,314,313,314,109,324,120,119,329,18,49,330,17,331,313,314,109,324,120,119,329,18,49,330,17,331,0,329,18,18,313,314,313,313,314,314,109,313,313,314,314,109,313,314,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,313,314,329,109,326,109,324,120,119,313,314,109,109,109,17,315,313,313,313,313,314,314,314,314,109,109,109,324,120,313,313,314,314,315,109,324,120,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,346,316,313,314,326,326,109,324,120,119,109,313,313,313,314,314,314,313,314,329,18,330,17,326,109,324,120,119,315,109,324,120,329,329,329,18,18,18,330,330,330,17,17,17,109,313,313,314,314,109,313,313,314,314,313,313,314,314,0,109,109,109,313,313,313,314,314,314,313,313,313,313,313,313,313,313,314,314,314,314,314,314,314,314,109,109,324,120,119,329,18,18,49,330,17,331,331,313,314,109,313,313,313,314,314,314,20,339,346,325,340,313,313,313,313,314,314,314,314,314,109,109,324,120,119,329,18,18,18,18,18,18,18,18,49,341,330,17,17,17,17,17,17,331,331,313,314,313,314,109,109,326,109,324,120,119,109,316,313,314,314,313,313,314,314,314,313,314,313,313,314,314,313,314,109,109,313,314,313,314,313,314,313,314,336,109,324,120,119,109,313,314,109,109,109,329,313,314,313,314,109,313,314,313,314,331,313,314,313,314,314,313,314,313,314,18,315,109,324,120,18,109,315,109,324,120,313,314,109,109,109,315,109,324,120,315,109,324,120,315,109,324,120,315,109,324,120,313,314,313,313,314,314,313,313,314,314,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,336,109,324,120,119,109,109,109,313,313,314,314,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,326,109,324,120,119,339,313,314,109,109,109,329,339,109,313,314,109,109,345,17,313,313,313,314,314,314,313,313,313,314,314,314,313,313,313,314,314,314,313,313,313,314,314,314,109,313,313,313,313,314,314,314,314,313,313,313,313,314,314,314,314,313,314,313,314,109,313,314,313,313,314,314,313,313,314,314,313,314,109,313,313,314,314,109,313,313,314,314,109,313,313,314,314,0,315,109,324,120,315,109,324,120,315,109,324,120,315,109,324,120,313,314,0,20,313,314,109,315,109,324,120,315,109,324,120,109,331,315,313,313,313,313,314,314,314,314,109,324,120,315,109,324,120,315,109,324,120,313,313,313,313,313,314,314,314,314,314,315,109,324,120,315,109,324,120,315,313,313,313,313,314,314,314,314,109,324,120,315,109,324,120,315,109,324,120,313,313,313,314,314,314,313,313,313,313,313,314,314,314,314,314,0,315,313,313,313,313,314,314,314,314,109,109,109,324,120,331,313,313,314,314,313,313,314,314,315,109,324,120,328,324,120,119,313,313,314,314,315,313,313,314,314,109,109,324,120,313,313,314,314,313,313,314,314,109,329,18,341,17,339,17,313,314,109,315,109,324,120,18,109,109,0,313,314,313,313,314,314,109,313,313,313,314,314,314,364,313,314,313,313,314,314,365,313,314,109,18,331,109,109,20,20,313,313,313,314,314,314,109,313,313,313,313,314,314,314,314,313,313,314,314,326,109,324,120,119,109,326,109,324,120,119,331,313,313,313,314,314,314,341,49,315,109,324,120,315,109,324,120,315,109,324,120,313,314,329,18,313,314,313,314,0,109,326,109,324,120,119,331,329,18,313,313,313,313,314,314,314,314,313,313,314,314,109,313,313,314,314,313,313,314,314,326,109,324,120,119,326,109,324,120,119,313,313,314,314,109,109,315,313,313,313,313,314,314,314,314,109,109,109,324,120,313,313,314,314,315,109,324,120,315,313,313,314,314,109,324,120,315,109,324,120,326,109,324,120,119,331,313,313,314,314,313,313,314,314,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,346,313,314,313,314,109,313,313,313,314,314,314,326,313,314,109,109,324,120,119,314,313,313,314,314,314,313,314,313,313,314,314,313,314,109,313,314,313,314,313,314,313,314,313,314,313,314,313,314,109,324,120,119,329,18,49,330,17,331,313,313,313,314,314,314,366,332,313,314,109,18,331,313,314,313,314,314,313,314,313,314,313,314,326,109,324,120,119,339,313,313,313,314,314,314,20,339,346,325,340,313,313,313,314,314,314,109,324,120,119,329,18,49,341,330,17,331,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,109,109,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,313,314,109,314,329,18,109,109,109,109,313,314,109,20,339,346,325,340,313,314,109,324,120,119,329,18,49,341,330,17,331,313,314,315,109,324,120,18,109,109,0,0,0,0,0,0,0,0,0,0,9,9,9,9,9,128,128,9,9,9,9,128,128,128,128,128,128,128,128,128,128,9,9,9,0,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,349,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,367,368,368,368,368,367,367,367,367,367,367,368,368,368,368,352,351,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,369,352,43,41,45,44,351,32,33,350,352,43,41,45,44,351,32,33,350,367,367,367,367,32,33,350,32,33,350,0,368,368,368,368,368,368,368,368,367,352,43,41,45,44,351,32,33,350,352,43,41,45,44,351,32,33,350,367,367,32,33,350,367,367,352,43,41,45,44,351,32,33,350,352,43,41,45,44,351,32,33,350,368,368,367,367,367,367,367,32,33,350,352,43,41,45,44,351,32,33,350,367,367,367,367,370,370,367,367,367,367,32,33,32,33,41,44,352,43,41,45,44,351,32,33,350,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,371,352,43,41,45,44,351,32,33,350,367,367,367,367,367,367,367,367,367,367,367,367,367,367,367,368,368,368,368,368,368,367,367,367,367,367,367,367,367,352,43,41,45,44,351,32,33,350,367,41,44,32,33,350,33,0,367,367,367,370,370,367,367,367,367,367,367,367,367,367,367,367,32,33,350,367,367,367,367,367,367,367,367,367,32,33,350,367,352,43,41,45,44,351,32,33,350,352,43,41,45,44,351,32,33,350,352,43,41,45,44,351,32,33,350,368,352,43,41,45,44,351,32,33,350,352,43,41,45,44,351,32,33,350,352,351,352,43,45,351,367,0,0,0,0],"f":[0,0,0,0,0,0,[1,1],0,0,0,0,0,[1,1],0,[1],0,0,0,0,0,[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[[2,[-1]],7],[[2,[-1]]],3],[[[8,[-1]],7],[[8,[-1]]],9],[7],[[]],[[[2,[-1]],[10,[7]]],[[2,[-1]]],3],[[[4,[-1]],[10,[7]]],[[4,[-1]]],5],[[[8,[-1]],[10,[7]]],[[8,[-1]]],9],[[[10,[7]]]],[[[10,[7]]]],[[[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],5],[[[8,[-1]],[8,[-1]]],[],9],[[]],[[]],[[[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[-1]]],3],[[[4,[-1]],-1],[[4,[-1]]],5],[[]],[[]],[[]],[[[11,[7]],12],[[2,[13]]]],[[[11,[7]]]],[[[2,[-1]],7],[[2,[13]]],3],[[[4,[-1]],7],[[4,[13]]],5],[7],[7],[7],[[[2,[-1]],7],[[2,[13]]],3],[[[4,[-1]],7],[[4,[13]]],5],[7],[7],[7],0,[[[2,[-1]],7,7,7,6],[[2,[-1]]],3],[[[8,[-1]],7,7,7,6],[[8,[-1]]],9],[[7,7,7,6]],[[7,7,7,6]],[[[2,[-1]],[10,[7]],[10,[7]],[10,[7]],6],[[2,[-1]]],3],[[[4,[-1]],[10,[7]],[10,[7]],[10,[7]],6],[[4,[-1]]],5],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],6],[[8,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],6]],[[[10,[7]],[10,[7]],[10,[7]],6]],[[[2,[-1]],[2,[-1]],[10,[7]],[10,[7]],[10,[7]],6],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]],[10,[7]],[10,[7]],[10,[7]],6],[[4,[-1]]],5],[[[8,[-1]],[8,[-1]],[10,[7]],[10,[7]],[10,[7]],6],[[8,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],6]],[[[10,[7]],[10,[7]],[10,[7]],6]],[[[8,[-1]]],14,9],[[[16,[[2,[6]],15]],7],[[2,[6]]]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[[2,[6]]],12],[[]],[[]],[[]],[[]],[17,[[2,[6]]]],[17],[17],[17],[17],[[[2,[6]],[2,[6]]],[[2,[6]]]],[[]],[[]],[[]],[[]],[[[18,[6]],12],[[2,[6]]]],[[[18,[6]],19],[[4,[6]]]],[[[18,[6]]]],[[[18,[6]]]],[[[18,[6]]]],[[]],[[]],[[[2,[6]]],[[20,[[18,[6]]]]]],[[],[[20,[[18,[6]]]]]],[[],[[20,[[18,[6]]]]]],[[],[[20,[[18,[6]]]]]],[[],[[20,[[18,[6]]]]]],[[[2,[6]]],[[2,[-1]]],3],[[]],[[]],[[]],[[]],[[[2,[6]]],[[2,[13]]]],[[],[[4,[13]]]],[[]],[[]],[[]],[[[2,[6]]],[[2,[6]]]],[[]],[[]],[[]],[[]],[[[2,[6]],7,7],[[2,[6]]]],[[[2,[6]],17],[[2,[6]]]],[[[4,[6]],17],[[4,[6]]]],[17],[17],[17],[[[2,[6]]],17],[[],17],[[],17],[[],17],[[],17],[[[2,[6]],[10,[[11,[7]]]]],[[2,[6]]]],[[[4,[6]],[10,[[11,[7]]]]],[[4,[6]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[2,[6]],[10,[[11,[7]]]],[2,[6]]],[[2,[6]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[17],[[]],[[],[[20,[[18,[6]]]]]],[[[2,[6]],12],[[2,[6]]]],[[[4,[6]],19],[[4,[6]]]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[[2,[-1]],15]],7],[[2,[-1]]],3],[[[16,[[4,[-1]],15]],7],[[4,[-1]]],5],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[]],[[[4,[-1]],-1,-1],[[4,[-1]]],5],[[]],[[]],[[]],[[[4,[-1]],-1],[[4,[-1]]],5],[[]],[[]],[[[2,[-1]],-1],[],3],[[[4,[-1]],-1],[[4,[-1]]],5],[[]],[[]],[[[21,[-1]]],[[21,[-1]]],22],[[[23,[-1]]],[[23,[-1]]],22],[[[24,[-1]]],[[24,[-1]]],22],[[[25,[-1]]],[[25,[-1]]],22],[[[26,[-1,-2,-3]]],[[26,[-1,-2,-3]]],[22,27],[22,28],[22,29]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[[2,[-1]],[2,[-1]],[31,[[2,[-1]]]],32],[[2,[-1]]],3],[[[8,[-1]],[8,[-1]],[31,[[8,[-1]]]],32],[[8,[-1]]],9],[[31,32]],[[[2,[-1]],[2,[-1]],[31,[[2,[-1]]]],32],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]],[31,[[4,[-1]]]],32],[[4,[-1]]],5],[[[8,[-1]],[8,[-1]],[31,[[8,[-1]]]],32],[[8,[-1]]],9],[[31,32]],[[31,32]],[[[2,[-1]],[2,[-1]],[31,[[2,[-1]]]],33],[[2,[-1]]],3],[[[8,[-1]],[8,[-1]],[31,[[8,[-1]]]],33],[[8,[-1]]],9],[[31,33]],[[[2,[-1]],[2,[-1]],[31,[[2,[-1]]]],33],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]],[31,[[4,[-1]]]],33],[[4,[-1]]],5],[[[8,[-1]],[8,[-1]],[31,[[8,[-1]]]],33],[[8,[-1]]],9],[[31,33]],[[31,33]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[],[[21,[-1]]],34],[[],[[23,[-1]]],34],[[],[[24,[-1]]],34],[[],[[25,[-1]]],34],[[],[[26,[-1,-2,-3]]],[34,27],[34,28],[34,29]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[[2,[-1]]],12,3],[[[4,[-1]]],19,5],[[]],[[]],[[]],[[[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[-1]]],3],[[[4,[-1]],-1],[[4,[-1]]],5],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[[[2,[-1]],[2,[13]]],[[2,[-1]]],3],[[[8,[-1]]],[[8,[-1]]],9],[[[2,[-1]],[2,[-1]],[2,[13]]],[[2,[-1]]],3],[[[8,[-1]],[8,[-1]]],[[8,[-1]]],9],[17],[17,[[4,[-1]]],5],[17],[17],[17],[[[2,[-1]],[2,[-1]]],[[2,[6]]],3],[[[4,[-1]],[4,[-1]]],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[6]]],3],[[[4,[-1]],-1],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[17],[[]],[[[21,[-1]],35],[[37,[30,36]]],38],[[[23,[-1]],35],[[37,[30,36]]],38],[[[24,[-1]],35],[[37,[30,36]]],38],[[[25,[-1]],35],[[37,[30,36]]],38],[[[26,[-1,-2,-3]],35],[[37,[30,36]]],[38,27],[38,28],[38,29]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[18,[-1]],12],[[2,[-1]]],3],[[[18,[-1]],19],[[4,[-1]]],5],[18],[18],[18],[[[2,[39]]],[[2,[-1]]],3],[[[4,[39]]],[[4,[-1]]],5],[[]],[[]],[[]],[[],[[8,[-1]]],9],[17],[[17,40]],[[7,[2,[-1]],[2,[13]]],[[2,[-1]]],3],[[7,[4,[-1]],[4,[13]]],[[4,[-1]]],5],[7],[7],[7],[[[2,[-1]]],[[2,[-1]]],3],[[]],[[[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[8,[-1]],14],31,9],[[[8,[-1]],14],31,9],[[[8,[-1]]],30,9],[[[2,[-1]],[2,[-1]]],[[2,[6]]],3],[[[4,[-1]],[4,[-1]]],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[6]]],3],[[[4,[-1]],-1],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],[2,[-1]]],[[2,[6]]],3],[[[4,[-1]],[4,[-1]]],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[6]]],3],[[[4,[-1]],-1],[[4,[6]]],5],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[[8,[-1]]],[],9],[[[2,[13]]],[[2,[13]]]],[[[4,[13]]],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[4,[13]],[4,[13]]],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[13]]]],[[[4,[13]],13],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],7],[[2,[13]]]],[[[4,[13]],7],[[4,[13]]]],[7],[7],[7],[[[2,[13]],7],[[2,[13]]]],[[[4,[13]],7],[[4,[13]]]],[7],[7],[7],[[[16,[[2,[13]],15]],7],[[2,[13]]]],[[[16,[[4,[13]],15]],7],[[4,[13]]]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[[[2,[13]],13,13],[[2,[13]]]],[[[4,[13]],13,13],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[13]]]],[[[4,[13]],13],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[13]]]],[[[4,[13]],13],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]]],12],[[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[4,[13]],[4,[13]]],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[13]]]],[[[4,[13]],13],[[4,[13]]]],[[]],[[]],[[]],[17,[[2,[13]]]],[17,[[4,[13]]]],[17],[17],[17],[[[2,[13]],[2,[13]]],[[2,[6]]]],[[[4,[13]],[4,[13]]],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[6]]]],[[[4,[13]],13],[[4,[6]]]],[[]],[[]],[[]],[[[18,[13]],12],[[2,[13]]]],[[[18,[13]],19],[[4,[13]]]],[18],[18],[[[18,[-1]]],[],29],[[]],[[17,13],[[2,[13]]]],[[17,13],[[4,[13]]]],[17],[[7,[2,[13]],[2,[13]]],[[2,[13]]]],[[7,[4,[13]],[4,[13]]],[[4,[13]]]],[7],[7],[7],[[[2,[13]],[2,[13]]],[[2,[6]]]],[[[4,[13]],[4,[13]]],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[6]]]],[[[4,[13]],13],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],[2,[13]]],[[2,[6]]]],[[[4,[13]],[4,[13]]],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[6]]]],[[[4,[13]],13],[[4,[6]]]],[[]],[[]],[[]],[[]],[[[2,[13]]],[[20,[[18,[13]]]]]],[[[4,[13]]],[[20,[[18,[13]]]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[[],[[20,[[18,[-1]]]]],29],[[[2,[13]]],[[2,[-1]]],3],[[]],[[]],[[]],[[]],[[[2,[13]],[2,[13]]],[[2,[6]]]],[[[4,[13]],[4,[13]]],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[6]]]],[[[4,[13]],13],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],[2,[13]]],[[2,[6]]]],[[[4,[13]],[4,[13]]],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[6]]]],[[[4,[13]],13],[[4,[6]]]],[[]],[[]],[[]],[[[2,[13]],[2,[6]],13],[[2,[13]]]],[[[4,[13]],[4,[6]],13],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],[2,[6]],[2,[13]]],[[2,[13]]]],[[[4,[13]],[4,[6]],[4,[13]]],[[4,[13]]]],[[]],[[]],[[]],[[]],[[]],[[[2,[13]],7],[[2,[13]]]],[7],[7],[[[2,[13]],7],[[30,[[2,[13]],[2,[13]]]]]],[7,30],[7,30],[[[2,[13]]],[[2,[13]]]],[[[4,[13]]],[[4,[13]]]],[[]],[[]],[[[2,[13]],7],[[2,[13]]]],[[[4,[13]],7],[[4,[13]]]],[7],[7],[7],[[]],[[]],[[[2,[13]],7],[[2,[13]]]],[7],[7],[[[2,[13]],7],[[30,[[2,[13]],[2,[13]]]]]],[7,30],[7,30],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[4,[13]],[4,[13]]],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[13]]]],[[[4,[13]],13],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]]],[[2,[13]]]],[[[4,[13]]],[[4,[13]]]],[[]],[17,[[2,[13]]]],[17,[[4,[13]]]],[17],[17],[17],[[[2,[13]],7,7],[[2,[13]]]],[[7,7]],[[[2,[13]],17],[[2,[13]]]],[[[4,[13]],17],[[4,[13]]]],[17],[17],[17],[[7,[2,[13]],[2,[13]],[2,[13]]],[[2,[13]]]],[[7,[4,[13]],[4,[13]],[4,[13]]],[[4,[13]]]],[7],[7],[7],[[[2,[13]],7,[2,[13]]],[[2,[13]]]],[[[4,[13]],7,[4,[13]]],[[4,[13]]]],[7],[7],[7],[[[2,[13]],7,[2,[13]],[2,[13]]],[[2,[13]]]],[[[4,[13]],7,[4,[13]],[4,[13]]],[[4,[13]]]],[7],[7],[7],[[[2,[13]]],17],[[[4,[13]]],17],[[],17],[[],17],[[],17],[[[2,[13]],[10,[[11,[7]]]]],[[2,[13]]]],[[[4,[13]],[10,[[11,[7]]]]],[[4,[13]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[2,[13]],[10,[[11,[7]]]],[2,[13]]],[[2,[13]]]],[[[4,[13]],[10,[[11,[7]]]],[4,[13]]],[[4,[13]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[2,[13]],[2,[13]]],[[2,[13]]]],[[[4,[13]],[4,[13]]],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],13],[[2,[13]]]],[[[4,[13]],13],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]]],[[2,[13]]]],[[[4,[13]]],[[4,[13]]]],[[]],[[]],[[]],[[[2,[13]],7],[[2,[13]]]],[[[4,[13]],7],[[4,[13]]]],[7],[7],[7],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[[7,7]],[17],[[]],[[],[[20,[18]]]],[[[2,[13]],12],[[2,[13]]]],[[[4,[13]],19],[[4,[13]]]],[[]],[[]],[[]],[17,[[2,[13]]]],[17,[[4,[13]]]],[17],[17],[17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[20,[18]]]],[[[4,[-1]]],[[20,[18]]],5],[[],[[20,[18]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[[[2,[-1]]],[[2,[13]]],3],[[]],[[]],[[]],[[]],[[],6],0,[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],[2,[-1]]],[[2,[6]]],3],[[[4,[-1]],[4,[-1]]],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[6]]],3],[[[4,[-1]],-1],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],[2,[-1]]],[[2,[6]]],3],[[[4,[-1]],[4,[-1]]],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[6]]],3],[[[4,[-1]],-1],[[4,[6]]],5],[[]],[[]],[[]],[[[2,[-1]],[2,[6]],-1],[[2,[-1]]],3],[[[4,[-1]],[4,[6]],-1],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],[2,[6]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[4,[6]],[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[]],[[[2,[-1]],7],[[2,[-1]]],3],[7],[7],[[[2,[-1]],7],[[30,[[2,[-1]],[2,[13]]]]],3],[7,30],[7,30],[[[2,[-1]],7,7,7,7],[[2,[-1]]],3],[[[8,[-1]],7,7,7,7],[[8,[-1]]],9],[[7,7,7,7]],[[[2,[-1]],7,7,7,7],[[41,[[21,[-1]]]]],3],[[[8,[-1]],7,7,7,7],[[41,[[24,[-1]]]]],9],[[7,7,7,7],[[41,[[25,[-1]]]]],42],[[[8,[-1]],7,7,7,7,[8,[-1]]],[[43,[[24,[-1]]]]],9],[[7,7,7,7],[[43,[[25,[-1]]]]],42],[[[2,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[2,[-1]]],3],[[[4,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[4,[-1]]],5],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[8,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]]],[[[2,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[[21,[-1]]]]],3],[[[4,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[[23,[-1]]]]],5],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[[24,[-1]]]]],9],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[[25,[-1]]]]],42],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[[26,[-1,-2,-3]]]]],27,28,29],[[[2,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]],[2,[-1]],[2,[13]]],[[45,[[21,[-1]]]]],3],[[[4,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]],[4,[-1]],[4,[13]]],[[45,[[23,[-1]]]]],5],[[[8,[-1]],[10,[7]],[10,[7]],[10,[7]],[10,[7]],[8,[-1]]],[[45,[[24,[-1]]]]],9],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[45,[[25,[-1]]]]],42],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[45,[[26,[-1,-2,-3]]]]],27,28,29],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[[2,[-1]],7],[[2,[-1]]],3],[[[4,[-1]],7],[[4,[-1]]],5],[7],[7],[7],[[]],[[[2,[-1]],7],[[2,[-1]]],3],[7],[7],[[[2,[-1]],7],[[30,[[2,[-1]],[2,[13]]]]],3],[7,30],[7,30],[[[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[-1]]],3],[[[4,[-1]],-1],[[4,[-1]]],5],[[]],[[]],[[]],[[],46],[[],46],[[],46],[[],46],[[],46],0,[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[17,12],[[2,[-1]]],3],[17],[17],[17],[40,[[16,[[48,[47,15]],15]]]],[[[2,[-1]],39],[[2,[-1]]],3],[[[4,[-1]],39],[[4,[-1]]],5],[39],[39],[39],[[17,49,12],[[2,[-1]]],3],[[17,49,19],[[4,[-1]]],5],[[17,49]],[[17,49]],[[17,49]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[[2,[-1]],7,7],[[2,[-1]]],3],[[[2,[-1]],17],[[2,[-1]]],3],[[[4,[-1]],17],[[4,[-1]]],5],[17],[17],[17],[[7,[2,[-1]],[2,[13]],[2,[-1]]],[[2,[-1]]],3],[[7,[4,[-1]],[4,[13]],[4,[-1]]],[[4,[-1]]],5],[7],[7],[7],[50,30],[50,30],[50,30],[50,30],[50,30],[[[2,[-1]],7,[2,[13]]],[[2,[-1]]],3],[[[4,[-1]],7,[4,[13]]],[[4,[-1]]],5],[7],[7],[7],[[[2,[-1]],7,[2,[13]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],7,[4,[13]],[4,[-1]]],[[4,[-1]]],5],[7],[7],[7],[6],[[],17],[[[4,[-1]]],17,5],[[],17],[[],17],[[],17],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],[10,[[11,[7]]]]],[[2,[-1]]],3],[[[4,[-1]],[10,[[11,[7]]]]],[[4,[-1]]],5],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[2,[-1]],[10,[[11,[7]]]],[2,[-1]]],[],3],[[[4,[-1]],[10,[[11,[7]]]],[4,[-1]]],[[4,[-1]]],5],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],-1],[[2,[-1]]],3],[[[4,[-1]],-1],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]],7],[[2,[-1]]],3],[[[4,[-1]],7],[[4,[-1]]],5],[7],[7],[7],[[[2,[-1]],7,7],[[2,[-1]]],3],[[[4,[-1]],7,7],[[4,[-1]]],5],[[7,7]],[[7,7]],[[7,7]],[[],30],[[],30],[[],30],[[],30],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],5],[[]],[[]],[[]],[[],[[20,[18]]]],[[[2,[-1]],12],[[2,[-1]]],3],[[[4,[-1]],19],[[4,[-1]]],5],[[]],[[]],[[]],[[[2,[-1]]],[[2,[39]]],3],[[[4,[-1]]],[[4,[39]]],5],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[17,12],[[2,[-1]]],3],[17],[17],[17],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,52],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,30],[[53,35],54],[[53,35],54],[-1,-1,[]],[[],7],[-1,-2,[],[]],[-1,[[37,[-2,53]]],[[56,[55]]],[]],[[[58,[57]]],[[37,[-1,53]]],[]],[[-1,-2],[[59,[30]]],[],[[56,[55]]]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],30,[],[]],[[[60,[-1]],-1],30,[61,62]],[[-1,6],[[31,[[16,[-2]]]]],[],[]],[[[60,[-1]],6],[[31,[[16,[-1]]]]],[61,62]],[[[63,[-1,-2]],7],[[63,[-1,-2]]],[61,62,22,38],[61,62,22,38]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1,-2]],-3],[[65,[64]]],[61,62,22,38],[61,62,22,38],[[66,[-1]]]],[67,67],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[[67,35],54],[[[68,[-1]],35],54,38],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,7],[[31,[-2]]],[],[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,6,[]],0,0,[-1,[[48,[69]]],[]],[[[70,[-1,-2]]],[[48,[69]]],[61,62,22],[61,62]],[[[71,[-1]]],[[48,[69]]],[61,38]],[-1,[[72,[-2]]],73,[]],[-1,7,[]],[[[48,[74]],[65,[66]],[65,[75]],7,[31,[76]]],[[71,[-1]]],[61,62,22]],[[[48,[74]],[65,[66]],[65,[75]],[31,[76]]],[[70,[-1,-2]]],[],[]],[-3,[[63,[-1,-2]]],[61,62,22,38],[61,62,22,38],[[75,[-1,-2]]]],[[[16,[[65,[64]]]]],[[71,[-1]]],[]],[7,[[60,[-1]]],[]],[-1,[[48,[74]]],[]],[[[60,[-1]]],[[48,[74]]],[61,62]],[[[63,[-1,-2]],7],[[63,[-1,-2]]],[61,62,22,38],[61,62,22,38]],[-1,67,[]],[[[63,[-1,-2]],50],[[63,[-1,-2]]],[61,62,22,38],[61,62,22,38]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,[16,[-2]]],-3,[],[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[31,[77]]],77],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[78,78],[[-1,-2],30,[],[]],[[79,80],[[37,[[81,[-1]],82]]],[83,22]],[79,[[37,[77,82]]]],[[[81,[-1]]],77,[]],[78,77],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[78,6],[[82,35],[[37,[30,36]]]],[[82,35],[[37,[30,36]]]],[[84,35],[[37,[30,36]]]],[[84,35],[[37,[30,36]]]],[[[81,[-1]],35],[[37,[30,36]]],38],[[78,35],[[37,[30,36]]]],[[[85,[-1]],35],[[37,[30,36]]],38],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[84,82],[-1,-1,[]],[80,84],[-1,-1,[]],[86,84],[[[88,[87]]],84],[89,84],[90,84],[91,84],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[37,[[92,[-2]],86]]],[[56,[55]]],[22,83]],[-2,[[92,[-1]]],[22,83],[[66,[-1]]]],[[-1,80],[[37,[[81,[-2]],84]]],[[56,[55]]],[]],[-1,78,[[56,[55]]]],[-1,[[37,[[92,[-2]],86]]],[[56,[55]]],[22,83]],[80,78],[[-1,7],[[31,[-2]]],[],[]],[[[92,[-1]],7],[[31,[-1]]],[22,61,62]],[[[81,[-1]],7],[[31,[-1]]],[22,61,62,83]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[93,[-2]]],[],94],[-1,-2,[],[]],[-1,6,[]],[-1,6,[]],[-1,[[72,[-2]]],73,[]],[-1,[[72,[-2]]],73,[]],[-1,7,[]],[[[92,[-1]]],7,[22,61,62]],[[[81,[-1]]],7,[22,61,62,83]],[80,79],[[[16,[-1,15]]],[[92,[-1]]],[]],[-2,[[72,[-1]]],[],[[66,[-1]]]],[[-1,6],[[37,[[85,[-2]],84]]],[[56,[55]]],[22,61,62,95,83]],[[[72,[-1]]],[[31,[-1]]],[]],[[78,80],[[37,[[81,[-1]],84]]],[22,61,62,95,83]],[[[85,[-1]]],[[37,[30,84]]],[22,61,62,95,83]],0,[82,[[31,[96]]]],[84,[[31,[96]]]],[[[81,[-1]]],80,[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],0,[-1,[[97,[-2]]],[],94],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[79,80],79],[[78,-1],78,[[56,[55]]]],[[79,80],79],[[79,80],79],[[79,80],79],[[[85,[-1]],80,-1],[[37,[7,84]]],[22,61,62,95,83]],[[78,6],[[37,[[85,[-1]],84]]],[22,61,62,95,83]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[98,98],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[98]]],99],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[[98,35],[[37,[30,36]]]],[-1,-1,[]],[-1,-1,[]],[[100,7],[[31,[98]]]],0,[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],0,[100,7],[[98,-1],37,101],[[],100],[-1,-2,[],[]],[[],100],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[102,[-2,-1]],7],[[31,[-1]]],[22,61,62],[[66,[-1]]]],[[[103,[-2,-1]],7],[[31,[-1]]],[61,62],[[66,[-1]]]],[[[104,[-2]],7],[[31,[-1]]],22,[[66,[-1]]]],[[[105,[-2,-4,-1]],7],[[31,[-3]]],[61,62],[[66,[-1]]],[61,62],[[106,[-1,-3]],61,62]],[[[107,[-2,-1]],7],[[31,[-1]]],[22,61,62],[[66,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[102,[-2,-1]]],7,[22,61,62],[[66,[-1]]]],[[[103,[-2,-1]]],7,[61,62],[[66,[-1]]]],[[[104,[-2]]],7,22,[[66,[-1]]]],[[[105,[-2,-4,-1]]],7,[61,62],[[66,[-1]]],[61,62],[[106,[-1,-3]],61,62]],[[[107,[-2,-1]]],7,[22,61,62],[[66,[-1]]]],[[-1,-2],-3,[],[],[]],[[-2,76],[[102,[-2,-1]]],[],[[66,[-1]]]],[[-2,7],[[103,[-2,-1]]],[61,62],[[66,[-1]]]],[[[16,[-1,15]]],[[104,[-1]]],[]],[[-1,-2],[[105,[-1,-2,-3]]],[],[],[]],[[-1,7,7],[[107,[-1,-2]]],[],[]],[[-2,7],[[16,[[107,[[65,[-2,15]],-1]],15]]],[],[[66,[-1]]]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,7],[[103,[-2,-1]]],[61,62],[[66,[-1]]]],[[-2,50],[[102,[-2,-1]]],[],[[66,[-1]]]],[[-2,7],[[103,[-2,-1]]],[61,62],[[66,[-1]]]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[108,[109,[-1]]],[[109,[-1]]],9],[110,110],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[110]]],99],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[[110,35],54],[-1,-1,[]],[-1,-1,[]],[[],7],[110,108],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[[110,-1],37,101],[-1,-2,[],[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-1,[]],0,[-1,1,[]],[-1,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[111,111],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,30],[[111,35],54],[1,111],[-1,-1,[]],[[],7],[-1,-2,[],[]],[111,111],[1,111],[111,1],[-1,-2,[],[]],[111],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[112,112],[113,113],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[112]]],99],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[[112,35],54],[[113,35],54],[-1,-1,[]],[-1,-1,[]],[112,113],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[113,113],[1,112],[[112,-1],37,101],[113,1],[-1,-2,[],[]],[-1,-2,[],[]],[113],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[112,7],112],[[112,7],112],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[-1]]],[[114,[-1]]],22],[115,115],[116,116],[[[117,[-1]]],[[117,[-1]]],22],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,[[],116],[[[114,[-1]]],[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[115]]],99],[[-1,[118,[-2]]],[[118,[-2]]],[],[]],[[[114,[[109,[-1,119]]]],16],16,9],[[[114,[[109,[-1,120]]]],16],16,9],[[[114,[[109,[-1]]]],16],16,9],[[[117,[[109,[-1]]]],16],16,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[[116,116],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[114,[-1]],35],54,[]],[[[114,[-1]],35],54,38],[[115,35],54],[[116,35],54],[[116,35],54],[[[117,[-1]],35],54,38],[-1,-1,[]],[[[114,[[109,[-1,119]]]]],[[114,[[109,[-1,119]]]]],9],[[[114,[[109,[-1]]]]],[[114,[[109,[-1]]]]],9],[[[114,[[109,[-1,120]]]]],[[114,[[109,[-1,120]]]]],9],[[[117,[[109,[-1]]]]],[[117,[[109,[-1]]]]],9],[[[109,[-1,120]]],[[114,[[109,[-1,120]]]]],9],[[[109,[-1]]],[[114,[[109,[-1]]]]],9],[[[109,[-1,119]]],[[114,[[109,[-1,119]]]]],9],[-1,-1,[]],[-1,-1,[]],[80,116],[-1,-1,[]],[46,116],[-1,-1,[]],[[],[[114,[[109,[-1]]]]],9],[[],[[114,[[109,[-1,120]]]]],9],[[],[[114,[[109,[-1,119]]]]],9],[[],115],[[[114,[[109,[-1]]]]],[[117,[[109,[-1]]]]],9],[[116,-1],30,121],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[114,[[109,[-1,120]]]]],[],9],[[[114,[[109,[-1,119]]]]],[],9],[[[114,[[109,[-1]]]]],[],9],[115],[-1,[],[]],[[[114,[[109,[-1,119]]]]],[],9],[[[114,[[109,[-1,120]]]]],[],9],[[[114,[[109,[-1]]]]],[],9],[[[117,[[109,[-1]]]]],[],9],[116,46],[-2,[[16,[116]]],9,[[122,[-1]]]],[[-1,-2,-3],[[37,[-1,123]]],[],[[124,[77]]],125],[[-1,-2,-3],[[37,[-1,123]]],[],[[124,[77]]],125],[-1,-1,[]],[[[114,[[109,[-1,119]]]]],[[114,[[109,[-1,119]]]]],9],[[[114,[[109,[-1,120]]]]],[[114,[[109,[-1,120]]]]],9],[[[114,[[109,[-1]]]]],[[114,[[109,[-1]]]]],9],[[[117,[[109,[-1]]]]],[[117,[[109,[-1]]]]],9],[[-1,-3],-1,[],[],[[126,[-2]]]],[[[114,[-1]],-2],[[114,[-1]]],22,127],[[[114,[[109,[-1]]]],-2],[[114,[[109,[-1]]]]],9,[[126,[-1]]]],[[[114,[[109,[-1,120]]]],-2],[[114,[[109,[-1,120]]]]],9,[[126,[-1]]]],[[[114,[[109,[-1,119]]]],-2],[[114,[[109,[-1,119]]]]],9,[[126,[-1]]]],[[[117,[[109,[-1]]]],-2],[[117,[[109,[-1]]]]],9,[[126,[-1]]]],[[-1,116,[109,[-2,119]]],[[109,[-2,119]]],[],[]],[[-1,116,[109,[-2,119]]],[[109,[-2,119]]],[],[]],[[-1,116,[109,[-2]]],[[109,[-2]]],[],[]],[[-1,116,[109,[-2]]],[[109,[-2]]],[],[]],[[-1,116,[109,[-2,120]]],[[109,[-2,120]]],[],[]],[[-1,116,[109,[-2,120]]],[[109,[-2,120]]],[],[]],[[116,-1],[[114,[-1]]],[]],[[],115],[[],116],[[[109,[-1]]],[[117,[[109,[-1]]]]],9],[-1,-1,[]],[-1,-1,[]],[-1,7,[]],[-1,7,[]],[[-1,-2,-3],[[37,[30,123]]],[],[[124,[77]]],125],[[-1,-2,-3],[[37,[30,123]]],[],[[124,[77]]],125],[[115,-1],37,101],[-1,-1,[]],[[[114,[[109,[-1]]]]],[[114,[[109,[-1]]]]],9],[[[114,[[109,[-1,120]]]]],[[114,[[109,[-1,120]]]]],9],[[[114,[[109,[-1,119]]]]],[[114,[[109,[-1,119]]]]],9],[[[117,[[109,[-1]]]]],[[117,[[109,[-1]]]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[[117,[[109,[-1]]]],[109,[-1]]],30,9],[[[114,[-1]]],-1,22],[-1,[],[]],[[[114,[[109,[-1,120]]]]],[],128],[[[114,[[109,[-1,119]]]]],[],128],[[[114,[[109,[-1]]]]],[],128],[[[117,[[109,[-1]]]]],[],128],[[[117,[[109,[-1]]]]],[[109,[-1]]],9],[[[117,[[109,[-1]]]]],[[109,[-1]]],9],[[-1,-3],30,[],[],[[129,[-2]]]],[[[114,[[109,[-1,119]]]],-2],30,9,[[129,[-1]]]],[[[114,[[109,[-1]]]],-2],30,9,[[129,[-1]]]],[[[114,[[109,[-1,120]]]],-2],30,9,[[129,[-1]]]],[[[117,[[109,[-1]]]],-2],30,9,[[129,[-1]]]],[[-1,116,[109,[-2,119]]],30,[],[]],[[-1,116,[109,[-2,119]]],30,[],[]],[[-1,116,[109,[-2]]],30,[],[]],[[-1,116,[109,[-2]]],30,[],[]],[[-1,116,[109,[-2,120]]],30,[],[]],[[-1,116,[109,[-2,120]]],30,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[116,[109,[-1]]],[[117,[[109,[-1]]]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[130,130],[131,131],[132,132],[[[133,[-1]]],[[133,[-1]]],9],[[[134,[-1]]],[[134,[-1]]],[22,9]],[[[135,[-1,-2]]],[[135,[-1,-2]]],[22,9],[22,136]],[137,137],[138,138],[139,139],[[[140,[-1]]],[[140,[-1]]],9],[[[141,[-1]]],[[141,[-1]]],[22,9]],[[[142,[-1,-2]]],[[142,[-1,-2]]],[22,9],[22,136]],[143,143],[[[144,[-1]]],[[144,[-1]]],9],[[[145,[-1]]],[[145,[-1]]],[22,9]],[[[146,[-1,-2]]],[[146,[-1,-2]]],[22,9],[22,136]],[147,147],[[[148,[-1]]],[[148,[-1]]],9],[[[149,[-1]]],[[149,[-1]]],[22,9]],[[[150,[-1,-2]]],[[150,[-1,-2]]],[22,9],[22,136]],[151,151],[[[152,[-1]]],[[152,[-1]]],9],[[[153,[-1]]],[[153,[-1]]],[22,9]],[[[154,[-1,-2]]],[[154,[-1,-2]]],[22,9],[22,136]],[155,155],[156,156],[157,157],[[[158,[-1]]],[[158,[-1]]],9],[[[159,[-1]]],[[159,[-1]]],[22,9]],[[[160,[-1,-2]]],[[160,[-1,-2]]],[22,9],[22,136]],[161,161],[[[162,[-1]]],[[162,[-1]]],9],[[[163,[-1]]],[[163,[-1]]],[22,9]],[[[164,[-1,-2]]],[[164,[-1,-2]]],[22,9],[22,136]],[165,165],[166,166],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,0,0,0,0,[[],137],[[],161],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[130]]],99],[-1,[[37,[132]]],99],[-1,[[37,[[135,[-2,-3]]]]],99,9,136],[-1,[[37,[138]]],99],[-1,[[37,[139]]],99],[-1,[[37,[[142,[-2,-3]]]]],99,9,136],[-1,[[37,[143]]],99],[-1,[[37,[[146,[-2,-3]]]]],99,9,136],[-1,[[37,[147]]],99],[-1,[[37,[[150,[-2,-3]]]]],99,9,136],[-1,[[37,[151]]],99],[-1,[[37,[[154,[-2,-3]]]]],99,9,136],[-1,[[37,[155]]],99],[-1,[[37,[156]]],99],[-1,[[37,[157]]],99],[-1,[[37,[[160,[-2,-3]]]]],99,9,136],[-1,[[37,[[164,[-2,-3]]]]],99,9,136],[-1,[[37,[165]]],99],[[131,[118,[-1]]],[[118,[-1]]],9],[[[133,[-1]],[118,[-1]]],[[118,[-1]]],9],[[137,[118,[-1]]],[[118,[-1]]],9],[[[140,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[144,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[148,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[152,[-1]],[118,[-1]]],[[118,[-1]]],9],[[155,[118,[-1]]],[[118,[-1]]],9],[[156,[118,[-1]]],[[118,[-1]]],9],[[[158,[-1]],[118,[-1]]],[[118,[-1]]],9],[[161,[118,[-1]]],[[118,[-1]]],9],[[[162,[-1]],[118,[-1]]],[[118,[-1]]],9],[[166,[118,[-1]]],[[118,[-1]]],9],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],0,0,0,0,0,0,0,0,[[138,138],6],[[155,155],6],[[156,156],6],[[130,35],54],[[130,35],54],[[131,35],54],[[132,35],54],[[[133,[-1]],35],54,[38,9]],[[[133,[-1]],35],54,9],[[[134,[-1]],35],54,[38,9]],[[[135,[-1,-2]],35],54,[38,9],[38,136]],[[137,35],54],[[138,35],54],[[138,35],54],[[139,35],54],[[139,35],54],[[[140,[-1]],35],54,9],[[[140,[-1]],35],54,[38,9]],[[[141,[-1]],35],54,[38,9]],[[[142,[-1,-2]],35],54,[38,9],[38,136]],[[143,35],54],[[143,35],54],[[[144,[-1]],35],54,[38,9]],[[[144,[-1]],35],54,9],[[[145,[-1]],35],54,[38,9]],[[[146,[-1,-2]],35],54,[38,9],[38,136]],[[147,35],54],[[[148,[-1]],35],54,[38,9]],[[[148,[-1]],35],54,9],[[[149,[-1]],35],54,[38,9]],[[[150,[-1,-2]],35],54,[38,9],[38,136]],[[151,35],54],[[[152,[-1]],35],54,[38,9]],[[[152,[-1]],35],54,9],[[[153,[-1]],35],54,[38,9]],[[[154,[-1,-2]],35],54,[38,9],[38,136]],[[155,35],54],[[155,35],54],[[156,35],54],[[156,35],54],[[157,35],54],[[[158,[-1]],35],54,9],[[[158,[-1]],35],54,[38,9]],[[[159,[-1]],35],54,[38,9]],[[[160,[-1,-2]],35],54,[38,9],[38,136]],[[161,35],54],[[[162,[-1]],35],54,9],[[[162,[-1]],35],54,[38,9]],[[[163,[-1]],35],54,[38,9]],[[[164,[-1,-2]],35],54,[38,9],[38,136]],[[165,35],54],[[165,35],54],[[166,35],54],0,0,[131,131],[[[133,[-1]]],[[133,[-1]]],9],[137,137],[[[140,[-1]]],[[140,[-1]]],9],[[[144,[-1]]],[[144,[-1]]],9],[[[148,[-1]]],[[148,[-1]]],9],[[[152,[-1]]],[[152,[-1]]],9],[155,155],[156,156],[[[158,[-1]]],[[158,[-1]]],9],[161,161],[[[162,[-1]]],[[162,[-1]]],9],[166,166],[[131,[109,[-1]]],[[109,[-1]]],9],[[[133,[-1]],[109,[-1,120]]],[[109,[-1]]],9],[[137,[109,[-1]]],[[109,[-1]]],9],[[[140,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[144,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[148,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[152,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[158,[-1]],[109,[-1]]],[[109,[-1]]],9],[[161,[109,[-1]]],[[109,[-1]]],9],[[166,[109,[-1]]],[[109,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[134,[-1]]],9],[[],[[141,[-1]]],9],[[],[[145,[-1]]],9],[[],[[149,[-1]]],9],[[],[[153,[-1]]],9],[[],[[159,[-1]]],9],[[],[[163,[-1]]],9],0,0,0,0,0,0,[[7,7,7],[[109,[-1]]],9],0,0,0,[130,131],[[],7],[[],7],[132,[[133,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[138,-1],[[109,[-2]]],[[124,[17]]],9],[139,[[140,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[143,[[144,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[147,[[148,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[151,[[152,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[157,[[158,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[165,166],[[],7],[[132,[134,[-1]]],[[133,[-1]]],9],[[138,-1,[31,[7]],[31,[7]]],[[109,[-2]]],[[124,[17]]],9],[[139,[141,[-1]]],[[140,[-1]]],9],[[143,[145,[-1]]],[[144,[-1]]],9],[[147,[149,[-1]]],[[148,[-1]]],9],[[151,[153,[-1]]],[[152,[-1]]],9],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[134,[-1]]],[],9],[[[141,[-1]]],[],9],[[[145,[-1]]],[],9],[[[149,[-1]]],[],9],[[[153,[-1]]],[],9],[[[159,[-1]]],[],9],[[[163,[-1]]],[],9],[131],[[[133,[-1]]],[],9],[137],[[[140,[-1]]],[],9],[[[144,[-1]]],[],9],[[[148,[-1]]],[],9],[[[152,[-1]]],[],9],[155],[156],[[[158,[-1]]],[],9],[161],[[[162,[-1]]],[],9],[166],0,[131,131],[[[133,[-1]]],[[133,[-1]]],9],[137,137],[[[140,[-1]]],[[140,[-1]]],9],[[[144,[-1]]],[[144,[-1]]],9],[[[148,[-1]]],[[148,[-1]]],9],[[[152,[-1]]],[[152,[-1]]],9],[155,155],[156,156],[[[158,[-1]]],[[158,[-1]]],9],[161,161],[[[162,[-1]]],[[162,[-1]]],9],[166,166],0,0,[[131,-2],131,9,[[126,[-1]]]],[[[133,[-1]],-2],[[133,[-1]]],9,[[126,[-1]]]],[[137,-2],137,9,[[126,[-1]]]],[[[140,[-1]],-2],[[140,[-1]]],9,[[126,[-1]]]],[[[144,[-1]],-2],[[144,[-1]]],9,[[126,[-1]]]],[[[148,[-1]],-2],[[148,[-1]]],9,[[126,[-1]]]],[[[152,[-1]],-2],[[152,[-1]]],9,[[126,[-1]]]],[[155,-2],155,9,[[126,[-1]]]],[[156,-2],156,9,[[126,[-1]]]],[[[158,[-1]],-2],[[158,[-1]]],9,[[126,[-1]]]],[[161,-2],161,9,[[126,[-1]]]],[[[162,[-1]],-2],[[162,[-1]]],9,[[126,[-1]]]],[[166,-2],166,9,[[126,[-1]]]],0,0,0,[167,130],[[7,7],132],[[],137],[[7,7],139],[7,143],[[7,7],147],[7,151],[7,157],[[],161],[[7,7,6,138],[[162,[-1]]],9],[[[10,[7]]],165],[[139,[163,[-1]]],[[162,[-1]]],9],0,0,0,0,0,[[[133,[-1]]],7,9],[[[140,[-1]]],7,9],[[[144,[-1]]],7,9],[[[148,[-1]]],7,9],[[[152,[-1]]],7,9],[[[158,[-1]]],7,9],[[[162,[-1]]],7,9],0,0,0,0,0,0,0,0,0,[[130,-1],37,101],[[132,-1],37,101],[[[135,[-1,-2]],-3],37,9,136,101],[[138,-1],37,101],[[139,-1],37,101],[[[142,[-1,-2]],-3],37,9,136,101],[[143,-1],37,101],[[[146,[-1,-2]],-3],37,9,136,101],[[147,-1],37,101],[[[150,[-1,-2]],-3],37,9,136,101],[[151,-1],37,101],[[[154,[-1,-2]],-3],37,9,136,101],[[155,-1],37,101],[[156,-1],37,101],[[157,-1],37,101],[[[160,[-1,-2]],-3],37,9,136,101],[[[164,[-1,-2]],-3],37,9,136,101],[[165,-1],37,101],0,0,0,[131,131],[[[133,[-1]]],[[133,[-1]]],9],[137,137],[[[140,[-1]]],[[140,[-1]]],9],[[[144,[-1]]],[[144,[-1]]],9],[[[148,[-1]]],[[148,[-1]]],9],[[[152,[-1]]],[[152,[-1]]],9],[155,155],[156,156],[[[158,[-1]]],[[158,[-1]]],9],[161,161],[[[162,[-1]]],[[162,[-1]]],9],[166,166],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],0,[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[131],[[[133,[-1]]],[],[128,9]],[137],[[[140,[-1]]],[],[128,9]],[[[144,[-1]]],[],[128,9]],[[[148,[-1]]],[],[128,9]],[[[152,[-1]]],[],[128,9]],[155],[156],[[[158,[-1]]],[],[128,9]],[161],[[[162,[-1]]],[],[128,9]],[166],[[131,-2],30,9,[[129,[-1]]]],[[[133,[-1]],-2],30,9,[[129,[-1]]]],[[137,-2],30,9,[[129,[-1]]]],[[[140,[-1]],-2],30,9,[[129,[-1]]]],[[[144,[-1]],-2],30,9,[[129,[-1]]]],[[[148,[-1]],-2],30,9,[[129,[-1]]]],[[[152,[-1]],-2],30,9,[[129,[-1]]]],[[155,-2],30,9,[[129,[-1]]]],[[156,-2],30,9,[[129,[-1]]]],[[[158,[-1]],-2],30,9,[[129,[-1]]]],[[161,-2],30,9,[[129,[-1]]]],[[[162,[-1]],-2],30,9,[[129,[-1]]]],[[166,-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[[147,6],147],[[139,6],139],[[165,[10,[7]]],165],[[143,167],143],[[147,167],147],[[151,167],151],[[132,138],132],[[139,138],139],[[157,7],157],[[157,7],157],[[143,167],143],[[165,[10,[7]]],165],[[165,[10,[7]]],165],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[168,[-1]]],9],[[],[[168,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[169,169],[[[170,[-1]]],[[170,[-1]]],9],[[[171,[-1]]],[[171,[-1]]],[22,9]],[[[172,[-1,-2]]],[[172,[-1,-2]]],[22,9],[22,136]],[[[173,[-1]]],[[173,[-1]]],[22,9]],[[[174,[-1]]],[[174,[-1]]],[22,9]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[169]]],99],[-1,[[37,[[172,[-2,-3]]]]],99,9,136],[[[170,[-1]],[118,[-1]]],[[118,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],0,0,[[169,35],54],[[[170,[-1]],35],54,[38,9]],[[[170,[-1]],35],54,9],[[[171,[-1]],35],54,[38,9]],[[[172,[-1,-2]],35],54,[38,9],[38,136]],[[[173,[-1]],35],54,[38,9]],[[[174,[-1]],35],54,[38,9]],[[[170,[-1]]],[[170,[-1]]],9],[[[170,[-1]],[173,[-1]]],[[174,[-1]]],9],[[[170,[-1]],[173,[-1]],[168,[-1]]],[[174,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[171,[-1]]],9],[[7,7],[[109,[-1,119]]],9],[[7,[16,[[16,[7]]]],[31,[7]]],[[175,[-1]]],9],[[],7],[[],7],[[],7],[169,[[170,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[169,[171,[-1]]],[[170,[-1]]],9],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[171,[-1]]],[],9],[[[170,[-1]]],[],9],0,0,[[[170,[-1]]],[[170,[-1]]],9],[[[170,[-1]],-2],[[170,[-1]]],9,[[126,[-1]]]],0,[[[173,[-1]],[109,[-1,119]]],[[173,[-1]]],9],[[[173,[-1]],[109,[-1,119]]],[[173,[-1]]],9],0,0,0,0,[[7,7],169],[[[109,[-1]],[109,[-1]],[109,[-1]]],[[173,[-1]]],9],[[[170,[-1]]],7,9],0,0,0,0,[[[109,[-1]]],[[173,[-1]]],9],[[169,-1],37,101],[[[172,[-1,-2]],-3],37,9,136,101],0,[[[170,[-1]]],[[170,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[[170,[-1]]],[],[128,9]],0,0,[[[170,[-1]],-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[169,167],169],[[169,138],169],[[169,167],169],0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,30],[[],[[176,[-1]]],9],[-1,-1,[]],[[],7],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[177,177],[[[178,[-1]]],[[178,[-1]]],9],[[[179,[-1]]],[[179,[-1]]],[22,9]],[[[180,[-1,-2]]],[[180,[-1,-2]]],[22,9],[22,136]],[181,181],[[[182,[-1]]],[[182,[-1]]],9],[[[183,[-1]]],[[183,[-1]]],[22,9]],[[[184,[-1,-2]]],[[184,[-1,-2]]],[22,9],[22,136]],[185,185],[[[186,[-1]]],[[186,[-1]]],9],[[[187,[-1]]],[[187,[-1]]],[22,9]],[[[188,[-1,-2]]],[[188,[-1,-2]]],[22,9],[22,136]],[189,189],[[[190,[-1]]],[[190,[-1]]],9],[[[191,[-1]]],[[191,[-1]]],[22,9]],[[[192,[-1,-2]]],[[192,[-1,-2]]],[22,9],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[177]]],99],[-1,[[37,[[180,[-2,-3]]]]],99,9,136],[-1,[[37,[181]]],99],[-1,[[37,[[184,[-2,-3]]]]],99,9,136],[-1,[[37,[185]]],99],[-1,[[37,[[188,[-2,-3]]]]],99,9,136],[-1,[[37,[189]]],99],[-1,[[37,[[192,[-2,-3]]]]],99,9,136],[[[178,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[182,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[186,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[190,[-1]],[118,[-1]]],[[118,[-1]]],9],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[[177,35],54],[[177,35],54],[[[178,[-1]],35],54,[38,9]],[[[178,[-1]],35],54,9],[[[179,[-1]],35],54,[38,9]],[[[180,[-1,-2]],35],54,[38,9],[38,136]],[[181,35],54],[[181,35],54],[[[182,[-1]],35],54,[38,9]],[[[182,[-1]],35],54,9],[[[183,[-1]],35],54,[38,9]],[[[184,[-1,-2]],35],54,[38,9],[38,136]],[[185,35],54],[[185,35],54],[[[186,[-1]],35],54,9],[[[186,[-1]],35],54,[38,9]],[[[187,[-1]],35],54,[38,9]],[[[188,[-1,-2]],35],54,[38,9],[38,136]],[[189,35],54],[[189,35],54],[[[190,[-1]],35],54,9],[[[190,[-1]],35],54,[38,9]],[[[191,[-1]],35],54,[38,9]],[[[192,[-1,-2]],35],54,[38,9],[38,136]],[[[178,[-1]]],[[178,[-1]]],9],[[[182,[-1]]],[[182,[-1]]],9],[[[186,[-1]]],[[186,[-1]]],9],[[[190,[-1]]],[[190,[-1]]],9],[[[178,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[182,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[186,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[190,[-1]],[109,[-1]]],[[109,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[179,[-1]]],9],[[],[[183,[-1]]],9],[[],[[187,[-1]]],9],[[],[[191,[-1]]],9],0,0,0,0,0,0,0,0,0,0,0,0,[[],7],[177,[[178,[-1]]],9],[[],7],[[],7],[[],7],[181,[[182,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[185,[[186,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[189,[[190,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[177,[179,[-1]]],[[178,[-1]]],9],[[181,[183,[-1]]],[[182,[-1]]],9],[[185,[187,[-1]]],[[186,[-1]]],9],[[189,[191,[-1]]],[[190,[-1]]],9],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[179,[-1]]],[],9],[[[183,[-1]]],[],9],[[[187,[-1]]],[],9],[[[191,[-1]]],[],9],[[[178,[-1]]],[],9],[[[182,[-1]]],[],9],[[[186,[-1]]],[],9],[[[190,[-1]]],[],9],0,0,0,0,0,0,0,0,0,0,0,0,[[[178,[-1]]],[[178,[-1]]],9],[[[182,[-1]]],[[182,[-1]]],9],[[[186,[-1]]],[[186,[-1]]],9],[[[190,[-1]]],[[190,[-1]]],9],[[[178,[-1]],-2],[[178,[-1]]],9,[[126,[-1]]]],[[[182,[-1]],-2],[[182,[-1]]],9,[[126,[-1]]]],[[[186,[-1]],-2],[[186,[-1]]],9,[[126,[-1]]]],[[[190,[-1]],-2],[[190,[-1]]],9,[[126,[-1]]]],[[7,7,7],177],[[[10,[7]],[10,[7]]],181],[[[10,[7]],7],185],[[[10,[7]],[10,[7]]],189],[[[178,[-1]]],7,9],[[[182,[-1]]],7,9],[[[186,[-1]]],7,9],[[[190,[-1]]],7,9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[177,-1],37,101],[[[180,[-1,-2]],-3],37,9,136,101],[[181,-1],37,101],[[[184,[-1,-2]],-3],37,9,136,101],[[185,-1],37,101],[[[188,[-1,-2]],-3],37,9,136,101],[[189,-1],37,101],[[[192,[-1,-2]],-3],37,9,136,101],0,0,0,0,0,0,0,0,0,0,0,0,[[[178,[-1]]],[[178,[-1]]],9],[[[182,[-1]]],[[182,[-1]]],9],[[[186,[-1]]],[[186,[-1]]],9],[[[190,[-1]]],[[190,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[[178,[-1]]],[],[128,9]],[[[182,[-1]]],[],[128,9]],[[[186,[-1]]],[],[128,9]],[[[190,[-1]]],[],[128,9]],[[[178,[-1]],-2],30,9,[[129,[-1]]]],[[[182,[-1]],-2],30,9,[[129,[-1]]]],[[[186,[-1]],-2],30,9,[[129,[-1]]]],[[[190,[-1]],-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[177,6],177],[[181,6],181],[[185,6],185],[[189,6],189],[[177,7],177],[[181,[10,[7]]],181],[[185,7],185],[[189,[10,[7]]],189],[[177,7],177],[[181,7],181],[[185,7],185],[[189,7],189],[[177,138],177],[[181,138],181],[[185,138],185],[[189,138],189],[[177,155],177],[[181,156],181],[[185,7],185],[[189,[10,[7]]],189],[[185,7],185],[[189,[10,[7]]],189],[[177,7],177],[[181,[10,[7]]],181],[[185,7],185],[[189,[10,[7]]],189],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[193,193],[[[194,[-1]]],[[194,[-1]]],9],[[[195,[-1]]],[[195,[-1]]],[22,9]],[[[196,[-1,-2]]],[[196,[-1,-2]]],[22,9],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[193]]],99],[-1,[[37,[[196,[-2,-3]]]]],99,9,136],[[[194,[-1]],[118,[-1]]],[[118,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[[193,35],54],[[[194,[-1]],35],54,9],[[[194,[-1]],35],54,[38,9]],[[[195,[-1]],35],54,[38,9]],[[[196,[-1,-2]],35],54,[38,9],[38,136]],[[[194,[-1]]],[[194,[-1]]],9],[[[194,[-1]],[109,[-1]],[31,[[109,[-1]]]]],[[109,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[195,[-1]]],9],[193,[[194,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[193,[195,[-1]]],[[194,[-1]]],9],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[195,[-1]]],[],9],[[[194,[-1]]],[],9],[[[194,[-1]]],[[194,[-1]]],9],[[[194,[-1]],-2],[[194,[-1]]],9,[[126,[-1]]]],[[7,7,6],193],0,0,[[[194,[-1]]],7,9],0,0,[[193,-1],37,101],[[[196,[-1,-2]],-3],37,9,136,101],[[[194,[-1]]],[[194,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],0,0,[[[194,[-1]]],[],[128,9]],[[[194,[-1]],-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[193,138],193],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[197,197],[[[198,[-1]]],[[198,[-1]]],9],[[[199,[-1]]],[[199,[-1]]],[22,9]],[[[200,[-1,-2]]],[[200,[-1,-2]]],[22,9],[22,136]],[201,201],[[[202,[-1]]],[[202,[-1]]],9],[[[203,[-1]]],[[203,[-1]]],[22,9]],[[[204,[-1,-2]]],[[204,[-1,-2]]],[22,9],[22,136]],[[[205,[-1]]],[[205,[-1]]],[22,9]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[],[[198,[-1]]],9],[[],[[202,[-1]]],9],[[],[[205,[-1]]],9],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[197]]],99],[-1,[[37,[[200,[-2,-3]]]]],99,9,136],[-1,[[37,[201]]],99],[-1,[[37,[[204,[-2,-3]]]]],99,9,136],[[[198,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[202,[-1]],[118,[-1]]],[[118,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[[197,35],54],[[197,35],54],[[[198,[-1]],35],54,9],[[[198,[-1]],35],54,[38,9]],[[[199,[-1]],35],54,[38,9]],[[[200,[-1,-2]],35],54,[38,9],[38,136]],[[201,35],54],[[201,35],54],[[[202,[-1]],35],54,[38,9]],[[[202,[-1]],35],54,9],[[[203,[-1]],35],54,[38,9]],[[[204,[-1,-2]],35],54,[38,9],[38,136]],[[[205,[-1]],35],54,[38,9]],[[[198,[-1]]],[[198,[-1]]],9],[[[202,[-1]]],[[202,[-1]]],9],[[[198,[-1]],[109,[-1]],[109,[-1,120]]],[[109,[-1]]],9],[[[202,[-1]],[109,[-1]],[109,[-1,120]]],[[109,[-1]]],9],[[[205,[-1]],[109,[-1]],[109,[-1]],206],[[109,[-1]]],9],[[[205,[-1]],[109,[-1]],[109,[-1]]],[[109,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[199,[-1]]],9],[[],[[203,[-1]]],9],[[],7],[197,[[198,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[201,[[202,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[-1]]],[],9],[[[203,[-1]]],[],9],[[[198,[-1]]],[],9],[[[202,[-1]]],[],9],[[[198,[-1]]],[[198,[-1]]],9],[[[202,[-1]]],[[202,[-1]]],9],0,0,0,0,[[[198,[-1]],-2],[[198,[-1]]],9,[[126,[-1]]]],[[[202,[-1]],-2],[[202,[-1]]],9,[[126,[-1]]]],[[],197],[[],201],[[[31,[7]]],[[202,[-1]]],9],[[],[[205,[-1]]],9],[[[198,[-1]]],7,9],[[[202,[-1]]],7,9],0,0,[[197,-1],37,101],[[[200,[-1,-2]],-3],37,9,136,101],[[201,-1],37,101],[[[204,[-1,-2]],-3],37,9,136,101],0,0,0,0,[[[198,[-1]]],[[198,[-1]]],9],[[[202,[-1]]],[[202,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[[198,[-1]]],[],[128,9]],[[[202,[-1]]],[],[128,9]],[[[198,[-1]],-2],30,9,[[129,[-1]]]],[[[202,[-1]],-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[197,6],197],[[201,6],201],[[201,[31,[[16,[7]]]]],201],[[197,[31,[39]]],197],[[201,[31,[39]]],201],[[197,[31,[[10,[39]]]]],197],[[201,[31,[[16,[39]]]]],201],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[207,207],[[[208,[-1]]],[[208,[-1]]],9],[[[209,[-1]]],[[209,[-1]]],[22,9]],[[[210,[-1,-2]]],[[210,[-1,-2]]],[22,9],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[207]]],99],[-1,[[37,[[210,[-2,-3]]]]],99,9,136],[[[208,[-1]],[118,[-1]]],[[118,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[[207,35],54],[[[208,[-1]],35],54,9],[[[208,[-1]],35],54,[38,9]],[[[209,[-1]],35],54,[38,9]],[[[210,[-1,-2]],35],54,[38,9],[38,136]],0,0,[[[208,[-1]]],[[208,[-1]]],9],[[[208,[-1]],[109,[-1]],[31,[[30,[[109,[-1]],[109,[-1]]]]]]],[[30,[[109,[-1]],[109,[-1]]]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[209,[-1]]],9],[[],7],[207,[[208,[-1]]],9],[[],7],[[],7],[[],7],[[207,[209,[-1]]],[[208,[-1]]],9],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[209,[-1]]],[],9],[[[208,[-1]]],[],9],[[[208,[-1]]],[[208,[-1]]],9],[[[208,[-1]],-2],[[208,[-1]]],9,[[126,[-1]]]],[[7,7,6],207],[[[208,[-1]]],7,9],0,0,[[207,-1],37,101],[[[210,[-1,-2]],-3],37,9,136,101],[[[208,[-1]]],[[208,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[[208,[-1]]],[],[128,9]],[[[208,[-1]],-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[207,138],207],0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[211,211],[212,212],[213,213],[214,214],[215,215],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[211]]],99],[-1,[[37,[213]]],99],[-1,[[37,[215]]],99],[-1,[[37,[217]]],99],[-1,[[37,[219]]],99],[-1,[[37,[221]]],99],[[212,[118,[-1]]],[[118,[-1]]],9],[[214,[118,[-1]]],[[118,[-1]]],9],[[216,[118,[-1]]],[[118,[-1]]],9],[[218,[118,[-1]]],[[118,[-1]]],9],[[220,[118,[-1]]],[[118,[-1]]],9],[[222,[118,[-1]]],[[118,[-1]]],9],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[[211,35],54],[[212,35],54],[[213,35],54],[[214,35],54],[[215,35],54],[[216,35],54],[[217,35],54],[[217,35],54],[[218,35],54],[[219,35],54],[[220,35],54],[[221,35],54],[[221,35],54],[[222,35],54],[212,212],[214,214],[216,216],[218,218],[220,220],[222,222],[[212,[109,[-1]]],[[109,[-1]]],9],[[214,[109,[-1]]],[[109,[-1]]],9],[[216,[109,[-1]]],[[109,[-1]]],9],[[218,[109,[-1]]],[[109,[-1]]],9],[[220,[109,[-1]]],[[109,[-1]]],9],[[222,[109,[-1]]],[[109,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],7],[211,212],[[],7],[213,214],[[],7],[[],7],[[],7],[215,216],[[],7],[217,218],[[],7],[[],7],[219,220],[[],7],[[],7],[[],7],[221,222],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[212],[214],[216],[218],[220],[222],0,0,0,0,[212,212],[214,214],[216,216],[218,218],[220,220],[222,222],[[212,-2],212,9,[[126,[-1]]]],[[214,-2],214,9,[[126,[-1]]]],[[216,-2],216,9,[[126,[-1]]]],[[218,-2],218,9,[[126,[-1]]]],[[220,-2],220,9,[[126,[-1]]]],[[222,-2],222,9,[[126,[-1]]]],[7,211],[[[10,[7]]],213],[7,215],[[[10,[7]]],217],[7,219],[[[10,[7]]],221],0,0,0,0,0,0,[[211,-1],37,101],[[213,-1],37,101],[[215,-1],37,101],[[217,-1],37,101],[[219,-1],37,101],[[221,-1],37,101],0,0,0,0,[212,212],[214,214],[216,216],[218,218],[220,220],[222,222],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[212],[214],[216],[218],[220],[222],[[212,-2],30,9,[[129,[-1]]]],[[214,-2],30,9,[[129,[-1]]]],[[216,-2],30,9,[[129,[-1]]]],[[218,-2],30,9,[[129,[-1]]]],[[220,-2],30,9,[[129,[-1]]]],[[222,-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[215,6],215],[[217,6],217],[[219,7],219],[[221,[10,[7]]],221],[[215,155],215],[[217,156],217],[[219,155],219],[[221,156],221],[[215,7],215],[[219,7],219],[[217,[10,[7]]],217],[[221,[10,[7]]],221],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[223,223],[[[224,[-1]]],[[224,[-1]]],9],[[[225,[-1]]],[[225,[-1]]],[22,9]],[[[226,[-1,-2]]],[[226,[-1,-2]]],[22,9],[22,136]],[[[227,[-1]]],[[227,[-1]]],9],[[[228,[-1]]],[[228,[-1]]],[22,9]],[[[229,[-1,-2]]],[[229,[-1,-2]]],[22,9],[22,136]],[230,230],[[[231,[-1]]],[[231,[-1]]],9],[[[232,[-1]]],[[232,[-1]]],[22,9]],[[[233,[-1,-2]]],[[233,[-1,-2]]],[22,9],[22,136]],[[[234,[-1]]],[[234,[-1]]],9],[[[235,[-1]]],[[235,[-1]]],[22,9]],[[[236,[-1,-2]]],[[236,[-1,-2]]],[22,9],[22,136]],[237,237],[[[238,[-1]]],[[238,[-1]]],9],[[[239,[-1]]],[[239,[-1]]],[22,9]],[[[240,[-1,-2]]],[[240,[-1,-2]]],[22,9],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,0,0,0,0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[223]]],99],[-1,[[37,[[226,[-2,-3]]]]],99,9,136],[-1,[[37,[[229,[-2,-3]]]]],99,9,136],[-1,[[37,[230]]],99],[-1,[[37,[[233,[-2,-3]]]]],99,9,136],[-1,[[37,[[236,[-2,-3]]]]],99,9,136],[-1,[[37,[237]]],99],[-1,[[37,[[240,[-2,-3]]]]],99,9,136],[[[224,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[227,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[231,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[234,[-1]],[118,[-1]]],[[118,[-1]]],9],[[[238,[-1]],[118,[-1]]],[[118,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],0,0,0,0,0,0,0,0,0,[[223,35],54],[[[224,[-1]],35],54,[38,9]],[[[224,[-1]],35],54,9],[[[225,[-1]],35],54,[38,9]],[[[226,[-1,-2]],35],54,[38,9],[38,136]],[[[241,[-1]],35],54,[38,9]],[[[227,[-1]],35],54,[38,9]],[[[227,[-1]],35],54,9],[[[228,[-1]],35],54,[38,9]],[[[229,[-1,-2]],35],54,[38,9],[38,136]],[[230,35],54],[[[231,[-1]],35],54,[38,9]],[[[231,[-1]],35],54,9],[[[232,[-1]],35],54,[38,9]],[[[233,[-1,-2]],35],54,[38,9],[38,136]],[[[242,[-1]],35],54,[38,9]],[[[234,[-1]],35],54,9],[[[234,[-1]],35],54,[38,9]],[[[235,[-1]],35],54,[38,9]],[[[236,[-1,-2]],35],54,[38,9],[38,136]],[[237,35],54],[[[238,[-1]],35],54,9],[[[238,[-1]],35],54,[38,9]],[[[239,[-1]],35],54,[38,9]],[[[240,[-1,-2]],35],54,[38,9],[38,136]],[[[224,[-1]]],[[224,[-1]]],9],[[[227,[-1]]],[[227,[-1]]],9],[[[231,[-1]]],[[231,[-1]]],9],[[[234,[-1]]],[[234,[-1]]],9],[[[238,[-1]]],[[238,[-1]]],9],[[[224,[-1]],[241,[-1]]],[[109,[-1]]],9],[[[231,[-1]],[242,[-1]]],[[109,[-1]]],9],[[[238,[-1]],[109,[-1]]],[[109,[-1]]],9],[[[224,[-1]],[241,[-1]],[243,[-1]]],[[109,[-1]]],9],[[[231,[-1]],[242,[-1]],[244,[-1]]],[[109,[-1]]],9],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[225,[-1]]],9],[[],[[228,[-1]]],9],[[],[[232,[-1]]],9],[[],[[235,[-1]]],9],[[],[[239,[-1]]],9],0,0,[[],7],[[],7],[[],7],[223,[[224,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[230,[[231,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[237,[[238,[-1]]],9],[[],7],[[],7],[[],7],[[223,[225,[-1]]],[[224,[-1]]],9],[[230,[232,[-1]]],[[231,[-1]]],9],[[237,[239,[-1]]],[[238,[-1]]],9],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[225,[-1]]],[],9],[[[228,[-1]]],[],9],[[[232,[-1]]],[],9],[[[235,[-1]]],[],9],[[[239,[-1]]],[],9],[[[224,[-1]]],[],9],[[[227,[-1]]],[],9],[[[231,[-1]]],[],9],[[[234,[-1]]],[],9],[[[238,[-1]]],[],9],0,0,0,0,0,0,0,0,[[[224,[-1]]],[[224,[-1]]],9],[[[227,[-1]]],[[227,[-1]]],9],[[[231,[-1]]],[[231,[-1]]],9],[[[234,[-1]]],[[234,[-1]]],9],[[[238,[-1]]],[[238,[-1]]],9],[[[224,[-1]],-2],[[224,[-1]]],9,[[126,[-1]]]],[[[227,[-1]],-2],[[227,[-1]]],9,[[126,[-1]]]],[[[231,[-1]],-2],[[231,[-1]]],9,[[126,[-1]]]],[[[234,[-1]],-2],[[234,[-1]]],9,[[126,[-1]]]],[[[238,[-1]],-2],[[238,[-1]]],9,[[126,[-1]]]],[[[242,[-1]],[109,[-1,119]]],[[242,[-1]]],9],[[[242,[-1]],[109,[-1,119]]],[[242,[-1]]],9],[[[241,[-1]],[109,[-1,119]]],[[241,[-1]]],9],[[[241,[-1]],[109,[-1,119]]],[[241,[-1]]],9],0,0,0,0,0,0,[[7,7,7,7],223],[[[109,[-1]],[109,[-1]]],[[241,[-1]]],9],[[7,7,7,7],230],[[[109,[-1]]],[[242,[-1]]],9],[[7,7],237],[[[224,[-1]]],[[243,[-1]]],9],[[[231,[-1]]],[[244,[-1]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[224,[-1]]],7,9],[[[227,[-1]]],7,9],[[[231,[-1]]],7,9],[[[234,[-1]]],7,9],[[[238,[-1]]],7,9],0,0,0,0,0,0,[[223,-1],37,101],[[[226,[-1,-2]],-3],37,9,136,101],[[[229,[-1,-2]],-3],37,9,136,101],[[230,-1],37,101],[[[233,[-1,-2]],-3],37,9,136,101],[[[236,[-1,-2]],-3],37,9,136,101],[[237,-1],37,101],[[[240,[-1,-2]],-3],37,9,136,101],[[[241,[-1]],[109,[-1,119]]],[[241,[-1]]],9],[[[241,[-1]],[109,[-1,119]]],[[241,[-1]]],9],[[[224,[-1]]],[[224,[-1]]],9],[[[227,[-1]]],[[227,[-1]]],9],[[[231,[-1]]],[[231,[-1]]],9],[[[234,[-1]]],[[234,[-1]]],9],[[[238,[-1]]],[[238,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[[[224,[-1]]],[],[128,9]],[[[227,[-1]]],[],[128,9]],[[[231,[-1]]],[],[128,9]],[[[234,[-1]]],[],[128,9]],[[[238,[-1]]],[],[128,9]],[[[224,[-1]],-2],30,9,[[129,[-1]]]],[[[227,[-1]],-2],30,9,[[129,[-1]]]],[[[231,[-1]],-2],30,9,[[129,[-1]]]],[[[234,[-1]],-2],30,9,[[129,[-1]]]],[[[238,[-1]],-2],30,9,[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[223,167],223],[[230,167],230],[[237,167],237],[[223,138],223],[[230,138],230],[[237,138],237],[[223,6],223],[[230,6],230],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[245,[-2]],-2,246],30,128,[[247,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[248,248],[[[249,[-1]]],[[249,[-1]]],[22,9]],[[[250,[-1,-2]]],[[250,[-1,-2]]],[22,9],[22,136]],[[[251,[-1]]],[[251,[-1]]],[22,9]],[[[252,[-1,-2]]],[[252,[-1,-2]]],[22,9],[22,136]],[253,253],[[[254,[-1]]],[[254,[-1]]],[22,9]],[[[255,[-1,-2]]],[[255,[-1,-2]]],[22,9],[22,136]],[[[256,[-1]]],[[256,[-1]]],[22,9]],[[[257,[-1,-2]]],[[257,[-1,-2]]],[22,9],[22,136]],[258,258],[[[259,[-1]]],[[259,[-1]]],[22,9]],[[[260,[-1,-2]]],[[260,[-1,-2]]],[22,9],[22,136]],[[[261,[-1]]],[[261,[-1]]],[22,9]],[[[262,[-1,-2]]],[[262,[-1,-2]]],[22,9],[22,136]],[263,263],[[[264,[-1]]],[[264,[-1]]],[22,9]],[[[265,[-1,-2]]],[[265,[-1,-2]]],[22,9],[22,136]],[[[266,[-1]]],[[266,[-1]]],[22,9]],[[[267,[-1,-2]]],[[267,[-1,-2]]],[22,9],[22,136]],[[[268,[-1]]],[[268,[-1]]],[22,9]],[[[269,[-1,-2]]],[[269,[-1,-2]]],[22,9],[22,136]],[[[270,[-1]]],[[270,[-1]]],[22,9]],[[[271,[-1,-2]]],[[271,[-1,-2]]],[22,9],[22,136]],[272,272],[[[273,[-1]]],[[273,[-1]]],[22,9]],[[[274,[-1,-2]]],[[274,[-1,-2]]],[22,9],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,[[],[[245,[-1]]],[]],[[],246],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[248]]],99],[-1,[[37,[[250,[-2,-3]]]]],99,9,136],[-1,[[37,[[252,[-2,-3]]]]],99,9,136],[-1,[[37,[253]]],99],[-1,[[37,[[255,[-2,-3]]]]],99,9,136],[-1,[[37,[[257,[-2,-3]]]]],99,9,136],[-1,[[37,[258]]],99],[-1,[[37,[[260,[-2,-3]]]]],99,9,136],[-1,[[37,[[262,[-2,-3]]]]],99,9,136],[-1,[[37,[263]]],99],[-1,[[37,[[265,[-2,-3]]]]],99,9,136],[-1,[[37,[[267,[-2,-3]]]]],99,9,136],[-1,[[37,[[269,[-2,-3]]]]],99,9,136],[-1,[[37,[[271,[-2,-3]]]]],99,9,136],[-1,[[37,[272]]],99],[-1,[[37,[[274,[-2,-3]]]]],99,9,136],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[[248,35],54],[[[250,[-1,-2]],35],54,[38,9],[38,136]],[[[252,[-1,-2]],35],54,[38,9],[38,136]],[[253,35],54],[[[255,[-1,-2]],35],54,[38,9],[38,136]],[[[257,[-1,-2]],35],54,[38,9],[38,136]],[[258,35],54],[[[260,[-1,-2]],35],54,[38,9],[38,136]],[[[262,[-1,-2]],35],54,[38,9],[38,136]],[[263,35],54],[[[265,[-1,-2]],35],54,[38,9],[38,136]],[[[267,[-1,-2]],35],54,[38,9],[38,136]],[[[269,[-1,-2]],35],54,[38,9],[38,136]],[[[271,[-1,-2]],35],54,[38,9],[38,136]],[[272,35],54],[[[274,[-1,-2]],35],54,[38,9],[38,136]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-2,246,128,[[247,[-1]]]],[[],[[249,[-1]]],9],[[],[[251,[-1]]],9],[[],[[254,[-1]]],9],[[],[[256,[-1]]],9],[[],[[259,[-1]]],9],[[],[[261,[-1]]],9],[[],[[264,[-1]]],9],[[],[[266,[-1]]],9],[[],[[268,[-1]]],9],[[],[[270,[-1]]],9],[[],[[273,[-1]]],9],[[246,116],[[31,[[109,[-1]]]]],9],0,[[[245,[-1]]],246,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[248,[[0,[[275,[-2,-1]]]]],128,[[247,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[253,[[0,[[275,[-2,-1]]]]],128,[[247,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[258,[[0,[[275,[-2,-1]]]]],128,[[247,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[263,[[277,[276,-2,-1]]],128,[[247,[-1]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[272,[[277,[278,-2,-1]]],128,[[247,[-1]]]],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[249,[-1]]],[],9],[[[251,[-1]]],[],9],[[[254,[-1]]],[],9],[[[256,[-1]]],[],9],[[[259,[-1]]],[],9],[[[261,[-1]]],[],9],[[[264,[-1]]],[],9],[[[266,[-1]]],[],9],[[[268,[-1]]],[],9],[[[270,[-1]]],[],9],[[[273,[-1]]],[],9],[246,6],[246,7],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,[[],[[245,[-1]]],[]],[[],248],[[[251,[-1]]],[[249,[-1]]],9],[[7,[109,[-1]]],[[251,[-1]]],9],[[],253],[[[256,[-1]]],[[254,[-1]]],9],[[7,[109,[-1]],[109,[-1]]],[[256,[-1]]],9],[[],258],[[[261,[-1]]],[[259,[-1]]],9],[[7,[109,[-1]],[109,[-1]]],[[261,[-1]]],9],[[],246],[[],263],[[[266,[-1]],[268,[-1]],[31,[[270,[-1]]]]],[[264,[-1]]],9],[[[109,[-1]]],[[266,[-1]]],9],[[[31,[[109,[-1]]]],[109,[-1]]],[[268,[-1]]],9],[[[109,[-1]]],[[270,[-1]]],9],[[],272],[[[31,[[279,[-1]]]]],[[273,[-1]]],9],0,[[246,116,[109,[-1]]],30,9],[[246,116],[[31,[[109,[-1]]]]],9],[[248,-1],37,101],[[[250,[-1,-2]],-3],37,9,136,101],[[[252,[-1,-2]],-3],37,9,136,101],[[253,-1],37,101],[[[255,[-1,-2]],-3],37,9,136,101],[[[257,[-1,-2]],-3],37,9,136,101],[[258,-1],37,101],[[[260,[-1,-2]],-3],37,9,136,101],[[[262,[-1,-2]],-3],37,9,136,101],[[263,-1],37,101],[[[265,[-1,-2]],-3],37,9,136,101],[[[267,[-1,-2]],-3],37,9,136,101],[[[269,[-1,-2]],-3],37,9,136,101],[[[271,[-1,-2]],-3],37,9,136,101],[[272,-1],37,101],[[[274,[-1,-2]],-3],37,9,136,101],0,0,[[-1,1,-2,246],-2,[],[]],[[-1,1,[109,[-2]],[109,[-2]],31],[[30,[[109,[-2]],31]]],[],[]],[[[280,[-1]],1,[109,[-1]],[109,[-1]],31],[[30,[[109,[-1]],31]]],9],[[[281,[-1]],1,[109,[-1]],[109,[-1]],31],[[30,[[109,[-1]],31]]],9],[[[282,[-1]],1,[109,[-1]],[109,[-1]],31],[[30,[[109,[-1]],31]]],9],[[[276,[-1]],1,[109,[-1]],[109,[-1]],31],[[30,[[109,[-1]],31]]],9],[[[278,[-1]],1,[109,[-1]],[109,[-1]],31],[[30,[[109,[-1]],31]]],9],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[251,[-1]]],[[251,[-1]]],9],[[[256,[-1]]],[[256,[-1]]],9],[[[261,[-1]]],[[261,[-1]]],9],[[246,-2],246,128,[[247,[-1]]]],[[[266,[-1]]],[[266,[-1]]],9],[[[268,[-1]]],[[268,[-1]]],9],[[[270,[-1]]],[[270,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[263,39],263],[[253,39],253],[[258,39],258],[[253,39],253],[[258,39],258],[[263,6],263],[[248,39],248],[[253,39],253],[[258,39],258],[[263,39],263],[[248,[31,[110]]],248],[[253,[31,[110]]],253],[[258,[31,[110]]],258],[[263,[31,[110]]],263],[[272,[31,[110]]],272],[[248,167],248],[[263,39],263],[[272,[31,[283]]],272],[[248,[31,[284]]],248],[[253,[31,[284]]],253],[[258,39],258],[[263,[31,[284]]],263],[[272,[31,[284]]],272],0,[-1,-2,[],[]],[-1,-2,[],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,30],[-1,-1,[]],[-1,[[277,[-1,-3,-2]]],285,128,[[247,[-2]]]],[286,-1,[]],[[],7],[-1,-2,[],[]],[[[277,[-1,-3,-2]]],[[277,[-1,-3,-2]]],285,128,[[247,[-2]]]],[[[277,[-1,-3,-2]],1,-3,246],-3,285,128,[[247,[-2]]]],[[[277,[-1,-3,-2]]],[],285,128,[[247,[-2]]]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[[[277,[-1,-3,-2]],108],[[277,[-1,-3,-2]]],285,128,[[247,[-2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[284,284],[[[287,[-1]]],[[287,[-1]]],[22,9]],[[[288,[-1,-2]]],[[288,[-1,-2]]],[22,9],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[284]]],99],[-1,[[37,[[288,[-2,-3]]]]],99,9,136],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[[284,35],54],[[[288,[-1,-2]],35],54,[38,9],[38,136]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[287,[-1]]],9],0,[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[287,[-1]]],[],9],[284,[[289,[-1]]],9],[167,284],[[[109,[-1]]],[[287,[-1]]],9],0,[[284,-1],37,101],[[[288,[-1,-2]],-3],37,9,136,101],[[[287,[-1]]],[[287,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[[[289,[-1]],[109,[-1]],[109,[-1]]],[[109,[-1]]],9],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[283,283],[[[279,[-1]]],[[279,[-1]]],[22,9]],[[[290,[-1,-2]]],[[290,[-1,-2]]],[22,9],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[283]]],99],[-1,[[37,[[290,[-2,-3]]]]],99,9,136],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[[283,35],54],[[[290,[-1,-2]],35],54,[38,9],[38,136]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[279,[-1]]],9],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[279,[-1]]],[],9],0,0,[283,[[291,[-1]]],9],[[],283],[[[109,[-1]]],[[279,[-1]]],9],[[283,-1],37,101],[[[290,[-1,-2]],-3],37,9,136,101],[[[279,[-1]]],[[279,[-1]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[[[291,[-1]],[109,[-1]],[31,[[279,[-1]]]]],[[30,[[109,[-1]],[279,[-1]]]]],9],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[283,167],283],[[283,167],283],[[283,6],283],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[292,[-2,-1]]],[[292,[-2,-1]]],9,[[285,[-1]]]],[[[293,[-2,-1]]],[[293,[-2,-1]]],9,[[285,[-1]]]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[[294,[-3,-2,-4]]]]],99,9,[[285,[-2]]],136],[-1,[[37,[[295,[-3,-2,-4]]]]],99,9,[[285,[-2]]],136],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[292,[-2,-1]]],9,[[285,[-1]]]],[[],[[293,[-2,-1]]],9,[[285,[-1]]]],[[],[[292,[-2,-1]]],9,[[285,[-1]]]],[[],[[293,[-2,-1]]],9,[[285,[-1]]]],[[],7],[[],7],[[],7],[[],7],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[292,[-2,-1]]],[],9,[[285,[-1]]]],[[[293,[-2,-1]]],[],9,[[285,[-1]]]],[[[292,[-2,-1]]],[],9,[[285,[-1]]]],[[[293,[-2,-1]]],[],9,[[285,[-1]]]],[[[294,[-2,-1,-3]],-4],37,9,[[285,[-1]]],136,101],[[[295,[-2,-1,-3]],-4],37,9,[[285,[-1]]],136,101],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[296,[-1]]],[[296,[-1]]],22],[[[297,[-1]]],[[297,[-1]]],[22,136]],[[[298,[-1]]],[[298,[-1]]],[22,136]],[299,299],[300,300],[301,301],[[[302,[-1]]],[[302,[-1]]],[22,136]],[[[303,[-1]]],[[303,[-1]]],[22,136]],[[[304,[-1]]],[[304,[-1]]],[22,136]],[[[305,[-1]]],[[305,[-1]]],[22,136]],[[[306,[-1]]],[[306,[-1]]],[22,136]],[[[307,[-1]]],[[307,[-1]]],[22,136]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[],[[297,[-1]]],[34,136]],[[],[[298,[-1]]],[34,136]],[[],299],[[],300],[[],301],[[],[[302,[-1]]],[34,136]],[[],[[303,[-1]]],[34,136]],[[],[[304,[-1]]],[34,136]],[[],[[305,[-1]]],[34,136]],[[],[[306,[-1]]],[34,136]],[[],[[307,[-1]]],[34,136]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[[296,[-2]]]]],99,308],[-1,[[37,[309]]],99],[-1,[[37,[[310,[-2]]]]],99,308],[-1,[[37,[311]]],99],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[[309,309],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],[[],80],0,[[[296,[-1]],35],54,38],[[[297,[-1]],35],54,[38,136]],[[[298,[-1]],35],54,[38,136]],[[123,35],54],[[123,35],54],[[309,35],54],[[[310,[-1]],35],54,38],[[311,35],54],[[299,35],54],[[300,35],54],[[301,35],54],[[[302,[-1]],35],54,[38,136]],[[[303,[-1]],35],54,[38,136]],[[[304,[-1]],35],54,[38,136]],[[[305,[-1]],35],54,[38,136]],[[[306,[-1]],35],54,[38,136]],[[[307,[-1]],35],54,[38,136]],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],-1,[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],0,[-1,[[37,[-2,123]]],[],312],[-1,[[37,[-2,123]]],[],312],[-1,[[37,[-2,123]]],[],83],[[[297,[-1]]],[[37,[-2,123]]],136,83],[[[298,[-1]]],[[37,[-2,123]]],136,83],[[[302,[-1]]],[[37,[-2,123]]],136,83],[[[303,[-1]]],[[37,[-2,123]]],136,83],[[[304,[-1]]],[[37,[-2,123]]],136,83],[[[305,[-1]]],[[37,[-2,123]]],136,83],[[[306,[-1]]],[[37,[-2,123]]],136,83],[[[307,[-1]]],[[37,[-2,123]]],136,83],0,0,[[46,-1],[[296,[-1]]],[]],[[],[[297,[-1]]],136],[[],[[298,[-1]]],136],[[46,46,46,46,46],309],[-1,[[310,[-1]]],[]],[309,311],[[],[[302,[-1]]],136],[[],[[303,[-1]]],136],[[],[[304,[-1]]],136],[[],[[305,[-1]]],136],[[],[[306,[-1]]],136],[[],[[307,[-1]]],136],[[-1,-2],[[37,[123]]],[],312],[[-1,-2],[[37,[123]]],[],312],[[-1,-2],[[37,[123]]],[],95],[[[297,[-1]],-2],[[37,[123]]],136,95],[[[298,[-1]],-2],[[37,[123]]],136,95],[[[302,[-1]],-2],[[37,[30,123]]],136,95],[[[303,[-1]],-2],[[37,[30,123]]],136,95],[[[304,[-1]],-2],[[37,[30,123]]],136,95],[[[305,[-1]],-2],[[37,[30,123]]],136,95],[[[306,[-1]],-2],[[37,[30,123]]],136,95],[[[307,[-1]],-2],[[37,[30,123]]],136,95],[[[296,[-1]],-2],37,95,101],[[309,-1],37,101],[[[310,[-1]],-2],37,95,101],[[311,-1],37,101],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,46,[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],313],[[],314],0,0,0,0,0,0,0,0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,0,0,0,0,0,0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,[[],313],[[],314],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],313],[[],314],0,0,0,0,0,0,0,0,0,[[],313],[[],314],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[313,313],[313,313],[-1,-2,[],[]],[314,314],[314,314],[-1,-2,[],[]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[[313,313],313],[[-1,-2],-2,[],[]],[[314,314],314],[[-1,-2],-2,[],[]],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],0,[[]],[[313,313]],[[313,313]],[[313,313]],[[313,313]],[[314,314]],[[314,314]],[[314,314]],[[314,314]],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[[313,313],30],[[313,313],30],[[314,314],30],[[314,314],30],[-1,[],316],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[-1,[],316],[-1,[],316],[[[11,[7]]],[[109,[-1,120]]],9],[[[11,[7]]],[[109,[-1,120]]],9],[[[11,[7]],7],[[109,[-1,120]]],9],[[[11,[7]],7],[[109,[-1,120]]],9],[7],[[[109,[-1,-2]],7],[[109,[-1,120]]],9,[[315,[-1]]]],[7],[7],[7],[[[109,[-1,-2]],7],[[109,[-1,120]]],9,[[315,[-1]]]],[7],[7],[313,167],[313,7],[313,57],[313,317],[313,318],[313,39],[313,13],[313,313],[313,319],[313,320],[313,321],[313,50],[313,322],[314,321],[314,57],[314,50],[314,317],[314,39],[314,318],[314,7],[314,314],[314,320],[314,322],[314,13],[314,319],[314,167],[313,313],[-1,-2,[],[]],[314,314],[-1,-2,[],[]],[-1,-2,[],[]],[313,313],[314,314],[-1,-2,[],[]],[[[18,[-1]],[18,[-1]],7],30,[]],[[[18,[-1]],[18,[-1]],167],30,[]],[[[18,[-1]],[11,[-2]]],30,323,323],[-1,-2,[],[]],[313,313],[314,314],[-1,-2,[],[]],[[-1,-2],-2,[],[]],[[313,313],313],[[314,314],314],[[-1,-2],-2,[],[]],[-1,-2,[],[]],[313,313],[314,314],[-1,-2,[],[]],0,[[[109,[-1,324]]],[],128],0,[[[109,[-1,324]],325],[],9],[[[109,[-1,119]]],[[109,[-1,119]]],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[15]],7]],[[[16,[[109,[-1,-2]],15]],7],[[109,[-1,-2]]],9,[[326,[-1]]]],[[[16,[15]],7]],[[[16,[15]],7]],[[[16,[15]],7]],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[313,313],[-1,-2,[],[]],[313,313],[314,314],[314,314],[-1,-2,[],[]],0,[[]],[[313,313,313],313],[[314,314,314],314],[[[109,[-1,-2]],-3,-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[]],[[]],[[]],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[]],[[]],[[]],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[]],[[]],[313,327],[313,327],[313,327],[314,327],[314,327],[314,327],[313,313],[314,314],[[[109,[-1,-2]]],[[109,[-1,-2]]],[22,9],[22,[328,[-1]]]],[324,324],[120,120],[119,119],[[[329,[-1]]],[[329,[-1]]],22],[[[18,[-1]]],[[18,[-1]]],22],[49,49],[330,330],[17,17],[[[331,[-1,-2]]],[[331,[-1,-2]]],[22,9],[22,[332,[-1]]]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,[[[329,[-1]]],[[329,[-2]]],323,323],[[[18,[6]]],[[18,[-1]]],323],[[[18,[-1]]],[[18,[-2]]],323,323],[[313,313],313],[[314,314],314],[-1,-2,[],[]],[313,313],[-1,-2,[],[]],[314,314],[[[109,[-1,324]]],[[109,[-1,324]]],9],[313,313],[-1,-2,[],[]],[314,314],[-1,-2,[],[]],[[[109,[-1,324]],7,7],[[109,[-1,324]]],9],[[],313],[[],314],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[-1,[[37,[313]]],99],[-1,[[37,[314]]],99],[-1,[[37,[[329,[-2]]]]],99,308],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[]],[[[109,[-1,-2]]],[],9,[[326,[-1]]]],[[]],[[]],[[]],[[313,[118,[-1]]],[[118,[-1]]],9],[[314,[118,[-1]]],[[118,[-1]]],9],[[[109,[-1,-2]],[118,[-1]]],[[118,[-1]]],9,[[326,[-1]]]],[7,[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,-2]]],[[10,[7]]],9,[[326,[-1]]]],0,[[]],[[313,313]],[[313,313]],[[313,313]],[[313,313]],[[314,314]],[[314,314]],[[314,314]],[[314,314]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[[313,313],30],[[313,313],30],[[314,314],30],[[314,314],30],[-1,[],316],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[-1,[],316],[-1,[],316],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],0,[-1,-2,[],323],[313,-1,323],[314,-1,323],[[],80],[17],[-1,[[109,[-2,-3]]],[[124,[17]]],9,[[326,[-2]]]],[17],[17],[17],[-1,[[109,[-2,-3]]],[[124,[17]]],9,[[326,[-2]]]],[[],-1,[]],[[],313],[[],313],[[],314],[[],-1,[]],[[],314],[[313,313],6],[[314,314],6],[[[329,[-1]],[329,[-1]]],6,[]],[[[18,[-1]],[18,[-1]]],6,[]],[[330,330],6],[[17,17],6],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,119]]],9,[[326,[-1]]]],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],-3],[[109,[-1,119]]],9,[[315,[-1]]],323],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[109,[-1,324]]],[[109,[-1,324]]],9],[313,313],[-1,-2,[],[]],[314,314],[-1,-2,[],[]],[[[109,[-1,324]]],[[109,[-1,324]]],9],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[-1,-2,[],[]],[313,313],[314,314],[-1,-2,[],[]],0,[[[109,[-1,-2]],7,7],[[109,[-1,-2]]],9,[[326,[-1]]]],[[[109,[-1,119]]],[[109,[-1,324]]],9],[[[109,[-1,120]]],[[109,[-1,324]]],9],[313,313],[-1,-2,[],[]],[313,313],[314,314],[314,314],[-1,-2,[],[]],[[313,35],[[37,[30,36]]]],[[313,35],[[37,[30,36]]]],[[313,35],[[37,[30,36]]]],[[313,35],[[37,[30,36]]]],[[313,35],[[37,[30,36]]]],[[313,35],[[37,[30,36]]]],[[313,35],[[37,[30,36]]]],[[313,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[314,35],[[37,[30,36]]]],[[[109,[-1,-2]],35],[[37,[30,36]]],[38,9],[38,[328,[-1]]]],[[[109,[-1,-2]],35],[[37,[30,36]]],9,[[326,[-1]]]],[[324,35],[[37,[30,36]]]],[[120,35],[[37,[30,36]]]],[[119,35],[[37,[30,36]]]],[[[329,[-1]],35],[[37,[30,36]]],38],[[[18,[-1]],35],[[37,[30,36]]],38],[[[18,[-1]],35],[[37,[30,36]]],38],[[49,35],[[37,[30,36]]]],[[330,35],[[37,[30,36]]]],[[17,35],[[37,[30,36]]]],[[[331,[-1,-2]],35],[[37,[30,36]]],[38,9],[38,[332,[-1]]]],[[[331,[-1,-2]],35],[[37,[30,36]]],9,[[332,[-1]],[332,[-1]]]],[313,313],[314,314],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[-1,-2,[],[]],[313,313],[313,313],[314,314],[-1,-2,[],[]],[314,314],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[31,[313]]],333],[320,313],[-1,-1,[]],[57,313],[-1,-1,[]],[320,314],[-1,[[31,[314]]],333],[57,314],[334,314],[-1,-1,[]],[[[331,[-1,-2]]],[[109,[-1,324]]],9,[[332,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[10,[-1]]],[[18,[-1]]],[38,335]],[[[329,[-1]]],[[18,[-1]]],[]],[[[329,[-1]]],[[18,[-1]]],22],[[[10,[[10,[-1]]]]],[[18,[-1]]],[38,335]],[[[10,[[10,[[10,[-1]]]]]]],[[18,[-1]]],[38,335]],[[[10,[[10,[[10,[[10,[-1]]]]]]]]],[[18,[-1]]],[38,335]],[[[58,[-1]]],[[18,[-1]]],[38,335]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[16,[7,15]]],17],[[[16,[13,15]]],17],[[[16,[50,15]]],17],[[[16,[7,15]]],17],[[[10,[7]]],17],[-1,-1,[]],[[[109,[-1,324]]],[[331,[-1,-2]]],9,[[332,[-1]]]],[-1,-1,[]],[[[10,[57]]],313],[[[10,[57]]],314],[317,313],[317,314],[[[18,[6]]],[[109,[-1,119]]],9],[[[18,[6]]],[[109,[-1,119]]],9],[18],[-1,[[109,[-2,-3]]],[[124,[18]]],9,[[326,[-2]]]],[18],[18],[18],[-1,[[109,[-2,-3]]],[[124,[18]]],9,[[326,[-2]]]],[-1,-2,333,[]],[-1,313,333],[-1,314,333],[314,314],[39,[[31,[313]]]],[39,313],[39,314],[39,[[31,[314]]]],[39,314],[39,313],[39,314],[167,[[31,[313]]]],[167,313],[167,314],[167,[[31,[314]]]],[167,313],[167,314],[-1,[[109,[-2,324]]],[[124,[[18,[39]]]]],9],[[[109,[324]]],[[109,[-1,324]]],9],[322,[[31,[313]]]],[322,[[31,[314]]]],[321,[[31,[313]]]],[321,[[31,[314]]]],[13,[[31,[313]]]],[13,[[31,[314]]]],[320,[[31,[313]]]],[320,[[31,[314]]]],[[]],[109,[[109,[-1,-2]]],128,[[336,[-1]]]],[[]],[[]],[[]],[-1,[[109,[-2,120]]],[[124,[[18,[321]]]]],9],[[],313],[[],314],[[],[[109,[-1,119]]],9],[[],[[109,[-1]]],9],[[],[[109,[-1,120]]],9],[[],[[329,[-1]]],323],[[[10,[57]]],313],[[[10,[57]]],314],[[[10,[57]]],313],[[[10,[57]]],314],[[],[[109,[-1,-2]]],9,[[326,[-1]]]],[80,[[37,[313,337]]]],[80,[[37,[314,337]]]],[[80,319],[[37,[313]]]],[[80,319],[[37,[314]]]],[[[109,[-1,324]]],[[331,[-1,-2]]],9,[[332,[-1]]]],[317,[[31,[313]]]],[317,[[31,[314]]]],[319,[[31,[313]]]],[319,314],[319,[[31,[314]]]],[50,[[31,[313]]]],[50,[[31,[314]]]],[57,[[31,[313]]]],[57,[[31,[314]]]],[[[18,[7]]],[[18,[-1]]],338],[[17,-1],[],316],[[-1,-2],[[109,[-3,-4]]],[[124,[17]]],316,9,[[315,[-3]]]],[[17,-1],[],316],[[17,-1],[],316],[[17,-1],[[18,[-1]]],[38,323]],[[-1,-2],[[109,[-3,-4]]],[[124,[17]]],316,9,[[315,[-3]]]],[[7,[109,[-1,120]]],[],[]],[[[109,[-1,-2]],7,[109,[-1,120]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[7,[109,[-1,120]]],[],9],[[7,[109,[-1,120]]],[],9],[[313,313],6],[[314,314],6],[[[109,[-1,324]]],[[31,[[109,[324]]]]],128],[[[109,[-1,324]]],[[31,[[109,[324]]]]],128],[[[109,[-1,324]],[109,[324]]],30,128],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,119]]],9,[[315,[-1]]]],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],-3],[[109,[-1,119]]],9,[[315,[-1]]],316],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,119]]],9,[[315,[-1]]]],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],-3],[[109,[-1,119]]],9,[[315,[-1]]],316],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[313,313],6],[[314,314],6],[[-1,-2],-2,[],[]],[[313,313],313],[[314,314],314],[[-1,-2],-2,[],[]],[[],313],[[],313],[[],314],[[],314],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[[109,[-1,-2]]],109,128,[[336,[-1]]]],[[]],[[]],[[]],[[[109,[-1,324]],-2],30,9,127],[[[109,[-1,119]]],[[109,[-1,120]]],9],[[[109,[-1,324]]],[[109,[-1,120]]],9],[313,[[30,[50,322,320]]]],[313,[[30,[50,322,320]]]],[314,[[30,[50,322,320]]]],[314,[[30,[50,322,320]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[20,[18]]]],[[[109,[-1,-2]]],18,9,[[326,[-1]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[[],[[20,[18]]]],[-1,[[93,[-2]]],[],94],[313],[314],[[[109,[-1,120]]],[],9],[[[109,[-1]]],[],9],[[[109,[-1,119]]],[],9],[[[329,[-1]]],[],323],[-1,-2,[],[]],[[[109,[-1,-2]]],[],9,[[326,[-1]]]],[313],[314],[[[109,[-1,-2]]],[],9,[[326,[-1]]]],[[[109,[-1,-2]]],[],9,[[315,[-1]]]],[[-1,[109,[-2,-3]]],17,[],9,[[326,[-2]]]],[[17,[109,[-1,-2]]],17,9,[[326,[-1]]]],[313,6],[313,6],[313,6],[314,6],[314,6],[314,6],[313,6],[313,6],[313,6],[314,6],[314,6],[314,6],[313,6],[313,6],[313,6],[314,6],[314,6],[314,6],[313,6],[313,6],[313,6],[314,6],[314,6],[314,6],[[[109,[-1,324]]],6,9],[313,6],[313,6],[313,6],[-1,6,[]],[314,6],[314,6],[-1,6,[]],[314,6],[313,6],[313,6],[313,6],[-1,6,[]],[-1,6,[]],[314,6],[314,6],[314,6],[-1,6,[]],[-1,6,[]],[313,6],[314,6],[[[109,[-1,-2]],7],[[339,[-1,-2]]],9,[[326,[-1]]]],[[313,313],6],[[314,314],6],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[-1,-2,[],[]],[313,313],[314,314],[-1,-2,[],[]],[313,313],[314,314],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[[313,313],313],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[314,314],314],[[[109,[-1,324]]],[[109,[-1,324]]],9],[-1,-2,[],[]],[313,313],[314,314],[-1,-2,[],[]],[[[109,[-1,324]]],[[109,[-1,324]]],9],[-1,-2,[],[]],[313,313],[314,314],[-1,-2,[],[]],0,[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,119]]],9,[[315,[-1]]]],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],-3],[[109,[-1,119]]],9,[[315,[-1]]],316],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,119]]],9,[[315,[-1]]]],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],[]],[[[109,[-1,-2]],-3],[[109,[-1,119]]],9,[[315,[-1]]],316],[[],[[109,[-1,119]]],9],[[],[[109,[-1,119]]],9],[[313,313],6],[[314,314],6],0,[[[20,[-1]],-2],[[20,[-3]]],61,[127,61],61],[[313,-2],313,9,[[126,[-1]]]],[[314,-2],314,9,[[126,[-1]]]],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[326,[-1]]],[[126,[-1]]]],[[[109,[-1,119]]],[],[]],[[[109,[-1,-2]],[109,[-1,119]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[[109,[-1,119]]],[],9],[[[109,[-1,119]]],[],9],[[[109,[-1,119]]],[],[]],[[[109,[-1,-2]],[109,[-1,119]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,119]]],[],9],[[[109,[-1,119]]],[],9],[[[109,[-1,324]],[109,[-1,324]]],[[109,[-1,324]]],9],[[[331,[-1,-2]],[331,[-1,-3]]],[[331,[-1,-4]]],9,[[332,[-1]]],[[332,[-1]]],[[332,[-1]]]],[[]],[[313,313],313],[[313,313],313],[[313,313],313],[[-1,-2],-2,[],[]],[[314,314],314],[[314,314],314],[[314,314],314],[[-1,-2],-2,[],[]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[7],[[[109,[-1,-2]],7],[[109,[-1,-2]]],9,[[315,[-1]]]],[7],[7],[7,30],[[[109,[-1,-2]],7],[[30,[[109,[-1,-2]],[109,[-1,120]]]]],9,[[315,[-1]]]],[7,30],[7,30],[[],-1,[]],[[],-1,[]],[[],313],[[],313],[[],313],[[],-1,[]],[[],314],[[],314],[[],-1,[]],[[],314],[[]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[7],[[[109,[-1,-2]],7],[[109,[-1,-2]]],9,[[315,[-1]]]],[7],[7],[[]],[[313,313],313],[[-1,-2],-2,[],[]],[[313,313],313],[[313,313],313],[[314,314],314],[[314,314],314],[[314,314],314],[[-1,-2],-2,[],[]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[7],[[[109,[-1,-2]],7],[[109,[-1,-2]]],9,[[315,[-1]]]],[7],[7],[7,30],[[[109,[-1,-2]],7],[[30,[[109,[-1,-2]],[109,[-1,120]]]]],9,[[315,[-1]]]],[7,30],[7,30],[[],313],[[],-1,[]],[[],313],[[],314],[[],314],[[],-1,[]],[[],313],[[],313],[[],-1,[]],[[],313],[[],-1,[]],[[],314],[[],-1,[]],[[],314],[[],314],[[],-1,[]],0,[[]],[[313,313]],[[313,313]],[[313,313]],[[313,313]],[[314,314]],[[314,314]],[[314,314]],[[314,314]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[]],[[]],[[[331,[-1,-2]],[331,[-1,-2]]],[[331,[-1,-2]]],9,[[332,[-1]]]],[[313,313,313],313],[[-1,-2,-2],-2,[],[]],[[314,314,314],314],[[-1,-2,-2],-2,[],[]],[[313,313],30],[[313,313],30],[[314,314],30],[[314,314],30],[-1,[],316],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[-1,[],316],[-1,[],316],[[],80],[[],80],[[],80],[[],80],[[],313],[[],313],[[],314],[[],314],[[]],[313],[313],[314],[314],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[[],313],[[],313],[[],314],[[],314],[[],313],[[],313],[[],314],[[],314],[[],[[109,[-1,-2]]],9,[[328,[-1]]]],[[[16,[-1,15]],[16,[7,15]]],[[329,[-1]]],[]],[[[16,[-1,15]],17],[[18,[-1]]],[]],[[[340,[-1]],-2],[[341,[-1,-2]]],342,343],[[[10,[7]]],17],[[[339,[-1,-2]]],31,9,[[326,[-1]]]],[17,7],[[],313],[[],314],[[7,7],[[109,[-1,324]]],9],[17],[-1,[[109,[-2,-3]]],[[124,[17]]],9,[[315,[-2]]]],[17],[17],[17,[[18,[-1]]],[38,323]],[-1,[[109,[-2,-3]]],[[124,[17]]],9,[[315,[-2]]]],[[[109,[-1,324]]],[[109,[-1,324]]],9],0,[[313,313],[[31,[344]]]],[[314,314],[[31,[344]]]],[[-1,-2],-2,[],[]],[[313,313],313],[[-1,-2],-2,[],[]],[[314,314],314],[[[109,[-1,324]],39],[[109,[-1,324]]],9],[[-1,321],-2,[],[]],[[313,321],313],[[313,321],313],[[-1,321],-2,[],[]],[[314,321],314],[[314,321],314],[[],330],[[],330],[[],330],[-1,313,94],[-1,313,94],[-1,314,94],[-1,314,94],[[49,-1],-2,343,73],[[49,-1],313,343],[[49,-1],314,343],[[-1,49],[[109,[-2,324]]],[[124,[17]]],9],[[17,49,-1],[[18,[-2]]],343,323],[[-1,49],[[331,[-2,-3]]],[[124,[17]]],9,[[332,[-2]]]],[[-1,49],[[109,[-2,324]]],[[124,[17]]],9],[[[109,[-1,324]],49],[[109,[-1,324]]],9],[[[20,[-1]]],-1,[]],[[[20,[-1]]],[[31,[-1]]],[]],[313,313],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[314,314],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[313,313]],[[313,313]],[[313,313]],[[313,313]],[[314,314]],[[314,314]],[[314,314]],[[314,314]],[[313,313],30],[[313,313],30],[[314,314],30],[[314,314],30],[[7,7]],[[[109,[-1,-2]],7,7],[[109,[-1,-2]]],9,[[326,[-1]]]],[[7,7]],[[7,7]],[[7,7]],[[[109,[-1,324]]],[[109,[-1,324]]],9],[17],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[326,[-1]]],345],[17],[17],[17],[[[331,[-1,-2]],-3,-4],[[331,[-1,-4]]],9,[[332,[-1]]],[[124,[17]]],[[332,[-1]]]],[313,313],[-1,-2,[],[]],[313,313],[-1,-2,[],[]],[314,314],[314,314],[[[341,[-1,-2]]],-1,[342,323],343],[[49,-1],[[341,[-2,-1]]],343,[323,342]],[[7,[109,[-1,120]]],[],[]],[[[109,[-1,-2]],7,[109,[-1,120]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[7,[109,[-1,120]]],[],9],[[7,[109,[-1,120]]],[],9],[[7,[109,[-1,120]]],[],[]],[[[109,[-1,-2]],7,[109,[-1,120]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[7,[109,[-1,120]]],[],9],[[7,[109,[-1,120]]],[],9],[[7,[109,[-1,120]]],[],[]],[[[109,[-1,-2]],7,[109,[-1,120]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[7,[109,[-1,120]]],[],9],[[7,[109,[-1,120]]],[],9],[[313,-1],37,101],[[314,-1],37,101],[[[329,[-1]],-2],37,95,101],[[[18,[-1]]],[[329,[-1]]],[38,335]],[[313,-1],37,101],[[314,-1],37,101],[[313,-1],37,101],[[314,-1],37,101],[346,30],[[[109,[-1,324]],6],[[109,[-1,324]]],9],[[],17],[[[109,[-1,-2]]],17,9,[[326,[-1]]]],[[],17],[[],17],[[],17],[[[331,[-1,-2]]],17,9,[[332,[-1]]]],0,0,[-1,-2,[],[]],[313,313],[313,313],[313,313],[314,314],[314,314],[314,314],[-1,-2,[],[]],[-1,-2,[],[]],[313,313],[-1,-2,[],[]],[314,314],[[[109,[-1,324]]],[[109,[-1,324]]],9],[-1,[[30,[-2,-2]]],[],[]],[313,[[30,[313,313]]]],[314,[[30,[314,314]]]],[-1,[[30,[-2,-2]]],[],[]],[313,313],[-1,-2,[],[]],[314,314],[-1,-2,[],[]],[[[10,[[11,[7]]]]]],[[[109,[-1,-2]],[10,[[11,[7]]]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[109,[-1,-2]],[10,[[11,[7]]]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,-2]],7],[[109,[-1,-2]]],9,[[326,[-1]]]],[[]],[[313,313]],[[313,313]],[[313,313]],[[313,313]],[[314,314]],[[314,314]],[[314,314]],[[314,314]],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[[109,[-1,-2]],[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[[313,313],30],[[313,313],30],[[314,314],30],[[314,314],30],[-1,[],316],[[[109,[-1,-2]],-3],[[109,[-1,-2]]],9,[[315,[-1]]],316],[-1,[],316],[-1,[],316],[[]],[-1,313,94],[-1,313,94],[-1,314,94],[-1,314,94],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[315,[-1]]]],[[]],[[]],[7],[[[109,[-1,-2]],7],[[109,[-1,-2]]],9,[[315,[-1]]]],[7],[7],[[7,7]],[[[109,[-1,-2]],7,7],[[109,[-1,-2]]],9,[[326,[-1]]]],[[7,7]],[[7,7]],[[7,7]],[[[331,[-1,-2]]],[[331,[-1,-3]]],9,[[332,[-1]]],[[332,[-1]]]],[313,313],[-1,-2,[],[]],[-1,-2,[],[]],[314,314],[313,313],[-1,-2,[],[]],[314,314],[-1,-2,[],[]],[[[109,[-1,324]]],[[109,[-1,324]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[313,[[10,[57]]]],[314,[[10,[57]]]],[313,317],[314,317],[[[109,[-1,-2]]],18,9,[[326,[-1]]]],[-1,-2,[],[]],[313,313],[313,313],[314,314],[-1,-2,[],[]],[314,314],[[]],[313,313],[314,314],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[[]],[[]],[[]],[314,314],[313,[[31,[39]]]],[313,39],[314,39],[314,[[31,[39]]]],[314,39],[313,39],[314,39],[313,[[31,[167]]]],[313,167],[314,[[31,[167]]]],[314,167],[313,167],[314,167],[[[109,[-1,324]]],[[109,[324]]],9],[313,[[31,[322]]]],[314,[[31,[322]]]],[313,[[31,[321]]]],[314,[[31,[321]]]],[313,[[31,[13]]]],[314,[[31,[13]]]],[313,[[31,[320]]]],[314,[[31,[320]]]],[313,[[10,[57]]]],[314,[[10,[57]]]],[313,[[10,[57]]]],[314,[[10,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[313,313],[313,313],[314,314],[314,314],[-1,-2,[],[]],[[],46],[[],46],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[-1,46,[]],[313,[[31,[317]]]],[314,[[31,[317]]]],[313,[[31,[319]]]],[314,319],[314,[[31,[319]]]],[313,[[31,[50]]]],[314,[[31,[50]]]],[313,[[31,[57]]]],[314,[[31,[57]]]],[[313,313],344],[[314,314],344],[[]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[[]],[[]],[[]],[-1,[[97,[-2]]],[],94],[313,313],[-1,-2,[],[]],[313,313],[-1,-2,[],[]],[314,314],[314,314],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[347,[[37,[313]]]],[347,[[37,[313]]]],[-1,[[37,[-2]]],[],[]],[347,[[37,[314]]]],[347,[[37,[314]]]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[[109,[-1,-2]]],[[109,[-1,-2]]],9,[[326,[-1]]]],[[[109,[-1,-2]],7],[[109,[-1,-2]]],9,[[326,[-1]]]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[313],[314],[[[109,[-1,-2]]],[],128,[[336,[-1]]]],[[314,314,348,46],[[37,[30,46]]]],0,0,[[[109,[-1,324]],7],[[109,[-1,324]]],9],[[[109,[-1,324]],7],[[109,[-1,324]]],9],[[[109,[-1,324]],7],[[30,[[109,[-1,324]],[109,[-1,324]]]]],9],[[[109,[-1,324]],7],[[30,[[109,[-1,324]],[109,[-1,324]]]]],9],[[313,-2],30,9,[[129,[-1]]]],[[314,-2],30,9,[[129,[-1]]]],[[[109,[-1,-2]],-3],30,9,[[326,[-1]]],[[129,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],313],[[],314],[17],[-1,[[109,[-2,-3]]],[[124,[17]]],9,[[315,[-2]]]],[17],[17],[-1,[[18,[-2]]],[[124,[17]]],[38,323]],[-1,[[109,[-2,-3]]],[[124,[17]]],9,[[315,[-2]]]],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,324]],7],[[109,[-1,324]]],9],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,324]],7],[[109,[-1,324]]],9],[[[109,[-1,324]]],[[109,[-1,324]]],9],0,0,0,0,0,0,0,0,0,0,0,0,[[],6],[[]],[[]],[[]],[[]],[[],31],[[],31],[[],30],[[]],[[]],[[]],[[],46],[50,30],[[],30],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[349,[-1]]],[]],[7,-1,[]],[7,-1,[]],[-1,-2,[],[]],[7,30],[[[349,[-1]],35],[[37,[30,36]]],38],[-1,-1,[]],[[[349,[-1]],-1],[[31,[[109,[-2,324]]]]],[],9],[[],7],[-1,-2,[],[]],[[[349,[-1]]],6,[]],[[[349,[-1]]],7,[]],[[],[[349,[-1]]],[]],[[[349,[-1]],-1,[109,[-2,324]]],30,[],9],[[[349,[-1]],-1],[[31,[[109,[-2,324]]]]],[],9],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[[[109,[-1,324]],[109,[-1,324]]],[[109,[-1,324]]],9],[[[109,[-1,324]],7],[[109,[-1,324]]],9],[[[109,[-1,324]],[10,[7]]],[[109,[-1,324]]],9],[[[109,[-1,324]],7,7,7,6],[[109,[-1,324]]],9],[[[109,[-1,324]],[10,[7]],[10,[7]],[10,[7]],6],[[109,[-1,324]]],9],[[[109,[-1,324]],[109,[-1,324]],[31,[[109,[-1,324]]]],32],[[109,[-1,324]]],9],[[[109,[-1,324]],[109,[-1,324]],[31,[[109,[-1,324]]]],32],[[109,[-1,324]]],9],[[[109,[-1,324]],[109,[-1,324]],[31,[[109,[-1,324]]]],33],[[109,[-1,324]]],9],[[[109,[-1,324]],[109,[-1,324]],[31,[[109,[-1,324]]]],33],[[109,[-1,324]]],9],[[[109,[-1,324]],[109,[-1,120]]],[[109,[-1,324]]],9],[[[109,[-1,324]],7,7,7,7],[[109,[-1,324]]],9],[[[109,[-1,324]],7,7,7,7],[[30,[[109,[-1,324]],[109,[-1,120]]]]],9],[[[109,[-1,324]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[109,[-1,324]]],9],[[[109,[-1,324]],[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[30,[[109,[-1,324]],[109,[-1,120]]]]],9],[[[109,[-1,324]],[10,[7]],350],[[109,[-1,324]]],9],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[7],[[]],[[[10,[7]]]],[[]],[[]],[[]],[[[11,[7]]]],[[[11,[7]],7]],[7],[7],[[7,7,7,6]],[[7,7,7,6]],[[[10,[7]],[10,[7]],[10,[7]],6]],[[[10,[7]],[10,[7]],[10,[7]],6]],0,0,[[[16,[15]],7]],[[]],[17],[[]],[[[18,[6]]]],[[],[[20,[[18,[6]]]]]],[[]],[[]],[[]],[[7,7]],[17],[[],17],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[7,7]],[[],[[20,[[18,[6]]]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[15]],7]],[[]],[[]],[[]],[32,32],[33,33],[350,350],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,[[31,32]],[[31,32],[[351,[-1]]],[]],[[31,32]],[[31,32],[[352,[-1]]],[]],[[31,33]],[[31,33],[[351,[-1]]],[]],[[31,33]],[[31,33],[[352,[-1]]],[]],[[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[7,-1,[]],[[]],[[]],0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[7,30],[[]],[[]],[17],[[]],[[]],[[]],[[]],[[32,35],[[37,[30,36]]]],[[33,35],[[37,[30,36]]]],[[350,35],[[37,[30,36]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[18],[[]],[17],[7],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[32,-1],30,121],[[33,-1],30,121],0,0,[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[]],[[]],[[]],[7],[7],[[[16,[15]],7]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[[]],[[]],[18],[17],[7],[[]],[[]],[[]],[[]],[[],[[20,[18]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[7,30],[[]],[7],[[]],[7],[7,30],[[]],[[]],[[]],[17],[[7,7]],[17],[7],[7],[7],[[],17],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[]],[[]],[[]],[7],[[7,7]],[[],[[20,[18]]]],[[]],[[]],[17],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[20,[18]]]],[[]],[[],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[7,30],[[7,7,7,7]],[[7,7,7,7],[[41,[-1]]],[]],[[7,7,7,7],[[43,[-1]]],[]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[44,[-1]]],[]],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]]],[[45,[-1]]],[]],[[]],[7],[[]],[7],[7,30],[[]],[[]],[[]],[31,[[352,[-1]]],9],[[],[[43,[-1]]],9],[[],[[41,[-1]]],9],[[],[[45,[-1]]],9],[[],[[44,[-1]]],9],[31,[[351,[-1]]],9],[[[10,[7]],[10,[7]],[10,[7]],7],32],[[[10,[7]],[10,[7]],[10,[7]],[10,[7]],7],33],[[[10,[7]],[10,[7]],[10,[7]]],350],[17],0,0,0,0,0,0,0,[39],[[17,49]],[[]],[[]],[[]],[[7,7]],[17],[7],[7],[7],[6],[[],17],[[]],[[[10,[[11,[7]]]]]],[[[10,[[11,[7]]]]]],[[]],0,0,0,[[]],[[]],[[]],[7],[[7,7]],[[]],[[],[[20,[18]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,[[37,[-2]]],[],[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[-1,51,[]],[[[10,[7]],350]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[17],[[7,7,7,7,7],7],[[7,7,7,7],7],[[7,7,7,7,7,7],7],[[7,7,7,7,7],7]],"c":[],"p":[[6,"LearningRate",0],[3,"TchTensor",8359],[8,"TchElement",8360],[3,"NdArrayTensor",8361],[8,"FloatNdArrayElement",8362],[15,"bool"],[15,"usize"],[3,"AutodiffTensor",8363],[8,"Backend",7911],[15,"array"],[3,"Range",8364],[4,"LibTorchDevice",8365],[15,"i64"],[3,"Gradients",8366],[3,"Global",8367],[3,"Vec",8368],[3,"Shape",6368],[3,"Data",6368],[4,"NdArrayDevice",8369],[4,"Reader",6368],[3,"LibTorch",15],[8,"Clone",8370],[3,"NdArray",15],[3,"Autodiff",15],[3,"Fusion",15],[3,"Wgpu",15],[8,"GraphicsApi",8371],[8,"FloatElement",8372],[8,"IntElement",8372],[15,"tuple"],[4,"Option",8373],[3,"ConvOptions",7975],[3,"ConvTransposeOptions",7975],[8,"Default",8374],[3,"Formatter",8375],[3,"Error",8375],[4,"Result",8376],[8,"Debug",8375],[15,"f32"],[4,"WgpuDevice",8377],[3,"MaxPool1dWithIndices",7975],[8,"FusionBackend",8378],[3,"MaxPool1dBackward",7975],[3,"MaxPool2dWithIndices",7975],[3,"MaxPool2dBackward",7975],[3,"String",8379],[8,"FusionOps",8378],[3,"Box",8380],[4,"Distribution",6368],[15,"u64"],[3,"TypeId",8381],[8,"Config",904],[4,"ConfigError",904],[6,"Result",8375],[3,"Path",8382],[8,"AsRef",8383],[15,"u8"],[15,"slice"],[6,"Result",8384],[3,"FixBatchStrategy",932],[8,"Send",8385],[8,"Sync",8385],[3,"DataLoaderBuilder",932],[8,"DataLoader",932],[3,"Arc",8386],[8,"Dataset",1062],[3,"Progress",932],[4,"Message",932],[8,"DataLoaderIterator",932],[3,"BatchDataLoader",932],[3,"MultiThreadDataLoader",932],[3,"DatasetIterator",1062],[8,"Sized",8385],[8,"BatchStrategy",932],[8,"Batcher",1060],[3,"StdRng",8387],[3,"PathBuf",8382],[3,"SqliteDatasetStorage",1062],[3,"HuggingfaceDatasetLoader",1062],[15,"str"],[3,"SqliteDataset",1062],[4,"ImporterError",1062],[8,"DeserializeOwned",8388],[4,"SqliteDatasetError",1062],[3,"SqliteDatasetWriter",1062],[3,"Error",8384],[3,"Writable",8389],[3,"Error",8390],[4,"Error",8391],[4,"Error",8392],[3,"Error",8393],[3,"InMemDataset",1062],[3,"IntoFallible",8394],[8,"Iterator",8395],[8,"Serialize",8396],[8,"Error",8397],[3,"Convert",8394],[3,"MNISTItem",1262],[8,"Deserializer",8388],[3,"MNISTDataset",1262],[8,"Serializer",8396],[3,"ShuffledDataset",1311],[3,"SamplerDataset",1311],[3,"ComposedDataset",1311],[3,"MapperDataset",1311],[8,"Mapper",1311],[3,"PartialDataset",1311],[4,"GradientClipping",1407],[3,"Tensor",6368],[4,"GradientClippingConfig",1407],[3,"ConstantLr",1457],[3,"NoamLrSchedulerConfig",1481],[3,"NoamLrScheduler",1481],[3,"Param",1529],[3,"ConstantRecord",1529],[3,"ParamId",1529],[3,"RunningState",1529],[6,"Devices",1529],[3,"Bool",6368],[3,"Int",6368],[8,"Hasher",8398],[8,"Module",1529],[4,"RecorderError",5978],[8,"Into",8383],[8,"FileRecorder",5978],[8,"ModuleMapper",1529],[8,"FnOnce",8399],[8,"AutodiffBackend",7911],[8,"ModuleVisitor",1529],[3,"DropoutConfig",1713],[3,"Dropout",1713],[3,"EmbeddingConfig",1713],[3,"Embedding",1713],[3,"EmbeddingRecord",1713],[3,"EmbeddingRecordItem",1713],[8,"PrecisionSettings",5978],[3,"GELU",1713],[4,"Initializer",1713],[3,"LinearConfig",1713],[3,"Linear",1713],[3,"LinearRecord",1713],[3,"LinearRecordItem",1713],[3,"BatchNormConfig",1713],[3,"BatchNorm",1713],[3,"BatchNormRecord",1713],[3,"BatchNormRecordItem",1713],[3,"GroupNormConfig",1713],[3,"GroupNorm",1713],[3,"GroupNormRecord",1713],[3,"GroupNormRecordItem",1713],[3,"LayerNormConfig",1713],[3,"LayerNorm",1713],[3,"LayerNormRecord",1713],[3,"LayerNormRecordItem",1713],[4,"PaddingConfig1d",1713],[4,"PaddingConfig2d",1713],[3,"PositionalEncodingConfig",1713],[3,"PositionalEncoding",1713],[3,"PositionalEncodingRecord",1713],[3,"PositionalEncodingRecordItem",1713],[3,"ReLU",1713],[3,"GateController",1713],[3,"GateControllerRecord",1713],[3,"GateControllerRecordItem",1713],[3,"Unfold4dConfig",1713],[3,"Unfold4d",1713],[15,"f64"],[3,"MhaCache",2757],[3,"MultiHeadAttentionConfig",2757],[3,"MultiHeadAttention",2757],[3,"MultiHeadAttentionRecord",2757],[3,"MultiHeadAttentionRecordItem",2757],[3,"MhaInput",2757],[3,"MhaOutput",2757],[3,"GeneratePaddingMask",2757],[3,"TensorCache",2958],[3,"Conv1dConfig",2974],[3,"Conv1d",2974],[3,"Conv1dRecord",2974],[3,"Conv1dRecordItem",2974],[3,"Conv2dConfig",2974],[3,"Conv2d",2974],[3,"Conv2dRecord",2974],[3,"Conv2dRecordItem",2974],[3,"ConvTranspose1dConfig",2974],[3,"ConvTranspose1d",2974],[3,"ConvTranspose1dRecord",2974],[3,"ConvTranspose1dRecordItem",2974],[3,"ConvTranspose2dConfig",2974],[3,"ConvTranspose2d",2974],[3,"ConvTranspose2dRecord",2974],[3,"ConvTranspose2dRecordItem",2974],[3,"GruConfig",3491],[3,"Gru",3491],[3,"GruRecord",3491],[3,"GruRecordItem",3491],[3,"BinaryCrossEntropyLossConfig",3602],[3,"BinaryCrossEntropyLoss",3602],[3,"BinaryCrossEntropyLossRecord",3602],[3,"BinaryCrossEntropyLossRecordItem",3602],[3,"CrossEntropyLossConfig",3602],[3,"CrossEntropyLoss",3602],[3,"CrossEntropyLossRecord",3602],[3,"CrossEntropyLossRecordItem",3602],[3,"MSELoss",3602],[4,"Reduction",3602],[3,"LstmConfig",3866],[3,"Lstm",3866],[3,"LstmRecord",3866],[3,"LstmRecordItem",3866],[3,"AdaptiveAvgPool1dConfig",3979],[3,"AdaptiveAvgPool1d",3979],[3,"AdaptiveAvgPool2dConfig",3979],[3,"AdaptiveAvgPool2d",3979],[3,"AvgPool1dConfig",3979],[3,"AvgPool1d",3979],[3,"AvgPool2dConfig",3979],[3,"AvgPool2d",3979],[3,"MaxPool1dConfig",3979],[3,"MaxPool1d",3979],[3,"MaxPool2dConfig",3979],[3,"MaxPool2d",3979],[3,"TransformerDecoderConfig",4322],[3,"TransformerDecoder",4322],[3,"TransformerDecoderRecord",4322],[3,"TransformerDecoderRecordItem",4322],[3,"TransformerDecoderLayer",4322],[3,"TransformerDecoderLayerRecord",4322],[3,"TransformerDecoderLayerRecordItem",4322],[3,"TransformerEncoderConfig",4322],[3,"TransformerEncoder",4322],[3,"TransformerEncoderRecord",4322],[3,"TransformerEncoderRecordItem",4322],[3,"TransformerEncoderLayer",4322],[3,"TransformerEncoderLayerRecord",4322],[3,"TransformerEncoderLayerRecordItem",4322],[3,"PositionWiseFeedForwardConfig",4322],[3,"PositionWiseFeedForward",4322],[3,"PositionWiseFeedForwardRecord",4322],[3,"PositionWiseFeedForwardRecordItem",4322],[3,"TransformerDecoderInput",4322],[3,"TransformerEncoderInput",4322],[3,"TransformerDecoderAutoregressiveCache",4322],[3,"TransformerEncoderAutoregressiveCache",4322],[3,"GradientsAccumulator",4900],[3,"GradientsParams",4900],[8,"AutodiffModule",1529],[3,"AdaGradConfig",4900],[3,"AdaGradState",4900],[3,"AdaGradStateItem",4900],[3,"LRDecayState",4900],[3,"LRDecayStateItem",4900],[3,"AdamConfig",4900],[3,"AdamState",4900],[3,"AdamStateItem",4900],[3,"AdaptiveMomentumState",4900],[3,"AdaptiveMomentumStateItem",4900],[3,"AdamWConfig",4900],[3,"AdamWState",4900],[3,"AdamWStateItem",4900],[3,"AdaptiveMomentumWState",4900],[3,"AdaptiveMomentumWStateItem",4900],[3,"RMSPropConfig",4900],[3,"RMSPropState",4900],[3,"RMSPropStateItem",4900],[3,"SquareAvgState",4900],[3,"SquareAvgStateItem",4900],[3,"CenteredState",4900],[3,"CenteredStateItem",4900],[3,"RMSPropMomentumState",4900],[3,"RMSPropMomentumStateItem",4900],[3,"SgdConfig",4900],[3,"SgdState",4900],[3,"SgdStateItem",4900],[8,"Optimizer",4900],[3,"RMSProp",4900],[3,"OptimizerAdaptor",5686],[3,"Sgd",4900],[3,"MomentumState",5792],[3,"AdaGrad",4900],[3,"Adam",4900],[3,"AdamW",4900],[3,"MomentumConfig",5792],[3,"WeightDecayConfig",5707],[8,"SimpleOptimizer",4900],[15,"never"],[3,"WeightDecayState",5707],[3,"WeightDecayStateItem",5707],[3,"WeightDecay",5707],[3,"MomentumStateItem",5792],[3,"Momentum",5792],[4,"AdaptorRecord",5882],[4,"AdaptorRecordV1",5882],[4,"AdaptorRecordItem",5882],[4,"AdaptorRecordItemV1",5882],[3,"ParamSerde",5978],[3,"BinBytesRecorder",5978],[3,"NamedMpkBytesRecorder",5978],[3,"FullPrecisionSettings",5978],[3,"HalfPrecisionSettings",5978],[3,"DoublePrecisionSettings",5978],[3,"BinFileRecorder",5978],[3,"BinGzFileRecorder",5978],[3,"JsonGzFileRecorder",5978],[3,"PrettyJsonFileRecorder",5978],[3,"NamedMpkGzFileRecorder",5978],[3,"NamedMpkFileRecorder",5978],[8,"Deserialize",8388],[3,"BurnMetadata",5978],[3,"BurnRecord",5978],[3,"BurnRecordNoItem",5978],[8,"Record",5978],[3,"bf16",6368],[3,"f16",6368],[8,"Numeric",6368],[8,"ElementConversion",6368],[15,"u16"],[15,"isize"],[15,"u32"],[15,"i8"],[15,"i32"],[15,"i16"],[8,"Element",6368],[3,"Float",6368],[3,"T",6368],[8,"BasicOps",6368],[4,"FpCategory",8400],[8,"TensorKind",6368],[3,"DataSerialize",6368],[4,"Precision",6368],[3,"NamedTensor",6368],[8,"NamedDims",6368],[8,"ToPrimitive",8401],[4,"Sample",8402],[8,"Copy",8385],[8,"BasicAutodiffOps",6368],[3,"ParseFloatError",8403],[8,"FromPrimitive",8401],[3,"DimIter",6368],[4,"DistributionSamplerKind",6368],[3,"DistributionSampler",6368],[8,"SampleUniform",8404],[8,"RngCore",8405],[4,"Ordering",8406],[8,"ReshapeArgs",6368],[3,"PrintOptions",6368],[3,"Tensor",8407],[3,"ValidationOptions",8408],[3,"TensorContainer",7937],[3,"UnfoldOptions",7975],[3,"Conv1dBackward",7975],[3,"Conv2dBackward",7975],[6,"Result",1062],[8,"LrScheduler",1450],[13,"KaimingUniform",2746],[13,"KaimingNormal",2746],[13,"XavierUniform",2746],[13,"XavierNormal",2746],[13,"Uniform",2746],[13,"Normal",2746],[13,"Constant",2746],[3,"RMSPropMomentum",4900],[8,"Recorder",5978],[8,"ElementPrecision",6368],[8,"ElementRandom",6368],[8,"Dim",6368],[8,"TensorOps",7975],[8,"ModuleOps",7975],[8,"BoolTensorOps",7975],[8,"ActivationOps",7975],[8,"IntTensorOps",7975]]},\
"burn_dataset":{"doc":"Burn Dataset","t":"NIDNNNDEDNNNNNGNNDNEDDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLALLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLANDEDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ConnectionPool","Dataset","DatasetIterator","Err","FailToDownloadPythonDependencies","FileExists","HuggingfaceDatasetLoader","ImporterError","InMemDataset","Io","Ok","Other","PersistDbFile","PythonNotInstalled","Result","Serde","Sql","SqliteDataset","SqliteDataset","SqliteDatasetError","SqliteDatasetStorage","SqliteDatasetWriter","Unknown","VenvNotInitialized","base_dir","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","db_file","db_file","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","exists","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_csv","from_dataset","from_db_file","from_file","from_json_rows","from_name","get","get","get","init","init","init","init","init","init","into","into","into","into","into","into","into_fallible","into_iter","is_empty","is_empty","iter","iter","len","len","len","new","new","new","next","reader","set_completed","source","source","split","to_owned","to_string","transform","transpose_into_fallible","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","with_base_dir","write","writer","huggingface","FailToDownloadPythonDependencies","HuggingfaceDatasetLoader","ImporterError","MNISTDataset","MNISTItem","PythonNotInstalled","SqliteDataset","Unknown","VenvNotInitialized","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","dataset","db_file","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","from","get","image","init","init","init","init","into","into","into","into","label","len","new","serialize","source","test","to_owned","to_string","train","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","with_base_dir","with_huggingface_cache_dir","with_huggingface_token","with_subset","ComposedDataset","Mapper","MapperDataset","PartialDataset","SamplerDataset","ShuffledDataset","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","from","from","from","from","from","get","get","get","get","get","init","init","init","init","init","into","into","into","into","into","len","len","len","len","len","map","new","new","new","new","new","split","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","with_replacement","with_seed","without_replacement"],"q":[[0,"burn_dataset"],[147,"burn_dataset::source"],[148,"burn_dataset::source::huggingface"],[229,"burn_dataset::transform"],[315,"std::path"],[316,"core::option"],[317,"core::fmt"],[318,"core::fmt"],[319,"gix_tempfile::handle"],[320,"gix_tempfile::handle::persist::error"],[321,"rmp_serde::encode"],[322,"r2d2"],[323,"std::io::error"],[324,"core::result"],[325,"std::path"],[326,"core::clone"],[327,"serde::de"],[328,"core::marker"],[329,"core::marker"],[330,"core::iter::traits::iterator"],[331,"core::marker"],[332,"serde::ser"],[333,"core::error"],[334,"alloc::string"],[335,"fallible_iterator"],[336,"serde::de"],[337,"alloc::sync"]],"d":["Error when creating the connection pool.","The dataset trait defines a basic collection of items with …","Dataset iterator.","Contains the error value","Fail to download python dependencies.","The database file already exists error.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","Dataset where all items are stored in ram.","IO related error.","Contains the success value","Any other error.","Error when persisting the temporary database file.","python3 is not installed.","Result type for the sqlite dataset.","Serde related error.","Sql related error.","This struct represents a dataset where all items are …","Fail to create sqlite dataset.","Sqlite dataset error.","The <code>SqliteDatasetStorage</code> struct represents a SQLite …","This <code>SqliteDatasetWriter</code> struct is a SQLite database …","Unknown error.","venv environment is not initialized.","Determines the base directory for storing the dataset.","","","","","","","","","","","","","","","Get the database file name.","Fetches the database file path.","","","","","","","","","","","","","","","","","","","Checks if the database file exists in the given path.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create from a csv file.","Create from a dataset. All items are loaded in memory.","Initializes a <code>SqliteDataset</code> from a SQLite database file …","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Create from a json rows file (one json per line).","Creates a new instance of <code>SqliteDatasetStorage</code> using a …","Gets the item at the given index.","","Get an item from the dataset.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert an iterator of anything into <code>FallibleIterator</code> by …","","Checks if the dataset is empty.","Checks if the dataset is empty.","Returns an iterator over the dataset.","Returns an iterator over the dataset.","Gets the number of items in the dataset.","","Return the number of rows in the dataset.","Creates a new in memory dataset from the given items.","Creates a new dataset iterator.","Creates a new instance of <code>SqliteDatasetWriter</code>.","","Provides a reader instance for the SQLite dataset.","Marks the dataset as completed and persists the temporary …","Sources for datasets.","","Get the split name.","","","Transformations to be used with datasets.","Convert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …","","","","","","","","","","","","","","","","","","","","","","","","","Sets the base directory for storing the dataset.","Serializes and writes an item to the database. The item is …","Provides a writer instance for the SQLite dataset.","Huggingface source","Fail to download python dependencies.","Load a dataset from huggingface datasets.","Error type for HuggingfaceDatasetLoader.","MNIST dataset from Huggingface.","MNIST item.","python3 is not installed.","Fail to create sqlite dataset.","Unknown error.","venv environment is not initialized.","","","","","","","","","","","Load the dataset.","Get the path to the sqlite database file.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Image as a 2D array of floats.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Label of the image.","","Create a huggingface dataset loader.","","","Creates a new test dataset.","","","Creates a new train dataset.","","","","","","","","","","","","","","","","","Specify a base directory to store the dataset.","Specify a huggingface cache directory to store the …","Specify a huggingface token to download datasets behind …","Create a huggingface dataset loader for a subset of the …","Compose multiple datasets together to create a bigger one.","Basic mapper trait to be used with the mapper dataset.","Dataset mapping each element in an inner dataset to …","Only use a fraction of an existing dataset lazily.","Sample items from a dataset.","Shuffled a dataset, consider using sampler dataset is you …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Maps an item of type I to an item of type O.","Creates a new shuffled dataset.","Creates a new sampler dataset with replacement.","Constructs a new <code>ComposedDataset</code>.","Constructs a new <code>MapperDataset</code>.","Constructs a new <code>PartialDataset</code>.","Splits a dataset into multiple partial datasets.","","","","","","","","","","","","","","","","","","","","","Creates a new sampler dataset with replacement.","Creates a new shuffled dataset with a fixed seed.","Creates a new sampler dataset without replacement."],"i":[8,0,0,27,42,8,0,0,0,8,27,8,8,42,0,8,8,0,42,0,0,0,42,42,3,20,32,8,5,3,12,20,32,8,5,3,12,3,3,5,3,20,32,8,5,3,12,20,32,8,5,3,12,20,32,8,5,3,12,3,8,8,5,3,12,20,32,8,8,8,8,8,8,8,5,3,12,20,20,5,3,20,3,26,20,5,20,32,8,5,3,12,20,32,8,5,3,12,32,32,26,26,26,26,26,20,5,20,32,12,32,3,12,0,8,5,3,8,0,32,20,32,8,5,3,12,20,32,8,5,3,12,20,32,8,5,3,12,20,32,8,5,3,12,3,12,3,0,42,0,0,0,0,42,42,42,42,41,44,42,40,41,44,42,40,40,40,41,41,41,44,42,40,41,44,42,40,40,41,44,42,40,42,42,40,41,44,42,42,40,44,40,41,44,42,40,41,44,42,40,40,44,41,40,42,44,40,42,44,41,44,42,40,41,44,42,40,41,44,42,40,41,44,42,40,41,41,41,41,0,0,0,0,0,0,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,50,46,47,48,49,51,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,46,47,48,49,51,47,46,47],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]]],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,3],[[-1,-2],4,[],[]],[[[5,[-1]]],1,[]],[3,1],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,4],[6,4],[6,4],[6,4],[6,4],[6,4],[3,7],[[8,9],10],[[8,9],10],[[[5,[-1]],9],10,11],[[3,9],10],[[[12,[-1]],9],10,11],[-1,-1,[]],[-1,-1,[]],[13,8],[14,8],[[[16,[15]]],8],[17,8],[18,8],[19,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[21,[[20,[-2]],19]]],[[23,[22]]],[24,25]],[-2,[[20,[-1]]],[24,25],[[26,[-1]]]],[[-1,13],[[27,[[5,[-2]]]]],[[23,[22]]],[]],[-1,3,[[23,[22]]]],[-1,[[21,[[20,[-2]],19]]],[[23,[22]]],[24,25]],[13,3],[[-1,6],[[2,[-2]]],[],[]],[[[20,[-1]],6],[[2,[-1]]],[24,28,29]],[[[5,[-1]],6],[[2,[-1]]],[24,28,29,25]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[30,[-2]]],[],31],[-1,-2,[],[]],[-1,7,[]],[-1,7,[]],[-1,[[32,[-2]]],33,[]],[-1,[[32,[-2]]],33,[]],[-1,6,[]],[[[20,[-1]]],6,[24,28,29]],[[[5,[-1]]],6,[24,28,29,25]],[[[34,[-1]]],[[20,[-1]]],[]],[-2,[[32,[-1]]],[],[[26,[-1]]]],[[-1,7],[[27,[[12,[-2]]]]],[[23,[22]]],[24,28,29,35,25]],[[[32,[-1]]],[[2,[-1]]],[]],[[3,13],[[27,[[5,[-1]]]]],[24,28,29,35,25]],[[[12,[-1]]],[[27,[4]]],[24,28,29,35,25]],0,[8,[[2,[36]]]],[[[5,[-1]]],13,[]],[-1,-2,[],[]],[-1,37,[]],0,[-1,[[38,[-2]]],[],31],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,-1],3,[[23,[22]]]],[[[12,[-1]],13,-1],[[27,[6]]],[24,28,29,35,25]],[[3,7],[[27,[[12,[-1]]]]],[24,28,29,35,25]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[[-1,-2],4,[],[]],[[41,13],[[21,[[5,[-1]],42]]],[25,24]],[41,[[21,[1,42]]]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[21,[40]]],43],[6,4],[6,4],[6,4],[6,4],[[42,9],10],[[42,9],10],[[40,9],10],[-1,-1,[]],[-1,-1,[]],[8,42],[-1,-1,[]],[-1,-1,[]],[[44,6],[[2,[40]]]],0,[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[44,6],[13,41],[[40,-1],21,45],[42,[[2,[36]]]],[[],44],[-1,-2,[],[]],[-1,37,[]],[[],44],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[41,13],41],[[41,13],41],[[41,13],41],[[41,13],41],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,4],[6,4],[6,4],[6,4],[6,4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[46,[-2,-1]],6],[[2,[-1]]],[24,28,29],[[26,[-1]]]],[[[47,[-2,-1]],6],[[2,[-1]]],[28,29],[[26,[-1]]]],[[[48,[-2]],6],[[2,[-1]]],24,[[26,[-1]]]],[[[49,[-2,-4,-1]],6],[[2,[-3]]],[28,29],[[26,[-1]]],[28,29],[[50,[-1,-3]],28,29]],[[[51,[-2,-1]],6],[[2,[-1]]],[24,28,29],[[26,[-1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[46,[-2,-1]]],6,[24,28,29],[[26,[-1]]]],[[[47,[-2,-1]]],6,[28,29],[[26,[-1]]]],[[[48,[-2]]],6,24,[[26,[-1]]]],[[[49,[-2,-4,-1]]],6,[28,29],[[26,[-1]]],[28,29],[[50,[-1,-3]],28,29]],[[[51,[-2,-1]]],6,[24,28,29],[[26,[-1]]]],[[-1,-2],-3,[],[],[]],[[-2,52],[[46,[-2,-1]]],[],[[26,[-1]]]],[[-2,6],[[47,[-2,-1]]],[28,29],[[26,[-1]]]],[[[34,[-1]]],[[48,[-1]]],[]],[[-1,-2],[[49,[-1,-2,-3]]],[],[],[]],[[-1,6,6],[[51,[-1,-2]]],[],[]],[[-2,6],[[34,[[51,[[53,[-2]],-1]]]]],[],[[26,[-1]]]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,[[21,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-2,6],[[47,[-2,-1]]],[28,29],[[26,[-1]]]],[[-2,54],[[46,[-2,-1]]],[],[[26,[-1]]]],[[-2,6],[[47,[-2,-1]]],[28,29],[[26,[-1]]]]],"c":[],"p":[[3,"PathBuf",315],[4,"Option",316],[3,"SqliteDatasetStorage",0],[15,"tuple"],[3,"SqliteDataset",0],[15,"usize"],[15,"bool"],[4,"SqliteDatasetError",0],[3,"Formatter",317],[6,"Result",317],[8,"Debug",317],[3,"SqliteDatasetWriter",0],[15,"str"],[4,"Error",318],[3,"Writable",319],[3,"Error",320],[4,"Error",321],[3,"Error",322],[3,"Error",323],[3,"InMemDataset",0],[4,"Result",324],[3,"Path",315],[8,"AsRef",325],[8,"Clone",326],[8,"DeserializeOwned",327],[8,"Dataset",0],[6,"Result",0],[8,"Send",328],[8,"Sync",328],[3,"IntoFallible",329],[8,"Iterator",330],[3,"DatasetIterator",0],[8,"Sized",328],[3,"Vec",331],[8,"Serialize",332],[8,"Error",333],[3,"String",334],[3,"Convert",329],[3,"TypeId",335],[3,"MNISTItem",148],[3,"HuggingfaceDatasetLoader",148],[4,"ImporterError",148],[8,"Deserializer",327],[3,"MNISTDataset",148],[8,"Serializer",332],[3,"ShuffledDataset",229],[3,"SamplerDataset",229],[3,"ComposedDataset",229],[3,"MapperDataset",229],[8,"Mapper",229],[3,"PartialDataset",229],[3,"StdRng",336],[3,"Arc",337],[15,"u64"]]},\
"burn_derive":{"doc":"The derive crate of Burn.","t":"YYY","n":["Config","Module","Record"],"q":[[0,"burn_derive"]],"d":["Derive macro for the config.","Derive macro for the module.","Derive macro for the record."],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"burn_fusion":{"doc":"Burn Fusion","t":"NDDIQIQIDEDGQDNNNNDDELLLLLLLLLLLLLOOOOLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLKLKKLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLKMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLMLKLLLLKLOOOOOLMLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMOOLLLLLLLLLLQIQDLLKLKLKLLLKLKLLLKLKLKLKLKLKLKLKLLLLLLNNNDDNNDDNNNNNNDDNNDDNENNDNENDNNNDNDNDNDNDNNNNNDDNNNNNENNDDINNNNDNENNNNNNNNNNNDNDNNNNNDNNDDNDNNDDNNNNNNENNNENNNIDNNNDNDNDDNDNNDDNNNDDNNNNNNDNENDNMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMMMMMMMMMMMMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMLMMMMMKLMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMM","n":["Closed","DeviceId","Fusion","FusionBackend","FusionClient","FusionDevice","FusionDevice","FusionOps","FusionProperties","FusionStatus","FusionTensor","Handle","Handle","HandleContainer","NotInit","Open","ReadOnly","ReadWrite","TensorDescription","TensorId","TensorStatus","abs","adaptive_avg_pool1d","adaptive_avg_pool1d_backward","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","argmax","argmin","avg_pool1d","avg_pool1d_backward","avg_pool2d","avg_pool2d_backward","binary_float_cmp_ops","binary_float_ops","binary_int_cmp_ops","binary_int_ops","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_tensor","bool_tensor_handle","bool_to_device","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","client","client","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","conv1d","conv2d","conv_transpose1d","conv_transpose2d","cos","create_tensor_uninit","default","default","default","device","device","div","div_scalar","drop","empty","eq","eq","eq","eq","equal","equal_elem","equivalent","equivalent","equivalent","equivalent","erf","execute","exp","float_tensor","float_tensor_handle","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_data","from_full_precision","full","gather","get_bool_tensor","get_float_tensor","get_handle","get_int_tensor","graph","greater","greater_elem","greater_equal","greater_equal_elem","hash","hash","hash","hash","id","id","id","index_id","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max","int_max_dim","int_max_dim_with_indices","int_mean","int_mean_dim","int_min","int_min_dim","int_min_dim_with_indices","int_mul","int_mul_scalar","int_ones","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_tensor","int_tensor_handle","int_to_device","int_zeros","into","into","into","into","into","into","into","into","into","into_data","into_int","is_empty","is_empty","len","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max","max_dim","max_dim_with_indices","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","min","min_dim","min_dim_with_indices","mul","mul_scalar","name","new","new","ones","operations","partial_cmp","powf","random","ready","recip","register","register_bool_tensor","register_float_tensor","register_handle","register_int_tensor","reset","reshape","scalar_float2int_ops","scalar_float_cmp_ops","scalar_float_ops","scalar_int_cmp_ops","scalar_int_ops","scatter","score","seed","select","select_assign","shape","shape","shape","sin","slice","slice_assign","sqrt","status","sub","sub_scalar","sum","sum_dim","swap_dims","sync","tanh","to_device","to_full_precision","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary_float_ops","unary_int_ops","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zeros","FusionBackend","FusionClient","GraphExecution","MutexFusionClient","borrow","borrow_mut","change_client_bool","change_client_bool","change_client_float","change_client_float","change_client_int","change_client_int","clone","clone_into","device","device","drain_graph","drain_graph","from","into","new","new","read_tensor_bool","read_tensor_bool","read_tensor_float","read_tensor_float","read_tensor_int","read_tensor_int","register","register","register_orphan","register_orphan","register_tensor","register_tensor","tensor_uninitialized","tensor_uninitialized","to_owned","try_from","try_into","type_id","vzip","Abs","AdaptiveAvgPool1d","AdaptiveAvgPool1dBackward","AdaptiveAvgPool1dBackwardDescription","AdaptiveAvgPool1dDescription","AdaptiveAvgPool2d","AdaptiveAvgPool2dBackward","AdaptiveAvgPool2dBackwardDescription","AdaptiveAvgPool2dDescription","Add","AddScalar","ArgMax","ArgMin","AvgPool1d","AvgPool1dBackward","AvgPool1dBackwardDescription","AvgPool1dDescription","AvgPool2d","AvgPool2dBackward","AvgPool2dBackwardDescription","AvgPool2dDescription","BaseOpsBool","BaseOpsDescription","BaseOpsFloat","BaseOpsInt","BinaryOpsDescription","BoolOps","BoolOpsDescription","Cat","CatOpsDescription","Clamp","ClampMax","ClampMin","ClampOpsDescription","Conv1d","Conv1dDescription","Conv2d","Conv2dDescription","ConvTranspose1d","ConvTranspose1dDescription","ConvTranspose2d","ConvTranspose2dDescription","Cos","Div","DivScalar","Embedding","EmbeddingBackward","EmbeddingBackwardDescription","EmbeddingDescription","Equal","EqualElem","Erf","Exp","FloatOps","FloatOpsDescription","Full","Gather","GatherOpsDescription","Graph","GraphExecution","Greater","GreaterElem","GreaterEqual","GreaterEqualElem","GreedyGraphExecution","IntOps","IntOpsDescription","IntoFloat","IntoFloat","IntoInt","IntoInt","Log","Log1p","Lower","LowerElem","LowerEqual","LowerEqualElem","MaskFill","MaskFillOpsDescription","MaskWhere","MaskWhereOpsDescription","Matmul","Max","MaxDim","MaxDimWithIndices","MaxPool1d","MaxPool1dDescription","MaxPool1dWithIndices","MaxPool1dWithIndicesBackward","MaxPool1dWithIndicesBackwardDescription","MaxPool1dWithIndicesDescription","MaxPool2d","MaxPool2dDescription","MaxPool2dWithIndices","MaxPool2dWithIndicesBackward","MaxPool2dWithIndicesBackwardDescription","MaxPool2dWithIndicesDescription","Mean","MeanDim","Min","MinDim","MinDimWithIndices","ModuleOps","ModuleOpsDescription","Mul","MulScalar","Not","NumericOpsDescription","NumericOpsFloat","NumericOpsInt","Ones","Ops","Optimization","Powf","Random","Recip","ReduceDimWithIndicesDescription","Repeat","RepeatOpsDescription","Reshape","ReshapeDescription","ScalarOpsDescription","Scatter","ScatterOpsDescription","Select","SelectAssign","SelectAssignOpsDescription","SelectOpsDescription","Sin","Slice","SliceAssign","SliceAssignOpsDescription","SliceOpsDescription","Sqrt","Sub","SubScalar","Sum","SumDim","SwapDims","SwapDimsDescription","Tanh","TensorOpsDescription","ToDevice","UnaryOpsDescription","Zeros","bias","bias","bias","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_include_pad","count_include_pad","count_include_pad","count_include_pad","default","dilation","dilation","dilation","dilation","dilation","dilation","dim","dim","dim","dim","dim","dim","dim","dim1","dim2","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","grad","grad","grad","grad","grad","grad","indices","indices","indices","indices","indices","indices","indices","indices","input","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","kernel_size","len","lhs","lhs","mask","mask","max","maybe_execute","maybe_execute","min","new","ops","options","options","options","options","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out","out_grad","out_indices","out_indices","out_indices","output_size","output_size","padding","padding","padding","padding","padding","padding","padding","padding","padding","padding","ranges","ranges","rhs","rhs","shape","shape","status","stride","stride","stride","stride","stride","stride","stride","stride","stride","stride","tensor","tensor","tensor","tensor","tensor","tensor","tensor","tensor","tensor","tensor","tensor","tensors","times","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weight","weight","weight","weight","weights","weights","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x","x"],"q":[[0,"burn_fusion"],[347,"burn_fusion::client"],[388,"burn_fusion::graph"],[1265,"burn_tensor::tensor::ops::alias"],[1266,"burn_tensor::tensor::ops::alias"],[1267,"burn_tensor::tensor::ops::alias"],[1268,"burn_tensor::tensor::data"],[1269,"burn_common::reader"],[1270,"core::ops::range"],[1271,"core::clone"],[1272,"core::cmp"],[1273,"core::option"],[1274,"burn_tensor::tensor::ops::modules::base"],[1275,"burn_tensor::tensor::ops::modules::base"],[1276,"core::default"],[1277,"core::fmt"],[1278,"core::fmt"],[1279,"burn_tensor::tensor::ops::alias"],[1280,"alloc::boxed"],[1281,"burn_tensor::tensor::data"],[1282,"core::any"],[1283,"burn_tensor::tensor::element"]],"d":["No more operations can be fused.","The device id.","Enable dynamic operation fusion on a backend that …","Trait that allows an existing backend to specify graph …","What kind of client should be used.","The handle device trait allows to get an id for a backend …","The device type that can return an ID.","The fusion operation abstraction allows implementations to …","The properties of a fusion ops.","The status of a fusion ops.","Tensor primitive for the fusion backend for all kind.","Type alias for fusion backend handle.","The type that can be used to point to a tensor of any kind.","Keep all tensor handles in one place and ensure that all …","No handle exists for that tensor.","More operations can be fused.","The tensor can be read, but not written.","The tensor can be mutated inplace.","A tensor definition represents a snapshot of a tensor when …","The tensor unique identifier.","The status of the current tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a handle to a bool tensor.","Convert a bool tensor to a handle.","","","","","","","","","","","","","","","","","","","","","","","","Client module exposing types to communicate with the …","The fusion client.","","","","","","","","","","","","","","","","","","","","","Lazily create a new empty tensor and return its …","","","","","The device on which all tensors are held.","","","","","","","","","","","","","","","","Execute the operation.","","Convert a handle to a float tensor.","Convert a float tensor to a handle.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Get the bool tensor corresponding to the given tensor …","Get the float tensor corresponding to the given tensor …","Get the handle for the given tensor id.","Get the int tensor corresponding to the given tensor …","Graph module exposing all tensor operations that can be …","","","","","","","","","Return the device id.","Tensor id.","The tensor id.","The index id identifies the device number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert a handle to an int tensor.","Convert an int tensor to a handle.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","If the current operation is empty.","If the current operation is empty.","The size of operations fused.","","","","","","","","","","","","","","","","","","","","","","","","","","","Constructs a new <code>DeviceId</code>.","Create a new tensor id.","","The list of operations that will be used to optimize the …","","","","If the operation is ready to be executed.","","Register a new tensor operation.","Register a new bool tensor with the corresponding tensor id…","Register a new float tensor with the corresponding tensor …","Register a handle for the given tensor id.","Register a new int tensor with the corresponding tensor id.","Reset the state.","","","","","","","","The score of the optimization, higher is better.","","","","","The shape of the tensor.","The shape of the tensor.","","","","","The status of the tensor when it was used.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type id identifies the type of the device.","","","","","","","","","","","","","The fusion backend associated type.","Define how to interact with the fusion server.","The graph execution associated type.","Use a mutex to communicate with the fusion server.","","","Change the client of the given bool tensor.","","Change the client of the given float tensor.","","Change the client of the given int tensor.","","","","Get the current device used by all operations handled by …","","Register all lazy computation.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new client for the given fusion device.","","Read the values contained by a bool tensor.","","Read the values contained by a float tensor.","","Read the values contained by an int tensor.","","Register a new tensor operation description.","","Drop the tensor with the given tensor id.","","Create a tensor with the given handle and shape.","","Create a new fusion tensor, but with no resources …","","","","","","","Operation corresponding to:","Operation corresponding to adaptive avg pool 1d.","Operation corresponding to adaptive avg pool 1d backward.","","","Operation corresponding to adaptive avg pool 2d.","Operation corresponding to adaptive avg pool 2d backward.","","","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to avg pool 1d.","Operation corresponding to avg pool 1d backward.","","","Operation corresponding to avg pool 2d.","Operation corresponding to avg pool 2d backward.","","","Basic operation on a bool tensor.","Basic operations that can be done on any tensor type.","Basic operation on a float tensor.","Basic operation on an int tensor.","","Operation specific to a bool tensor.","Operation description specific to a bool tensor.","Operation corresponding to:","","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","","Operation corresponding to conv1d.","","Operation corresponding to conv2d.","","Operation corresponding to conv transpose 1d.","","Operation corresponding to conv transpose 2d.","","Operation corresponding to cos.","Operation corresponding to:","Operation corresponding to:","Operation corresponding to embedding.","Operation corresponding to embedding_backward.","","","Operation corresponding to:","Operation corresponding to:","Operation corresponding to erf.","Operation corresponding to exp.","Operation specific to a float tensor.","Operation description specific to a float tensor.","Operation corresponding to:","Operation corresponding to:","","The computational graph containing a list of tensor …","The graph execution trait abstracts the way the graph is …","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Execute an optimization following a greedy algorithm.","Operation specific to an int tensor.","Operation description specific to an int tensor.","Operation corresponding to into float.","Operation corresponding to into float.","Operation corresponding to into_int.","Operation corresponding to into int.","Operation corresponding to log.","Operation corresponding to log1p.","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","","Operation corresponding to:","","Operation corresponding to matmul.","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to max pool 1d.","","Operation corresponding to max pool 1d with indices.","Operation corresponding to max pool 1d with indices …","","","Operation corresponding to max pool 2d.","","Operation corresponding to max pool 2d with indices.","Operation corresponding to max pool 2d with indices …","","","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Module operation.","Operation description specific to module.","Operation corresponding to:","Operation corresponding to:","Operation corresponding to not.","Numeric operations on int and float tensors.","Numeric operation on a float tensor.","Numeric operation on an int tensor.","Operation corresponding to:","General trait to abstract how a single operation is …","An optimization that can be executed.","Operation corresponding to powf.","Operation corresponding to random.","Operation corresponding to recip.","","Operation corresponding to:","","Operation corresponding to:","","","Operation corresponding to:","","Operation corresponding to:","Operation corresponding to:","","","Operation corresponding to sin.","Operation corresponding to:","Operation corresponding to:","","","Operation corresponding to sqrt.","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Operation corresponding to:","Swap dim operation description.","Operation corresponding to tanh.","Describe all tensor operations possible.","Operation corresponding to:","","Operation corresponding tohe first dim to swap.","The second dim to swap.","Execute the operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Input tensor description.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the graph is empty.","","","","","","","","","","","The size of the graph.","","","","","","Execute the given graph using the list of potential …","","","Constructs a new <code>Optimization</code>.","The fusion operation to potentially be executed.","","","","","output tensor description.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current status of the optimizationi":[51,0,0,0,3,0,3,0,0,0,0,0,3,0,22,51,22,22,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,51,1,17,18,29,19,21,22,23,51,1,17,18,29,19,21,22,23,1,1,1,1,0,19,1,17,18,19,21,22,23,1,17,18,19,21,22,23,21,1,1,1,1,1,29,1,17,29,1,29,1,1,19,1,18,21,22,23,1,1,18,21,22,23,1,46,1,3,3,1,17,18,19,21,22,23,51,1,17,18,29,19,21,22,23,1,1,1,1,29,29,29,29,0,1,1,1,1,18,21,22,23,106,19,23,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,51,1,17,18,29,19,21,22,23,1,1,46,46,46,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,18,21,1,3,21,1,1,17,1,46,29,29,29,29,46,1,0,0,0,0,0,1,17,1,1,1,1,19,23,1,1,1,1,23,1,1,1,1,1,1,1,1,1,1,17,18,19,21,22,23,51,1,17,18,29,19,21,22,23,51,1,17,18,29,19,21,22,23,51,1,17,18,29,19,21,22,23,18,0,0,51,1,17,18,29,19,21,22,23,1,20,0,20,0,54,54,20,54,20,54,20,54,54,54,20,54,20,54,54,54,20,54,20,54,20,54,20,54,20,54,20,54,20,54,20,54,54,54,54,54,54,61,59,59,0,0,59,59,0,0,61,61,61,61,59,59,0,0,59,59,0,0,50,0,50,50,0,50,0,60,0,61,61,61,0,59,0,59,0,59,0,59,0,58,61,61,59,59,0,0,60,61,58,58,50,0,61,61,0,0,0,61,61,61,61,0,50,0,63,64,58,64,58,58,61,61,61,61,61,0,61,0,58,61,61,61,59,0,59,59,0,0,59,0,59,59,0,0,61,61,61,61,61,50,0,61,61,64,0,50,50,61,0,0,58,58,58,0,60,0,60,0,0,61,0,61,61,0,0,58,60,60,0,0,58,61,61,61,61,60,0,58,0,60,0,61,84,85,86,87,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,88,89,90,91,102,96,97,98,99,100,101,70,71,72,73,79,80,81,65,65,56,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,90,91,94,95,98,101,70,71,72,73,82,83,98,101,65,66,68,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,88,89,90,91,96,97,98,99,100,101,103,67,69,76,77,78,55,102,78,104,104,84,85,86,87,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,83,81,97,100,92,93,88,89,90,91,96,97,98,99,100,101,74,75,67,69,66,79,104,88,89,90,91,96,97,98,99,100,101,70,71,72,73,74,75,76,77,78,79,81,80,79,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,71,73,75,76,77,103,104,102,50,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,84,85,86,87,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[5,[4]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4,4,4,8],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]],4,4,4,8],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[5,[4]],[5,[4]],[5,[4]],8],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]],[5,[4]],[5,[4]],[5,[4]],8],[[2,[[1,[-1]]]]],3],0,0,0,0,[[[10,[[9,[[1,[-1]]]]]],4],[[9,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]]],[[11,[[1,[-1]]]]],3],[[12,[11,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]],[9,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[13,[8]],[11,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]]],[[14,[[13,[8]]]]],3],[[[9,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]],12],[[9,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]]],12,3],[[[9,[[1,[-1]]]],[5,[[15,[4]]]]],[[9,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]],[5,[[15,[4]]]],[9,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[9,[[1,[-1]]]],4,4],[[9,[[1,[-1]]]]],3],[12],[[]],[[[9,[[1,[-1]]]],[11,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[[2,[[1,[-1]]]]]],4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,0,[[[1,[-1]]],[[1,[-1]]],16],[17,17],[18,18],[[[19,[-1]]],[[19,[-1]]],[16,20]],[21,21],[22,22],[23,23],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[21,21],25],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]],[26,[[2,[[1,[-1]]]]]],27],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]],[26,[[2,[[1,[-1]]]]]],27],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]],[26,[[2,[[1,[-1]]]]]],28],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]],[26,[[2,[[1,[-1]]]]]],28],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[29,[-1]]],[[30,[21]]],3],[[],[[1,[-1]]],31],[[],17],[[],[[29,[-1]]],[31,3]],[[[2,[[1,[-1]]]]],[[11,[[1,[-1]]]]],3],0,[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[19,[-1]]],24,20],[[12,[11,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[18,18],8],[[21,21],8],[[22,22],8],[[23,23],8],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[-1,[29,[-2]]],24,[],[]],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[12],[[]],[[[1,[-1]],32],33,34],[[17,32],33],[[18,32],33],[[[19,[-1]],32],33,20],[[21,32],33],[[22,32],33],[[23,32],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[13,[[6,[[1,[-1]]]]]],[11,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[35,[[1,[-1]]]]]]],[[2,[[1,[-1]]]]],3],[[12,[6,[[1,[-1]]]],[11,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[4,[2,[[1,[-1]]]],[7,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[29,[-1]],23],[],3],[[[29,[-1]],23],[],3],[[[29,[-1]],23],[],3],[[[29,[-1]],23],[],3],0,[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[18,-1],24,36],[[21,-1],24,36],[[22,-1],24,36],[[23,-1],24,36],[-1,18,[]],0,0,0,[[[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[10,[[7,[[1,[-1]]]]]],4],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]]],[[11,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[12,[11,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[13,[[37,[[1,[-1]]]]]],[11,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[4,[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]]],[[14,[[13,[[37,[[1,[-1]]]]]]]]],3],[[[7,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[9,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[9,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[24,[[7,[[1,[-1]]]],[7,[[1,[-1]]]]]]],3],[[[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[24,[[7,[[1,[-1]]]],[7,[[1,[-1]]]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[12,[11,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],12],[[7,[[1,[-1]]]]],3],[[4,[7,[[1,[-1]]]],[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4,[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4,[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]]],12,3],[[[7,[[1,[-1]]]],[5,[[15,[4]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[5,[[15,[4]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],[37,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4],[[7,[[1,[-1]]]]],3],[[[7,[[1,[-1]]]],4,4],[[7,[[1,[-1]]]]],3],[12],[[]],[[[7,[[1,[-1]]]],[11,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[[12,[11,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[[1,[-1]]]]],[[14,[[13,[[6,[[1,[-1]]]]]]]]],3],[[[2,[[1,[-1]]]]],[[7,[[1,[-1]]]]],3],[-1,8,[]],[-1,8,[]],[-1,4,[]],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[9,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[9,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[9,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[24,[[2,[[1,[-1]]]],[7,[[1,[-1]]]]]]],3],[[[2,[[1,[-1]]]],4,4,4,4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4,4,4,4],[[38,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4,4,4,4,[2,[[1,[-1]]]],[7,[[1,[-1]]]]],[[39,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[40,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[5,[4]],[5,[4]],[5,[4]],[5,[4]],[2,[[1,[-1]]]],[7,[[1,[-1]]]]],[[41,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[24,[[2,[[1,[-1]]]],[7,[[1,[-1]]]]]]],3],[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[],42],[[43,44],18],[45,21],[[12,[11,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[11,[-1]]],[[10,[[47,[46]]]]],[]],[[21,21],[[26,[25]]]],[[[2,[[1,[-1]]]],48],[[2,[[1,[-1]]]]],3],[[12,49,[11,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[-1,50],51,[]],[[[29,[-1]],21],24,3],[[[29,[-1]],21],24,3],[[[29,[-1]],21],24,3],[[[29,[-1]],21],24,3],[-1,24,[]],[[[2,[[1,[-1]]]],12],[[2,[[1,[-1]]]]],3],0,0,0,0,0,[[4,[2,[[1,[-1]]]],[7,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,[45,24],[[[2,[[1,[-1]]]],4,[7,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4,[7,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],12,3],0,0,[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[5,[[15,[4]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[5,[[15,[4]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,[[[2,[[1,[-1]]]],[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[6,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],4,4],[[2,[[1,[-1]]]]],3],[[],24],[[[2,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]],[11,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],[[[2,[[1,[-1]]]]],[[2,[[35,[[1,[-1]]]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[12,[11,[[1,[-1]]]]],[[2,[[1,[-1]]]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[-1,23,-1],[[19,[-1]]],[]],[[[54,[-1,-2]],23,[54,[-1,-2]]],[[19,[[54,[-1,-2]]]]],3,[[55,[-1]]]],[[-1,23,-1],[[19,[-1]]],[]],[[[54,[-1,-2]],23,[54,[-1,-2]]],[[19,[[54,[-1,-2]]]]],3,[[55,[-1]]]],[[-1,23,-1],[[19,[-1]]],[]],[[[54,[-1,-2]],23,[54,[-1,-2]]],[[19,[[54,[-1,-2]]]]],3,[[55,[-1]]]],[[[54,[-1,-2]]],[[54,[-1,-2]]],3,[[55,[-1]]]],[[-1,-2],24,[],[]],[-1,[],[]],[[[54,[-1,-2]]],[],3,[[55,[-1]]]],[-1,24,[]],[[[54,[-1,-2]]],24,3,[[55,[-1]]]],[-1,-1,[]],[-1,-2,[],[]],[[],-1,[]],[[],[[54,[-1,-2]]],3,[[55,[-1]]]],[[-1,23],[[14,[[13,[8]]]]],[]],[[[54,[-1,-2]],23],[[14,[[13,[8]]]]],3,[[55,[-1]]]],[[-1,23],[[14,[[13,[6]]]]],[]],[[[54,[-1,-2]],23],[[14,[[13,[6]]]]],3,[[55,[-1]]]],[[-1,23],[[14,[[13,[37]]]]],[]],[[[54,[-1,-2]],23],[[14,[[13,[37]]]]],3,[[55,[-1]]]],[[-1,50,-2],24,[],56],[[[54,[-1,-2]],50,-3],24,3,[[55,[-1]]],56],[[-1,21],24,[]],[[[54,[-1,-2]],21],24,3,[[55,[-1]]]],[[-1,57,[10,[4]]],[[19,[-1]]],[]],[[[54,[-1,-2]],57,[10,[4]]],[[19,[[54,[-1,-2]]]]],3,[[55,[-1]]]],[[-1,[10,[4]]],[[19,[-1]]],[]],[[[54,[-1,-2]],[10,[4]]],[[19,[[54,[-1,-2]]]]],3,[[55,[-1]]]],[-1,-2,[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,53,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[50,50],[58,58],[59,59],[60,60],[[[61,[-1]]],[[61,[-1]]],[16,62]],[63,63],[64,64],[65,65],[66,66],[67,67],[68,68],[[[69,[-1]]],[[69,[-1]]],16],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[[[77,[-1]]],[[77,[-1]]],16],[[[78,[-1]]],[[78,[-1]]],16],[79,79],[80,80],[81,81],[82,82],[83,83],[84,84],[85,85],[86,86],[87,87],[88,88],[89,89],[90,90],[91,91],[92,92],[93,93],[94,94],[95,95],[96,96],[97,97],[98,98],[99,99],[100,100],[101,101],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],[[-1,-2],24,[],[]],0,0,0,0,[[],102],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[47,[-1]],[29,[-2]]],24,[],[]],[[50,32],33],[[58,32],33],[[59,32],33],[[60,32],33],[[[61,[-1]],32],33,[34,62]],[[63,32],33],[[64,32],33],[[65,32],33],[[66,32],33],[[67,32],33],[[68,32],33],[[[69,[-1]],32],33,34],[[70,32],33],[[71,32],33],[[72,32],33],[[73,32],33],[[74,32],33],[[75,32],33],[[76,32],33],[[[77,[-1]],32],33,34],[[[78,[-1]],32],33,34],[[79,32],33],[[80,32],33],[[81,32],33],[[82,32],33],[[83,32],33],[[84,32],33],[[85,32],33],[[86,32],33],[[87,32],33],[[88,32],33],[[89,32],33],[[90,32],33],[[91,32],33],[[92,32],33],[[93,32],33],[[94,32],33],[[95,32],33],[[96,32],33],[[97,32],33],[[98,32],33],[[99,32],33],[[100,32],33],[[101,32],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[103,[-1]]],8,3],0,0,0,0,0,0,0,0,0,0,[[[103,[-1]]],4,3],0,0,0,0,0,[[-1,[103,[-2]],[29,[-2]],[105,[[104,[-2]]]],8],24,[],[]],[[102,[103,[-1]],[29,[-1]],[105,[[104,[-1]]]],8],24,3],0,[[[47,[46]],51],[[104,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,[[52,[-2]]],[],[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],[-1,53,[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"c":[],"p":[[3,"Fusion",0],[6,"FloatTensor",1265],[8,"FusionBackend",0],[15,"usize"],[15,"array"],[6,"FloatElem",1265],[6,"IntTensor",1265],[15,"bool"],[6,"BoolTensor",1265],[3,"Vec",1266],[6,"Device",1265],[3,"Shape",1267],[3,"Data",1268],[4,"Reader",1269],[3,"Range",1270],[8,"Clone",1271],[3,"FusionProperties",0],[3,"DeviceId",0],[3,"FusionTensor",0],[8,"FusionClient",347],[3,"TensorId",0],[4,"TensorStatus",0],[3,"TensorDescription",0],[15,"tuple"],[4,"Ordering",1272],[4,"Option",1273],[3,"ConvOptions",1274],[3,"ConvTransposeOptions",1274],[3,"HandleContainer",0],[3,"Arc",1275],[8,"Default",1276],[3,"Formatter",1277],[6,"Result",1277],[8,"Debug",1277],[6,"FullPrecisionBackend",1265],[8,"Hasher",1278],[6,"IntElem",1265],[3,"MaxPool1dWithIndices",1274],[3,"MaxPool1dBackward",1274],[3,"MaxPool2dWithIndices",1274],[3,"MaxPool2dBackward",1274],[3,"String",1279],[15,"u16"],[15,"u32"],[15,"u64"],[8,"FusionOps",0],[3,"Box",1280],[15,"f32"],[4,"Distribution",1268],[4,"TensorOpsDescription",388],[4,"FusionStatus",0],[4,"Result",1281],[3,"TypeId",1282],[3,"MutexFusionClient",347],[8,"GraphExecution",388],[8,"Ops",388],[6,"Handle",0],[4,"FloatOpsDescription",388],[4,"ModuleOpsDescription",388],[4,"BaseOpsDescription",388],[4,"NumericOpsDescription",388],[8,"Element",1283],[4,"IntOpsDescription",388],[4,"BoolOpsDescription",388],[3,"SwapDimsDescription",388],[3,"ReshapeDescription",388],[3,"BinaryOpsDescription",388],[3,"UnaryOpsDescription",388],[3,"ScalarOpsDescription",388],[3,"GatherOpsDescription",388],[3,"ScatterOpsDescription",388],[3,"SelectOpsDescription",388],[3,"SelectAssignOpsDescription",388],[3,"SliceOpsDescription",388],[3,"SliceAssignOpsDescription",388],[3,"MaskWhereOpsDescription",388],[3,"MaskFillOpsDescription",388],[3,"ClampOpsDescription",388],[3,"RepeatOpsDescription",388],[3,"CatOpsDescription",388],[3,"ReduceDimWithIndicesDescription",388],[3,"EmbeddingDescription",388],[3,"EmbeddingBackwardDescription",388],[3,"Conv1dDescription",388],[3,"Conv2dDescription",388],[3,"ConvTranspose1dDescription",388],[3,"ConvTranspose2dDescription",388],[3,"AvgPool1dDescription",388],[3,"AvgPool2dDescription",388],[3,"AvgPool1dBackwardDescription",388],[3,"AvgPool2dBackwardDescription",388],[3,"AdaptiveAvgPool1dDescription",388],[3,"AdaptiveAvgPool2dDescription",388],[3,"AdaptiveAvgPool1dBackwardDescription",388],[3,"AdaptiveAvgPool2dBackwardDescription",388],[3,"MaxPool1dDescription",388],[3,"MaxPool1dWithIndicesDescription",388],[3,"MaxPool1dWithIndicesBackwardDescription",388],[3,"MaxPool2dDescription",388],[3,"MaxPool2dWithIndicesDescription",388],[3,"MaxPool2dWithIndicesBackwardDescription",388],[3,"GreedyGraphExecution",388],[3,"Graph",388],[3,"Optimization",388],[15,"slice"],[8,"FusionDevice",0]]},\
"burn_import":{"doc":"<code>burn-import</code> is a crate designed to simplify the process of …","t":"AFAANDNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDCLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMLMFLLLLLLLLLLLLLL","n":["burn","format_tokens","onnx","graph","Bincode","BurnGraph","NamedMpk","NamedMpkGz","PrettyJson","RecordType","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","codegen","default","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","fmt","fmt","from","from","init","init","into","into","register","register_input_output","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","with_blank_space","with_new_fn","with_record","with_top_comment","ModelGen","ONNXGraph","RecordType","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","development","downcast","downcast","drop","drop","embed_states","fmt","fmt","from","from","half_precision","init","init","input","inputs","into","into","into_burn","new","nodes","old_input_names","old_node_names","out_dir","outputs","parse_onnx","record_type","run_from_cli","run_from_script","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip"],"q":[[0,"burn_import"],[3,"burn_import::burn"],[4,"burn_import::burn::graph"],[54,"burn_import::onnx"],[109,"proc_macro2"],[110,"alloc::string"],[111,"burn_core::record::settings"],[112,"core::default"],[113,"core::fmt"],[114,"core::fmt"],[115,"core::result"],[116,"core::any"],[117,"core::option"],[118,"std::path"],[119,"std::path"]],"d":["The module for generating the burn code.","Formats a token stream into a string.","The onnx module.","The graph module.","Bincode format (useful for embedding and for no-std …","Burn graph intermediate representation of modules and …","Uncompressed Named MessagePack.","Compressed Named MessagePack.","Pretty JSON format (useful for debugging).","Type of the record to be saved.","","","","","","","","","Generate tokens reprensenting the graph with Burn modules …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Register a new operation node into the graph.","Register the input and output types of the graph using the …","","","","","","","","","","","","Add blank spaces in some places","Generate a function <code>Model::new()</code> without any argument when …","Save the state of each node in a record file.","Add a comment at the top of the generated file.","Generate code and states from <code>.onnx</code> files and save them to …","ONNX graph representation","","","","","","","","","","","","","","","Set development mode.","","","","","Specify whether to embed states in the generated code.","","","Returns the argument unchanged.","Returns the argument unchanged.","Specify parameter precision to be saved.","","","Add input file.","The inputs of the graph.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts ONNX graph to Burn graph.","Create a new <code>ModelGen</code>.","The nodes of the graph.","The original input names.","The original node names.","Set output directory.","The outputs of the graph.","Open an onnx file and convert it to a Graph (intermediate …","Specify the type of the record to be saved.","Run code generation.","Run code generation.","","","","","","","","","","",""],"i":[0,0,0,0,4,0,4,4,4,0,4,5,4,5,4,5,4,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,5,5,4,4,5,4,5,4,5,4,5,4,5,5,5,5,5,0,0,0,18,19,18,19,18,19,18,18,19,18,19,18,19,19,18,19,18,19,19,18,19,18,19,19,18,19,19,18,18,19,18,19,18,18,18,19,18,0,19,19,19,18,18,19,18,19,18,19,18,19,18,19],"f":[0,[1,2],0,0,0,0,0,0,0,0,[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[[-1,-2],3,[],[]],[[[5,[-1]]],1,6],[[],4],[[],[[5,[-1]]],[7,6]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,3],[8,3],[[4,9],10],[[[5,[-1]],9],10,[11,6]],[-1,-1,[]],[-1,-1,[]],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]],-2],3,6,[[0,[-1]]]],[[[5,[-1]],[12,[2]],[12,[2]]],3,6],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]],16],[[5,[-1]]],6],[[[5,[-1]],16],[[5,[-1]]],6],[[[5,[-1]],17,4,16],[[5,[-1]]],6],[[[5,[-1]],[15,[2]]],[[5,[-1]]],6],0,0,0,[-1,3,[]],[-1,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[18,18],[[-1,-2],3,[],[]],[[],19],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[19,16],19],[-1,-2,[],[]],[-1,-2,[],[]],[8,3],[8,3],[[19,16],19],[[18,9],10],[[19,9],10],[-1,-1,[]],[-1,-1,[]],[[19,16],19],[[],8],[[],8],[[19,20],19],0,[-1,-2,[],[]],[-1,-2,[],[]],[18,[[5,[-1]]],6],[[],19],0,0,0,[[19,20],19],0,[21,18],[[19,4],19],[19,3],[19,3],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"TokenStream",109],[3,"String",110],[15,"tuple"],[4,"RecordType",4],[3,"BurnGraph",4],[8,"PrecisionSettings",111],[8,"Default",112],[15,"usize"],[3,"Formatter",113],[6,"Result",113],[8,"Debug",113],[3,"Vec",114],[4,"Result",115],[3,"TypeId",116],[4,"Option",117],[15,"bool"],[3,"PathBuf",118],[3,"ONNXGraph",54],[3,"ModelGen",54],[15,"str"],[3,"Path",118]]},\
"burn_ndarray":{"doc":"Burn ndarray backend.","t":"NIDEDLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLOOOLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLL","n":["Cpu","FloatNdArrayElement","NdArray","NdArrayDevice","NdArrayTensor","abs","ad_enabled","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","argmax","argmin","array","avg_pool2d","avg_pool2d_backward","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_device","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone","clone_into","clone_into","clone_into","conv2d","conv_transpose2d","cos","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","detach","device","div","div_scalar","drop","drop","drop","empty","eq","equal","equal_elem","equivalent","erf","exp","fmt","fmt","fmt","from","from","from","from_data","from_data","from_full_precision","gather","greater","greater_elem","greater_equal","greater_equal_elem","init","init","init","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_mean","int_mean_dim","int_mul","int_mul_scalar","int_neg","int_ones","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_device","int_zeros","into","into","into","into_data","into_int","iter_par","iter_range_par","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","mul","mul_scalar","name","neg","new","powf","random","recip","relu","reshape","reshape","reshape","run_par","scatter","seed","select","select_assign","shape","sin","slice","slice_assign","sqrt","sub","sub_scalar","sum","sum_dim","swap_dims","tanh","to_device","to_full_precision","to_owned","to_owned","to_owned","to_typed_dims","to_typed_dims","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"burn_ndarray"],[207,"alloc::vec"],[208,"burn_tensor::tensor::shape"],[209,"burn_tensor::tensor::data"],[210,"burn_common::reader"],[211,"core::ops::range"],[212,"core::clone"],[213,"core::option"],[214,"burn_tensor::tensor::ops::modules::base"],[215,"burn_tensor::tensor::ops::modules::base"],[216,"core::fmt"],[217,"core::fmt"],[218,"ndarray::aliases"],[219,"ndarray"],[220,"burn_tensor::tensor::data"],[221,"core::any"]],"d":["The CPU device.","A float element for ndarray backend.","Tensor backend that uses the ndarray crate for executing …","The device type for the ndarray backend.","Tensor primitive used by the ndarray backend.","","","","","","","","","Dynamic array that contains the data of type E.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a new ndarray tensor from data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Macro for iterating in parallel.","Macro for iterating over a range in parallel.","","","","","","","","","","","","","","","","","","","Constructs a new <code>NdArrayTensor</code>.","","","","","","Reshapes an array into a tensor.","Reshapes an array into a tensor.","Macro for running a function in parallel.","","","","","","","","","","","","","","","","","","","","","Converts a slice of usize to a typed dimension.","Converts a slice of usize to a typed dimension.","","","","","","","","","","","",""],"i":[10,0,0,0,0,13,13,13,13,13,13,13,13,1,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,13,1,10,13,1,13,13,13,13,10,13,1,10,13,1,13,13,13,10,13,10,13,1,10,13,1,13,13,13,13,10,13,1,13,10,13,13,10,13,13,10,13,1,10,13,1,13,1,13,13,13,13,13,13,10,13,1,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,13,1,13,13,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,1,13,13,13,13,13,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,10,13,1,0,0,10,13,1,10,13,1,10,13,1,10,13,1],"f":[0,0,0,0,0,[[[1,[-1]]],[[1,[-1]]],2],[[],3],[[[1,[-1]],[5,[4]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]],4],[[1,[6]]],2],[[[1,[-1]],4],[[1,[6]]],2],0,[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],3],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],[5,[4]],[5,[4]],[5,[4]],3],[[1,[-1]]],2],[[7,4]],[[]],[8],[[]],[[[9,[3]],10],[[1,[3]]]],[[],[[11,[[9,[3]]]]]],[[]],[[],[[1,[6]]]],[[]],[[[1,[3]],8],[[1,[3]]]],[[],8],[[[1,[3]],[5,[[12,[4]]]]],[[1,[3]]]],[[[5,[[12,[4]]]]]],[[4,4]],[[[1,[3]],10],[[1,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[[1,[-1]]]],4],[[1,[-1]]],2],[[[1,[-1]],-1,-1],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[10,10],[[[13,[-1]]],[[13,[-1]]],14],[[[1,[-1]]],[[1,[-1]]],14],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[-1,-2],15,[],[]],[[[1,[-1]],[1,[-1]],[16,[[1,[-1]]]],17],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],[16,[[1,[-1]]]],18],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[],10],[[],[[13,[-1]]],19],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],10,2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[4,15],[4,15],[4,15],[8,[[1,[-1]]],2],[[10,10],3],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[-1,-2],3,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[10,20],21],[[[13,[-1]],20],21,22],[[[1,[-1]],20],21,22],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[9,[-1]],10],[[1,[-1]]],2],[[[9,[-1]]],[[1,[-1]]],[19,14]],[[[1,[23]]],[[1,[-1]]],2],[[4,[1,[-1]],[1,[6]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[],4],[[],4],[[],4],[[[1,[6]]],[[1,[6]]]],[[[1,[6]],[1,[6]]],[[1,[6]]]],[[[1,[6]],6],[[1,[6]]]],[[[1,[6]],4],[[1,[6]]]],[[[1,[6]],4],[[1,[6]]]],[[[7,[[1,[6]]]],4],[[1,[6]]]],[[[1,[6]],6,6],[[1,[6]]]],[[[1,[6]],6],[[1,[6]]]],[[[1,[6]],6],[[1,[6]]]],[[[1,[6]]]],[[[1,[6]],[1,[6]]],[[1,[6]]]],[[[1,[6]],6],[[1,[6]]]],[8,[[1,[6]]]],[[[1,[6]],[1,[6]]],[[1,[3]]]],[[[1,[6]],6],[[1,[3]]]],[[[9,[6]],10],[[1,[6]]]],[[8,6],[[1,[6]]]],[[4,[1,[6]],[1,[6]]],[[1,[6]]]],[[[1,[6]],[1,[6]]],[[1,[3]]]],[[[1,[6]],6],[[1,[3]]]],[[[1,[6]],[1,[6]]],[[1,[3]]]],[[[1,[6]],6],[[1,[3]]]],[[[1,[6]]],[[11,[[9,[6]]]]]],[[]],[[[1,[6]],[1,[6]]],[[1,[3]]]],[[[1,[6]],6],[[1,[3]]]],[[[1,[6]],[1,[6]]],[[1,[3]]]],[[[1,[6]],6],[[1,[3]]]],[[[1,[6]],[1,[3]],6],[[1,[6]]]],[[[1,[6]],[1,[3]],[1,[6]]],[[1,[6]]]],[[[1,[6]]],[[1,[6]]]],[[[1,[6]],4],[[1,[6]]]],[[[1,[6]],[1,[6]]],[[1,[6]]]],[[[1,[6]],6],[[1,[6]]]],[[[1,[6]]],[[1,[6]]]],[8,[[1,[6]]]],[[[1,[6]],8],[[1,[6]]]],[[4,[1,[6]],[1,[6]],[1,[6]]],[[1,[6]]]],[[[1,[6]],4,[1,[6]]],[[1,[6]]]],[[[1,[6]],4,[1,[6]],[1,[6]]],[[1,[6]]]],[[[1,[6]]],8],[[[1,[6]],[5,[[12,[4]]]]],[[1,[6]]]],[[[1,[6]],[5,[[12,[4]]]],[1,[6]]],[[1,[6]]]],[[[1,[6]],[1,[6]]],[[1,[6]]]],[[[1,[6]],6],[[1,[6]]]],[[[1,[6]]],[[1,[6]]]],[[[1,[6]],4],[[1,[6]]]],[[4,4]],[[[1,[6]],10],[[1,[6]]]],[8,[[1,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[11,[9]]],2],[[]],0,0,[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[[1,[-1]],[1,[3]],-1],[[1,[-1]]],2],[[[1,[-1]],[1,[3]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[1,[-1]]],2],[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[24,[[13,[-1]]]]],2],[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],[5,[4]],[1,[-1]],[1,[6]]],[[25,[[13,[-1]]]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],4],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[[],26],[[[1,[-1]]],[[1,[-1]]],2],[[[28,[-1,27]]],[[1,[-1]]],[]],[[[1,[-1]],23],[[1,[-1]]],2],[[8,29,10],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],8],[[1,[-1]]],2],0,0,0,[[4,[1,[-1]],[1,[6]],[1,[-1]]],[[1,[-1]]],2],[30,15],[[[1,[-1]],4,[1,[6]]],[[1,[-1]]],2],[[[1,[-1]],4,[1,[6]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],8,2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[5,[[12,[4]]]]],[[1,[-1]]],2],[[[1,[-1]],[5,[[12,[4]]]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],4],[[1,[-1]]],2],[[[1,[-1]],4,4],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],10],[[1,[-1]]],2],[[[1,[-1]]],[[1,[23]]],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,[[31,[-2]]],[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"NdArrayTensor",0],[8,"FloatNdArrayElement",0],[15,"bool"],[15,"usize"],[15,"array"],[15,"i64"],[3,"Vec",207],[3,"Shape",208],[3,"Data",209],[4,"NdArrayDevice",0],[4,"Reader",210],[3,"Range",211],[3,"NdArray",0],[8,"Clone",212],[15,"tuple"],[4,"Option",213],[3,"ConvOptions",214],[3,"ConvTransposeOptions",214],[8,"Default",215],[3,"Formatter",216],[6,"Result",216],[8,"Debug",216],[15,"f32"],[3,"MaxPool2dWithIndices",214],[3,"MaxPool2dBackward",214],[3,"String",217],[6,"IxDyn",218],[6,"ArcArray",219],[4,"Distribution",209],[15,"u64"],[4,"Result",220],[3,"TypeId",221]]},\
"burn_no_std_tests":{"doc":"","t":"AAADDDDMMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDMMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLMMMLLMMLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["conv","mlp","model","ConvBlock","ConvBlockConfig","ConvBlockRecord","ConvBlockRecordItem","activation","activation","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","conv","conv","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fork","forward","from","from","from","from","from_item","init","init","init","init","into","into","into","into","into_item","into_record","load_record","map","new","new","num_params","pool","pool","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","valid","visit","vzip","vzip","vzip","vzip","with_kernel_size","Mlp","MlpConfig","MlpRecord","MlpRecordItem","activation","activation","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","d_model","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","dropout","dropout","dropout","fmt","fmt","fmt","fmt","fmt","fork","forward","from","from","from","from","from_item","init","init","init","init","into","into","into","into","into_item","into_record","linears","linears","load_record","map","new","new","num_layers","num_params","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","valid","visit","vzip","vzip","vzip","vzip","with_d_model","with_dropout","with_num_layers","MnistConfig","Model","ModelRecord","ModelRecordItem","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","conv","conv","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fork","forward","from","from","from","from","from_item","init","init","init","init","input","input","input_size","into","into","into","into","into_item","into_record","load_record","map","mlp","mlp","mlp","new","new","num_classes","num_classes","num_params","output","output","output_size","seed","serialize","serialize","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","valid","visit","vzip","vzip","vzip","vzip","with_input_size","with_output_size","with_seed"],"q":[[0,"burn_no_std_tests"],[3,"burn_no_std_tests::conv"],[111,"burn_no_std_tests::mlp"],[224,"burn_no_std_tests::model"],[342,"burn_tensor::tensor::backend::base"],[343,"core::clone"],[344,"burn_core::record::settings"],[345,"core::result"],[346,"serde::de"],[347,"burn_core::module::base"],[348,"core::fmt"],[349,"core::fmt"],[350,"burn_core::module::base"],[351,"alloc::string"],[352,"core::any"],[353,"core::option"],[354,"burn_tensor::tensor::backend::base"]],"d":["","","","","","The record type for the module.","The record item type for the module.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Create a new instance of the config.","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the default value for the field.","Multilayer Perceptron module.","Configuration to create a Multilayer Perceptron layer.","The record type for the module.","The record item type for the module.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","The size of each layer.","","","","","","","","","","","","","","","","","","","","The dropout rate.","The module record associative type.","Field to be serialized.","","","","","","","Applies the forward pass on the input tensor.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The module record associative type.","Field to be serialized.","","","Create a new instance of the config.","Create the module from the given configuration.","The number of layers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The size of each layer.","The dropout rate.","The number of layers.","","","The record type for the module.","The record item type for the module.","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","The module record associative type.","Field to be serialized.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The module record associative type.","Field to be serialized.","Create a new instance of the config.","","The module record associative type.","Field to be serialized.","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the default value for the field.","Set the default value for the field.","Set the default value for the field."],"i":[0,0,0,0,0,0,0,4,6,2,4,6,8,2,4,6,8,2,4,6,8,2,4,6,8,2,4,6,8,4,6,2,4,6,8,2,4,6,8,6,8,2,2,4,6,8,2,4,6,8,2,2,4,6,8,2,2,2,4,6,8,4,2,4,6,8,2,4,6,8,4,2,2,2,2,8,2,4,6,6,8,2,2,4,6,8,2,8,2,4,6,8,2,4,6,8,2,4,6,8,2,4,6,8,2,2,2,4,6,8,8,0,0,0,0,27,28,25,26,27,28,25,26,27,28,25,26,27,28,25,26,27,28,25,26,27,28,25,25,26,27,28,25,26,27,28,25,28,26,25,26,27,28,25,26,27,28,25,27,28,25,26,26,27,28,26,26,25,26,27,28,27,25,26,27,28,25,26,27,28,27,26,27,28,26,26,25,26,25,26,25,28,26,25,26,27,28,25,26,25,26,27,28,25,26,27,28,25,26,27,28,25,26,27,28,26,26,25,26,27,28,25,25,25,0,0,0,0,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,32,33,30,31,32,33,30,31,32,33,30,33,31,30,31,32,33,30,31,32,33,30,31,31,32,33,31,31,30,31,32,33,32,30,31,32,33,32,33,30,30,31,32,33,32,31,31,31,30,32,33,30,31,32,33,31,32,33,30,30,30,33,31,30,31,32,33,30,31,30,31,32,33,30,31,32,33,30,31,32,33,30,31,32,33,31,31,30,31,32,33,30,30,30],"f":[0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],[5,3]],[[[6,[-1,-2]]],[[6,[-1,-2]]],[5,3],[5,7]],[8,8],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[-1,[[10,[[6,[-2,-3]]]]],11,3,7],[-1,[[10,[8]]],11],[[[2,[-1]],[12,[-1]]],[[12,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,1],[9,1],[9,1],[9,1],[[[2,[-1]],13],14,[15,3]],[[[2,[-1]],13],14,3],[[[4,[-1]],13],14,[15,3]],[[[6,[-1,-2]],13],14,[15,3],[15,7]],[[8,13],14],[[[2,[-1]]],[[2,[-1]]],3],[[[2,[-1]],[16,[-1]]],[[16,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[4,[-1]]],3],[[],9],[[],9],[[],9],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],[],3],[[[2,[-1]]],[],3],[[[2,[-1]]],[[2,[-1]]],3],[[[2,[-1]],-2],[[2,[-1]]],3,[[17,[-1]]]],[8,[[2,[-1]]],3],[[[18,[9]]],8],[[[2,[-1]]],9,3],0,0,[[[6,[-1,-2]],-3],10,3,7,19],[[8,-1],10,19],[[[2,[-1]]],[[2,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[[[2,[-1]]],[],[23,3]],[[[2,[-1]],-2],1,3,[[24,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[18,[9]]],8],0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[[26,[-1]]],[[26,[-1]]],3],[[[27,[-1]]],[[27,[-1]]],[5,3]],[[[28,[-1,-2]]],[[28,[-1,-2]]],[5,3],[5,7]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[-1,[[10,[25]]],11],[-1,[[10,[[28,[-2,-3]]]]],11,3,7],[[[26,[-1]],[12,[-1]]],[[12,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,1],[9,1],[9,1],[9,1],0,0,0,[[25,13],14],[[[26,[-1]],13],14,[15,3]],[[[26,[-1]],13],14,3],[[[27,[-1]],13],14,[15,3]],[[[28,[-1,-2]],13],14,[15,3],[15,7]],[[[26,[-1]]],[[26,[-1]]],3],[[[26,[-1]],[16,[-1]]],[[16,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[27,[-1]]],3],[[],9],[[],9],[[],9],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[27,[-1]]],[],3],[[[26,[-1]]],[],3],0,0,[[[26,[-1]]],[[26,[-1]]],3],[[[26,[-1]],-2],[[26,[-1]]],3,[[17,[-1]]]],[[],25],[25,[[26,[-1]]],3],0,[[[26,[-1]]],9,3],[[25,-1],10,19],[[[28,[-1,-2]],-3],10,3,7,19],[[[26,[-1]]],[[26,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[[[26,[-1]]],[],[23,3]],[[[26,[-1]],-2],1,3,[[24,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[25,9],25],[[25,29],25],[[25,9],25],0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[30,30],[[[31,[-1]]],[[31,[-1]]],3],[[[32,[-1]]],[[32,[-1]]],[5,3]],[[[33,[-1,-2]]],[[33,[-1,-2]]],[5,3],[5,7]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[-1,[[10,[30]]],11],[-1,[[10,[[33,[-2,-3]]]]],11,3,7],[[[31,[-1]],[12,[-1]]],[[12,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,1],[9,1],[9,1],[9,1],[[30,13],14],[[[31,[-1]],13],14,3],[[[31,[-1]],13],14,[15,3]],[[[32,[-1]],13],14,[15,3]],[[[33,[-1,-2]],13],14,[15,3],[15,7]],[[[31,[-1]]],[[31,[-1]]],3],[[[31,[-1]],[16,[-1]]],[[16,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[32,[-1]]],3],[[],9],[[],9],[[],9],[[],9],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[32,[-1]]],[],3],[[[31,[-1]]],[],3],[[[31,[-1]]],[[31,[-1]]],3],[[[31,[-1]],-2],[[31,[-1]]],3,[[17,[-1]]]],0,0,0,[25,30],[30,[[31,[-1]]],3],0,0,[[[31,[-1]]],9,3],0,0,0,0,[[30,-1],10,19],[[[33,[-1,-2]],-3],10,3,7,19],[[[31,[-1]]],[[31,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,21,[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[[[31,[-1]]],[],[23,3]],[[[31,[-1]],-2],1,3,[[24,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[30,9],30],[[30,9],30],[[30,34],30]],"c":[],"p":[[15,"tuple"],[3,"ConvBlock",3],[8,"Backend",342],[3,"ConvBlockRecord",3],[8,"Clone",343],[3,"ConvBlockRecordItem",3],[8,"PrecisionSettings",344],[3,"ConvBlockConfig",3],[15,"usize"],[4,"Result",345],[8,"Deserializer",346],[6,"Devices",347],[3,"Formatter",348],[6,"Result",348],[8,"Debug",348],[3,"Tensor",349],[8,"ModuleMapper",347],[15,"array"],[8,"Serializer",350],[3,"String",351],[3,"TypeId",352],[4,"Option",353],[8,"AutodiffBackend",342],[8,"ModuleVisitor",347],[3,"MlpConfig",111],[3,"Mlp",111],[3,"MlpRecord",111],[3,"MlpRecordItem",111],[15,"f64"],[3,"MnistConfig",224],[3,"Model",224],[3,"ModelRecord",224],[3,"ModelRecordItem",224],[15,"u64"]]},\
"burn_tch":{"doc":"Burn Tch Backend","t":"NNDENGIDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLL","n":["Cpu","Cuda","LibTorch","LibTorchDevice","Mps","StorageRef","TchElement","TchShape","TchTensor","Vulkan","abs","ad_enabled","adaptive_avg_pool1d","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add","add_scalar","arange","argmax","argmin","avg_pool1d","avg_pool2d","avg_pool2d_backward","binary_ops_tensor","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_repeat","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_device","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone","clone_into","clone_into","clone_into","conv1d","conv2d","conv_transpose1d","conv_transpose2d","cos","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","device","dims","div","div_scalar","drop","drop","drop","drop","embedding","embedding_backward","empty","empty","eq","eq","equal","equal_elem","equivalent","erf","exp","fmt","fmt","fmt","from","from","from","from","from","from","from_data","from_data","from_existing","from_full_precision","gather","gelu","gelu_backward","greater","greater_elem","greater_equal","greater_equal_elem","init","init","init","init","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max_dim","int_max_dim_with_indices","int_mean","int_mean_dim","int_min_dim","int_min_dim_with_indices","int_mul","int_mul_scalar","int_neg","int_ones","int_repeat","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_device","int_zeros","into","into","into","into","into_data","into_int","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max_dim","max_dim_with_indices","max_pool1d","max_pool1d_with_indices","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean_dim","min_dim","min_dim_with_indices","mul","mul_scalar","mut_ops","name","neg","new","ones","powf","random","recip","relu","repeat","reshape","scatter","seed","select","select_assign","shape","sin","slice","slice_assign","sqrt","storage","sub","sub_scalar","sum","sum_dim","swap_dims","sync","tanh","tensor","to_device","to_full_precision","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unary_ops","vzip","vzip","vzip","vzip","zeros"],"q":[[0,"burn_tch"],[252,"core::ops::range"],[253,"tch::wrappers::kind"],[254,"core::ops::function"],[255,"alloc::vec"],[256,"burn_tensor::tensor::shape"],[257,"burn_tensor::tensor::data"],[258,"burn_common::reader"],[259,"core::clone"],[260,"core::option"],[261,"burn_tensor::tensor::ops::modules::base"],[262,"burn_tensor::tensor::ops::modules::base"],[263,"core::marker"],[264,"core::fmt"],[265,"core::cmp"],[266,"core::fmt"],[267,"tch::wrappers::tensor"],[268,"burn_tensor::tensor::ops::modules::base"],[269,"burn_tensor::tensor::data"],[270,"core::any"]],"d":["CPU device.","Cuda device with the given index. The index is the index …","Tensor backend that uses <code>LibTorch</code> with the tch crate for …","The device struct when using the <code>tch</code> backend.","Metal Performance Shaders device.","A reference to a tensor storage.","The element type for the tch backend.","A shape that can be used by LibTorch.","A tensor that uses the tch backend.","Vulkan device.","","","","","","","","","","","","","","","Execute a binary ops reusing the tensor data if possible.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The shape’s dimensions.","","","","","","","","","","Creates an empty tensor from a shape and a device.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new tensor from a shape and a device.","Create a tensor that was created from an operation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Execute an operation on a tensor if the data can be reused.","","","Create a new tensor.","","","","","","","","","","","","","","","","","The tensor’s storage","","","","","","","","Handle to the tensor. Call methods on this field.","","","","","","","","","","","","","","","","","","Execute a unary ops reusing the tensor data if possible.","","","","",""],"i":[7,7,0,0,7,0,0,0,0,7,15,15,15,15,15,15,1,15,15,15,15,15,15,15,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,27,7,15,1,27,7,15,1,15,15,15,15,7,15,1,7,15,1,15,15,15,15,15,7,15,27,7,15,1,27,7,15,1,15,27,15,15,27,7,15,1,15,15,15,1,7,1,15,15,7,15,15,7,15,1,27,27,7,7,15,1,15,1,1,15,15,15,15,15,15,15,15,27,7,15,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,27,7,15,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,15,15,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,15,15,15,15,15,15,15,1,15,15,7,15,1,27,7,15,1,27,7,15,1,27,7,15,1,1,27,7,15,1,15],"f":[0,0,0,0,0,0,0,0,0,0,[[[1,[-1]]],[[1,[-1]]],2],[[],3],[[[1,[-1]],4],[[1,[-1]]],2],[[[1,[-1]],[5,[4]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[],2],[[[1,[-1]],-1],[[1,[-1]]],2],[[[6,[4]],7],[[1,[8]]]],[[[1,[-1]],4],[[1,[8]]],2],[[[1,[-1]],4],[[1,[8]]],2],[[[1,[-1]],4,4,4,3],[[1,[-1]]],2],[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],3],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],[5,[4]],[5,[4]],[5,[4]],3],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],-2,-3,-4],[[1,[-5]]],9,10,10,10,9],[[[11,[[1,[3]]]],4],[[1,[3]]]],[[[1,[3]]],7],[12,[[1,[3]]]],[[[1,[3]],[1,[3]]],[[1,[3]]]],[[[13,[3]],7],[[1,[3]]]],[[[1,[3]]],[[14,[[13,[3]]]]]],[[[1,[3]]],[[1,[-1]]],2],[[[1,[3]]],[[1,[8]]]],[[[1,[3]]],[[1,[3]]]],[[[1,[3]],4,4],[[1,[3]]]],[[[1,[3]],12],[[1,[3]]]],[[[1,[3]]],12],[[[1,[3]],[5,[[6,[4]]]]],[[1,[3]]]],[[[1,[3]],[5,[[6,[4]]]],[1,[3]]],[[1,[3]]]],[[4,4]],[[[1,[3]],7],[[1,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[11,[[1,[-1]]]],4],[[1,[-1]]],2],[[]],[[]],[[[1,[-1]],-1],[],2],[7,7],[[[15,[-1]]],[[15,[-1]]],16],[[[1,[-1]]],[[1,[-1]]],9],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[-1,-2],17,[],[]],[[[1,[-1]],[1,[-1]],[18,[[1,[-1]]]],19],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],[18,[[1,[-1]]]],19],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],[18,[[1,[-1]]]],20],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],[18,[[1,[-1]]]],20],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[],7],[[],[[15,[-1]]],21],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[[[1,[-1]]],7,2],0,[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[4,17],[4,17],[4,17],[4,17],[[[1,[-1]],[1,[8]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]],[1,[8]]],[[1,[-1]]],2],[12],[[12,7],[[1,[-1]]],[9,21,22,23]],[[7,7],3],[[[1,[-1]],[1,[-1]]],3,[24,9]],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[-1,-2],3,[],[]],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[7,25],26],[[[15,[-1]],25],26,23],[[[1,[-1]],25],26,[23,9]],[12,27],[-1,-1,[]],[-1,-1,[]],[28,7],[-1,-1,[]],[-1,-1,[]],[[[13,[-1]],7],[[1,[-1]]],2],[[[13,[-1]],28],[[1,[-1]]],[9,21]],[[29,30],[[1,[-1]]],9],[[[1,[31]]],[[1,[-1]]],2],[[4,[1,[-1]],[1,[8]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[],4],[[],4],[[],4],[[],4],[[[1,[8]]],[[1,[8]]]],[[[1,[8]],[1,[8]]],[[1,[8]]]],[[[1,[8]],8],[[1,[8]]]],[[[1,[8]],4],[[1,[8]]]],[[[1,[8]],4],[[1,[8]]]],[[[11,[[1,[8]]]],4],[[1,[8]]]],[[[1,[8]],8,8],[[1,[8]]]],[[[1,[8]],8],[[1,[8]]]],[[[1,[8]],8],[[1,[8]]]],[[[1,[8]]],7],[[[1,[8]],[1,[8]]],[[1,[8]]]],[[[1,[8]],8],[[1,[8]]]],[12,[[1,[8]]]],[[[1,[8]],[1,[8]]],[[1,[3]]]],[[[1,[8]],8],[[1,[3]]]],[[[13,[8]],7],[[1,[8]]]],[[12,8],[[1,[8]]]],[[4,[1,[8]],[1,[8]]],[[1,[8]]]],[[[1,[8]],[1,[8]]],[[1,[3]]]],[[[1,[8]],8],[[1,[3]]]],[[[1,[8]],[1,[8]]],[[1,[3]]]],[[[1,[8]],8],[[1,[3]]]],[[[1,[8]]],[[14,[[13,[8]]]]]],[[[1,[8]]],[[1,[-1]]],2],[[[1,[8]],[1,[8]]],[[1,[3]]]],[[[1,[8]],8],[[1,[3]]]],[[[1,[8]],[1,[8]]],[[1,[3]]]],[[[1,[8]],8],[[1,[3]]]],[[[1,[8]],[1,[3]],8],[[1,[8]]]],[[[1,[8]],[1,[3]],[1,[8]]],[[1,[8]]]],[[[1,[8]],4],[[1,[8]]]],[[[1,[8]],4],[[17,[[1,[8]],[1,[8]]]]]],[[[1,[8]]],[[1,[8]]]],[[[1,[8]],4],[[1,[8]]]],[[[1,[8]],4],[[1,[8]]]],[[[1,[8]],4],[[17,[[1,[8]],[1,[8]]]]]],[[[1,[8]],[1,[8]]],[[1,[8]]]],[[[1,[8]],8],[[1,[8]]]],[[[1,[8]]],[[1,[8]]]],[12,[[1,[8]]]],[[[1,[8]],4,4],[[1,[8]]]],[[[1,[8]],12],[[1,[8]]]],[[4,[1,[8]],[1,[8]],[1,[8]]],[[1,[8]]]],[[[1,[8]],4,[1,[8]]],[[1,[8]]]],[[[1,[8]],4,[1,[8]],[1,[8]]],[[1,[8]]]],[[[1,[8]]],12],[[[1,[8]],[5,[[6,[4]]]]],[[1,[8]]]],[[[1,[8]],[5,[[6,[4]]]],[1,[8]]],[[1,[8]]]],[[[1,[8]],[1,[8]]],[[1,[8]]]],[[[1,[8]],8],[[1,[8]]]],[[[1,[8]]],[[1,[8]]]],[[[1,[8]],4],[[1,[8]]]],[[4,4]],[[[1,[8]],7],[[1,[8]]]],[12,[[1,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[14,[13]]]],[[[1,[-1]]],[[1,[8]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[[1,[-1]],[1,[-1]]],[[1,[3]]],2],[[[1,[-1]],-1],[[1,[3]]],2],[[[1,[-1]],[1,[3]],-1],[[1,[-1]]],2],[[[1,[-1]],[1,[3]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],4],[[1,[-1]]],2],[[[1,[-1]],4],[[17,[[1,[-1]],[1,[8]]]]],2],[[[1,[-1]],4,4,4,4],[[1,[-1]]],2],[[[1,[-1]],4,4,4,4],[[32,[[15,[-1]]]]],2],[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[1,[-1]]],2],[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],[5,[4]]],[[33,[[15,[-1]]]]],2],[[[1,[-1]],[5,[4]],[5,[4]],[5,[4]],[5,[4]],[1,[-1]],[1,[8]]],[[34,[[15,[-1]]]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],4],[[1,[-1]]],2],[[[1,[-1]],4],[[1,[-1]]],2],[[[1,[-1]],4],[[17,[[1,[-1]],[1,[8]]]]],2],[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]],-2],[[18,[[1,[-3]]]]],9,10,9],[[],35],[[[1,[-1]]],[[1,[-1]]],2],[29,[[1,[-1]]],9],[[12,7],[[1,[-1]]],2],[[[1,[-1]],31],[[1,[-1]]],2],[[12,36,7],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],4,4],[[1,[-1]]],2],[[[1,[-1]],12],[[1,[-1]]],2],[[4,[1,[-1]],[1,[8]],[1,[-1]]],[[1,[-1]]],2],[37,17],[[[1,[-1]],4,[1,[8]]],[[1,[-1]]],2],[[[1,[-1]],4,[1,[8]],[1,[-1]]],[[1,[-1]]],2],[[],12],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],[5,[[6,[4]]]]],[[1,[-1]]],2],[[[1,[-1]],[5,[[6,[4]]]],[1,[-1]]],[],2],[[[1,[-1]]],[[1,[-1]]],2],0,[[[1,[-1]],[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],-1],[[1,[-1]]],2],[[[1,[-1]]],[[1,[-1]]],2],[[[1,[-1]],4],[[1,[-1]]],2],[[[1,[-1]],4,4],[[1,[-1]]],2],[[],17],[[[1,[-1]]],[[1,[-1]]],2],0,[[[1,[-1]],7],[[1,[-1]]],2],[[[1,[-1]]],[[1,[31]]],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,[[38,[-2]]],[],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[1,[-1]],-2,-3],[[1,[-4]]],9,10,10,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[12,7],[[1,[-1]]],2]],"c":[],"p":[[3,"TchTensor",0],[8,"TchElement",0],[15,"bool"],[15,"usize"],[15,"array"],[3,"Range",252],[4,"LibTorchDevice",0],[15,"i64"],[8,"Element",253],[8,"Fn",254],[3,"Vec",255],[3,"Shape",256],[3,"Data",257],[4,"Reader",258],[3,"LibTorch",0],[8,"Clone",259],[15,"tuple"],[4,"Option",260],[3,"ConvOptions",261],[3,"ConvTransposeOptions",261],[8,"Default",262],[8,"Copy",263],[8,"Debug",264],[8,"PartialEq",265],[3,"Formatter",264],[6,"Result",264],[3,"TchShape",0],[4,"Device",266],[3,"Tensor",267],[6,"StorageRef",0],[15,"f32"],[3,"MaxPool1dWithIndices",261],[3,"MaxPool2dWithIndices",261],[3,"MaxPool2dBackward",261],[3,"String",268],[4,"Distribution",257],[15,"u64"],[4,"Result",269],[3,"TypeId",270]]},\
"burn_tensor":{"doc":"This library provides multiple tensor implementations …","t":"IINNDNSSDDNGIDEDENLLSSSSQIIIILLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSLLSSDNNSSQDLLSSLLSSLLSSLLSSLLSSLLSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSOOIDNNISSNLLSSEQDSSEILLSSDNNDDQINNSSKLLLLLLLLLLLLLLLLLLLLLAKLLLLLLLLLLLLLLLLLKLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLOKLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLKLLLLLLMKLLLLLLLLLLLLLLLLLKLLLMKLLLLKLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLKLLLKLLLKLLLKLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAKLLLKLLLKLLLKLLLLLOOLKLLLKLLLLLKLLLLLLLLLLLKLLLKLLLLLLLLLLLLLKLLLKLLLKLLLLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLAKLLLLLLLLLLLLLLLLLLLLLLKLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLALLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLKLLLKLLLKLLLLLLLLLLLFLKLLLLLMMLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLKLLLLLLLKLLLKLLLLLLLLLLLLLLOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOMLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLFFFFFFFFIIQQQQQQQQQQLLKKKKKKKKKKKKLLDLLLLLLLLLLLLLLLLFFFFFFFFFFFFFFFIGIDDDDGGGGGGIDDDDIIDKLLLLKKKKLLLLKKLLLLKKMMKKKKKKKKKLLKKKKKLLKLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLALLLLKLLLLLLKLLKLLKMMMKKLLLLKKKKKLLLLLLLLLLLLKKLLKLLLLKKKKMMLLMMKKKKKKLLLLLLKKKKKKKLLKKKKKKKKKKKKKLLLLLLLLKLLLLLLKKLLKLLKKKKKKKKKKKKLLKLLKLLLLLLLLLKKLLKKKKKKKKKLLLLLLLLLLLLKKKLLKLLLLLLKKLLLLLLLLLLLLLMMMMMMAKKKLLLLLLKKKKLLKKKKKMMMKKKKKKLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLFFFF","n":["BasicAutodiffOps","BasicOps","Bernoulli","Bernoulli","Bool","Concrete","DIGITS","DIGITS","Data","DataSerialize","Default","Device","Dim","DimIter","Distribution","DistributionSampler","DistributionSamplerKind","Double","E","E","E","E","EPSILON","EPSILON","Elem","Element","ElementConversion","ElementPrecision","ElementRandom","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_2","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_3","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_4","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_6","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","FRAC_PI_8","Float","Full","Half","INFINITY","INFINITY","InnerKind","Int","LN_10","LN_10","LN_10","LN_10","LN_2","LN_2","LN_2","LN_2","LOG10_2","LOG10_2","LOG10_2","LOG10_2","LOG10_E","LOG10_E","LOG10_E","LOG10_E","LOG2_10","LOG2_10","LOG2_10","LOG2_10","LOG2_E","LOG2_E","LOG2_E","LOG2_E","MANTISSA_DIGITS","MANTISSA_DIGITS","MAX","MAX","MAX_10_EXP","MAX_10_EXP","MAX_EXP","MAX_EXP","MAX_SUBNORMAL","MAX_SUBNORMAL","MIN","MIN","MIN_10_EXP","MIN_10_EXP","MIN_EXP","MIN_EXP","MIN_POSITIVE","MIN_POSITIVE","MIN_POSITIVE_SUBNORMAL","MIN_POSITIVE_SUBNORMAL","NAN","NAN","NEG_INFINITY","NEG_INFINITY","NEG_ONE","NEG_ONE","NEG_ZERO","NEG_ZERO","NamedDim","NamedDim","NamedDims","NamedTensor","Normal","Normal","Numeric","ONE","ONE","Other","PI","PI","PI","PI","Precision","Primitive","PrintOptions","RADIX","RADIX","Reader","ReshapeArgs","SQRT_2","SQRT_2","SQRT_2","SQRT_2","Shape","Standard","Sync","T","Tensor","Tensor","TensorKind","Uniform","Uniform","ZERO","ZERO","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acos","acosh","acosh","acosh","acosh","activation","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_scalar","add_scalar","add_scalar","add_scalar","arange","arange_device","arange_step","arange_step_device","argmax","argmax","argmax","argmax","argmin","argmin","argmin","argmin","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","as_","asin","asin","asin","asin","asinh","asinh","asinh","asinh","assert_approx_eq","assert_approx_eq_diff","assert_within_range","atan","atan","atan","atan","atan2","atan2","atan2","atan2","atanh","atanh","atanh","atanh","backend","backward","bf16","bitxor","bool_not","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","cat","cat","cat","cat","cbrt","cbrt","cbrt","cbrt","ceil","ceil","ceil","ceil","ceil","ceil","check","clamp","clamp","clamp","clamp","clamp","clamp","clamp_max","clamp_max","clamp_max","clamp_max","clamp_min","clamp_min","clamp_min","clamp_min","classify","classify","classify","classify","classify","classify","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","container","convert","convert","convert","copysign","copysign","cos","cos","cos","cos","cos","cosh","cosh","cosh","cosh","cov","default","default","deserialize","deserialize","deserialize","detach","device","device","device","device","device","diagonal","dims","dims","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_scalar","div_scalar","div_scalar","div_scalar","edge_items","elem","elem","elem","elem_type_name","elem_type_name","empty","empty","empty","empty","empty","empty_device","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal_elem","equal_elem","equal_elem","equal_elem","equivalent","equivalent","equivalent","equivalent","erf","exp","exp","exp","exp","exp","exp2","exp2","exp2","exp2","exp_m1","exp_m1","exp_m1","exp_m1","f16","flatten","float","float","floor","floor","floor","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","fract","fract","fract","fract","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_bits","from_bits","from_bool","from_bool_device","from_data","from_data","from_data","from_data","from_data","from_data_device","from_elem","from_elem","from_elem","from_f32","from_f32","from_f32","from_f32","from_f32_const","from_f32_const","from_f64","from_f64","from_f64","from_f64","from_f64_const","from_f64_const","from_floats","from_full_precision","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i8","from_i8","from_inner","from_inner","from_inner","from_inner","from_inner","from_ints","from_le_bytes","from_le_bytes","from_ne_bytes","from_ne_bytes","from_primitive","from_str","from_str","from_str_radix","from_str_radix","from_tensor","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u8","from_u8","from_usize","full","full","full","full","full","full_device","gather","gather","gather","gather","ge","ge","grad","grad_remove","grad_replace","greater","greater","greater","greater","greater_elem","greater_elem","greater_elem","greater_elem","greater_equal","greater_equal","greater_equal","greater_equal","greater_equal_elem","greater_equal_elem","greater_equal_elem","greater_equal_elem","gt","gt","hypot","hypot","hypot","hypot","infinity","infinity","infinity","infinity","inner","inner","inner","inner","inner","inplace","int","int","integer_decode","integer_decode","integer_decode","integer_decode","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_data","into_data","into_data","into_data","into_data","into_iter","into_primitive","into_scalar","into_shape","into_shape","is_finite","is_finite","is_finite","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_normal","is_normal","is_normal","is_require_grad","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_sign_positive","is_valid_bit_pattern","is_valid_bit_pattern","is_zero","is_zero","iter_dim","le","le","ln","ln","ln","ln","ln_1p","ln_1p","ln_1p","ln_1p","log","log","log","log","log","log10","log10","log10","log10","log1p","log2","log2","log2","log2","loss","lower","lower","lower","lower","lower_elem","lower_elem","lower_elem","lower_elem","lower_equal","lower_equal","lower_equal","lower_equal","lower_equal_elem","lower_equal_elem","lower_equal_elem","lower_equal_elem","lt","lt","make_element","make_element","map","mask_fill","mask_fill","mask_fill","mask_fill","mask_where","mask_where","mask_where","mask_where","matmul","matmul","max","max","max","max","max","max","max","max","max","max","max","max","max_dim","max_dim","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_dim_with_indices","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","max_value","mean","mean","mean","mean","mean_dim","mean_dim","mean_dim","mean_dim","min","min","min","min","min","min","min","min","min","min","min","min","min_dim","min_dim","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_dim_with_indices","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_positive_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","min_value","module","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_assign","mul_assign","mul_assign","mul_assign","mul_scalar","mul_scalar","mul_scalar","mul_scalar","name","name","name","name","nan","nan","nan","nan","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg_infinity","neg_infinity","neg_infinity","neg_infinity","neg_zero","neg_zero","neg_zero","neg_zero","new","new","new","new","new","next","num_elements","one","one","one_hot","ones","ones","ones","ones","ones","ones_device","ones_like","ops","partial_cmp","partial_cmp","powf","powf","powf","powf","powf","powi","powi","powi","powi","powi","powi","precision","precision","precision","product","product","product","product","random","random","random","random","random","random","random_device","random_like","read","read_sync","recip","recip","recip","recip","recip","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","repeat","repeat","repeat","repeat","repeat","require_grad","reshape","reshape","reshape","reshape","reshape","reshape","round","round","round","round","round","round","sample","sampler","scatter","scatter","scatter","scatter","select","select","select","select","select_assign","select_assign","select_assign","select_assign","serialize","serialize","serialize","serialize","serialize_as_f32","serialize_as_f32","serialize_as_string","serialize_as_string","set_print_options","set_require_grad","shape","shape","shape","shape","shape","shape","shape","shape","signum","signum","signum","signum","signum","signum","signum","signum","sin","sin","sin","sin","sin","sin_cos","sin_cos","sin_cos","sin_cos","sinh","sinh","sinh","sinh","slice","slice","slice","slice","slice","slice_assign","slice_assign","slice_assign","slice_assign","slice_assign","sqrt","sqrt","sqrt","sqrt","sqrt","squeeze","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_scalar","sub_scalar","sub_scalar","sub_scalar","sum","sum","sum","sum","sum","sum","sum","sum","sum_dim","sum_dim","sum_dim","sum_dim","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","swap_dims","tan","tan","tan","tan","tanh","tanh","tanh","tanh","tanh","testgen_abs","testgen_add","testgen_aggregation","testgen_all","testgen_arange","testgen_arange_step","testgen_arg","testgen_cast","testgen_cat","testgen_clamp","testgen_clone_invariance","testgen_cos","testgen_cov","testgen_create_like","testgen_diagonal","testgen_display","testgen_div","testgen_erf","testgen_exp","testgen_flatten","testgen_full","testgen_gather_scatter","testgen_gelu","testgen_init","testgen_iter_dim","testgen_log","testgen_log1p","testgen_map_comparison","testgen_mask","testgen_matmul","testgen_maxmin","testgen_module_adaptive_avg_pool1d","testgen_module_adaptive_avg_pool2d","testgen_module_avg_pool1d","testgen_module_avg_pool2d","testgen_module_conv1d","testgen_module_conv2d","testgen_module_conv_transpose1d","testgen_module_conv_transpose2d","testgen_module_forward","testgen_module_max_pool1d","testgen_module_max_pool2d","testgen_module_unfold4d","testgen_mul","testgen_neg","testgen_one_hot","testgen_powf","testgen_random","testgen_recip","testgen_relu","testgen_repeat","testgen_reshape","testgen_select","testgen_sigmoid","testgen_silu","testgen_sin","testgen_slice","testgen_softmax","testgen_sqrt","testgen_squeeze","testgen_sub","testgen_tanh","testgen_tanh_activation","testgen_transpose","testgen_var","threshold","to_be_bytes","to_be_bytes","to_bits","to_bits","to_data","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_degrees","to_device","to_device","to_device","to_device","to_device","to_f32","to_f32","to_f32","to_f32","to_f32_const","to_f32_const","to_f64","to_f64","to_f64","to_f64","to_f64_const","to_f64_const","to_full_precision","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_le_bytes","to_le_bytes","to_ne_bytes","to_ne_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_radians","to_radians","to_radians","to_radians","to_radians","to_radians","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","total_cmp","total_cmp","transpose","transpose","transpose","transpose","transpose","trunc","trunc","trunc","trunc","trunc","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsqueeze","unsqueeze_dim","value","value","var","var_bias","var_mean","var_mean_bias","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","zero","zeros","zeros","zeros","zeros","zeros","zeros_device","zeros_like","gelu","log_sigmoid","log_softmax","relu","sigmoid","silu","softmax","tanh","AutodiffBackend","Backend","BoolTensorPrimitive","Device","FloatElem","FullPrecisionBackend","FullPrecisionElem","Gradients","InnerBackend","IntElem","IntTensorPrimitive","TensorPrimitive","ad_enabled","ad_enabled","backward","bool_from_inner","bool_inner","from_inner","grad","grad_remove","grad_replace","inner","int_from_inner","int_inner","name","seed","sync","sync","TensorContainer","borrow","borrow_mut","default","fmt","from","get","into","is_empty","len","new","register","remove","try_from","try_into","type_id","vzip","cross_entropy_with_logits","adaptive_avg_pool1d","adaptive_avg_pool2d","avg_pool1d","avg_pool2d","conv1d","conv2d","conv_transpose1d","conv_transpose2d","embedding","max_pool1d","max_pool1d_with_indices","max_pool2d","max_pool2d_with_indices","unfold4d","ActivationOps","BoolTensor","BoolTensorOps","Conv1dBackward","Conv2dBackward","ConvOptions","ConvTransposeOptions","Device","FloatElem","FloatTensor","FullPrecisionBackend","IntElem","IntTensor","IntTensorOps","MaxPool1dBackward","MaxPool1dWithIndices","MaxPool2dBackward","MaxPool2dWithIndices","ModuleOps","TensorOps","UnfoldOptions","abs","adaptive_avg_pool1d","adaptive_avg_pool1d","adaptive_avg_pool1d_backward","adaptive_avg_pool1d_backward","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","arange","arange","arange_step","arange_step","argmax","argmin","avg_pool1d","avg_pool1d","avg_pool1d_backward","avg_pool1d_backward","avg_pool2d","avg_pool2d_backward","bias_grad","bias_grad","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_repeat","bool_repeat","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_to_data","bool_to_data","bool_to_device","bool_transpose","bool_transpose","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp","clamp_max","clamp_max","clamp_min","clamp_min","clone","clone","clone","clone_into","clone_into","clone_into","conv","conv1d","conv1d","conv1d_backward","conv1d_backward","conv2d","conv2d_backward","conv2d_backward","conv_transpose1d","conv_transpose1d","conv_transpose1d_backward","conv_transpose1d_backward","conv_transpose2d","conv_transpose2d_backward","conv_transpose2d_backward","cos","detach","detach","device","dilation","dilation","dilation","div","div_scalar","embedding","embedding","embedding_backward","embedding_backward","empty","equal","equal_elem","erf","exp","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_data","from_full_precision","full","full","gather","gelu","gelu","gelu_backward","gelu_backward","greater","greater_elem","greater_equal","greater_equal_elem","groups","groups","hash","hash","indices","indices","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp","int_clamp_max","int_clamp_max","int_clamp_min","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_full","int_full","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_max","int_max","int_max_dim","int_max_dim","int_max_dim_with_indices","int_max_dim_with_indices","int_mean","int_mean","int_mean_dim","int_min","int_min","int_min_dim","int_min_dim","int_min_dim_with_indices","int_min_dim_with_indices","int_mul","int_mul_scalar","int_neg","int_neg","int_ones","int_repeat","int_repeat","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_to_data","int_to_data","int_to_device","int_transpose","int_transpose","int_zeros","into","into","into","into","into","into","into","into","into","into_data","into_int","is_require_grad","is_require_grad","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max","max","max_dim","max_dim","max_dim_with_indices","max_dim_with_indices","max_pool1d","max_pool1d","max_pool1d_with_indices","max_pool1d_with_indices","max_pool1d_with_indices_backward","max_pool1d_with_indices_backward","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean","mean","mean_dim","min","min","min_dim","min_dim","min_dim_with_indices","min_dim_with_indices","mul","mul_scalar","neg","neg","new","new","new","new","new","new","new","new","new","ones","ones","output","output","padding","padding","padding","padding_out","pool","powf","random","recip","relu","relu","relu_backward","relu_backward","repeat","repeat","reshape","scatter","select","select_assign","set_require_grad","set_require_grad","shape","sin","slice","slice_assign","sqrt","stride","stride","stride","sub","sub_scalar","sum","sum_dim","swap_dims","tanh","to_data","to_data","to_device","to_full_precision","to_owned","to_owned","to_owned","transpose","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold4d","unfold4d","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weights_grad","weights_grad","x_grad","x_grad","x_grad","x_grad","zeros","zeros","calculate_conv_output_size","calculate_conv_padding","calculate_conv_transpose_output_size","calculate_pool_output_size"],"q":[[0,"burn_tensor"],[1372,"burn_tensor::activation"],[1380,"burn_tensor::backend"],[1408,"burn_tensor::container"],[1425,"burn_tensor::loss"],[1426,"burn_tensor::module"],[1440,"burn_tensor::ops"],[1826,"burn_tensor::ops::conv"],[1830,"core::ops::range"],[1831,"core::convert"],[1832,"core::clone"],[1833,"core::fmt"],[1834,"core::cmp"],[1835,"alloc::vec"],[1836,"core::num"],[1837,"core::result"],[1838,"serde::de"],[1839,"serde::de"],[1840,"num_traits::cast"],[1841,"core::marker"],[1842,"core::num::dec2flt"],[1843,"num_traits::cast"],[1844,"core::marker"],[1845,"rand_core"],[1846,"core::cmp"],[1847,"core::marker"],[1848,"serde::ser"],[1849,"core::any"],[1850,"core::hash"],[1851,"core::cmp"]],"d":["Trait that list all operations that can be applied on all …","Trait that list all operations that can be applied on all …","Bernoulli distribution.","Bernoulli distribution with the given probability.","A type-level representation of the kind of a bool tensor.","Concrete variant.","Approximate number of <code>bf16</code> significant digits in base 10","Approximate number of <code>f16</code> significant digits in base 10","Data structure for tensors.","Data structure for serializing and deserializing tensor …","Uniform distribution from 0 (inclusive) to 1 (exclusive).","Device type used by the backend.","Dimension trait.","Iterator given by (Tensor::iter_dim).","Distribution for random value of a tensor.","Distribution sampler for random value of a tensor.","Distribution sampler kind for random value of a tensor.","Double precision, e.g. f64.","","","<code>bf16</code> Euler’s number (ℯ)","<code>f16</code> Euler’s number (ℯ)","<code>bf16</code> machine epsilon value","<code>f16</code> machine epsilon value","The type of the tensor elements.","Element trait for tensor.","Element conversion trait for tensor.","Element precision trait for tensor.","Element trait for random value of a tensor.","","","<code>bf16</code> 1/π","<code>f16</code> 1/π","","","<code>bf16</code> 1/√2","<code>f16</code> 1/√2","","","<code>bf16</code> 2/π","<code>f16</code> 2/π","","","<code>bf16</code> 2/√π","<code>f16</code> 2/√π","","","<code>bf16</code> π/2","<code>f16</code> π/2","","","<code>bf16</code> π/3","<code>f16</code> π/3","","","<code>bf16</code> π/4","<code>f16</code> π/4","","","<code>bf16</code> π/6","<code>f16</code> π/6","","","<code>bf16</code> π/8","<code>f16</code> π/8","A type-level representation of the kind of a float tensor","Full precision, e.g. f32.","Half precision, e.g. f16.","<code>bf16</code> positive Infinity (+∞)","<code>f16</code> positive Infinity (+∞)","Inner primitive tensor.","A type-level representation of the kind of a int tensor.","","","<code>bf16</code> 𝗅𝗇 10","<code>f16</code> 𝗅𝗇 10","","","<code>bf16</code> 𝗅𝗇 2","<code>f16</code> 𝗅𝗇 2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀2","<code>f16</code> 𝗅𝗈𝗀₁₀2","","","<code>bf16</code> 𝗅𝗈𝗀₁₀ℯ","<code>f16</code> 𝗅𝗈𝗀₁₀ℯ","","","<code>bf16</code> 𝗅𝗈𝗀₂10","<code>f16</code> 𝗅𝗈𝗀₂10","","","<code>bf16</code> 𝗅𝗈𝗀₂ℯ","<code>f16</code> 𝗅𝗈𝗀₂ℯ","Number of <code>bf16</code> significant digits in base 2","Number of <code>f16</code> significant digits in base 2","Largest finite <code>bf16</code> value","Largest finite <code>f16</code> value","Maximum possible <code>bf16</code> power of 10 exponent","Maximum possible <code>f16</code> power of 10 exponent","Maximum possible <code>bf16</code> power of 2 exponent","Maximum possible <code>f16</code> power of 2 exponent","Maximum subnormal <code>bf16</code> value","Maximum subnormal <code>f16</code> value","Smallest finite <code>bf16</code> value","Smallest finite <code>f16</code> value","Minimum possible normal <code>bf16</code> power of 10 exponent","Minimum possible normal <code>f16</code> power of 10 exponent","One greater than the minimum possible normal <code>bf16</code> power of …","One greater than the minimum possible normal <code>f16</code> power of …","Smallest positive normal <code>bf16</code> value","Smallest positive normal <code>f16</code> value","Minimum positive subnormal <code>bf16</code> value","Minimum positive subnormal <code>f16</code> value","<code>bf16</code> Not a Number (NaN)","<code>f16</code> Not a Number (NaN)","<code>bf16</code> negative infinity (-∞).","<code>f16</code> negative infinity (-∞)","<code>bf16</code> -1","<code>f16</code> -1","<code>bf16</code> -0","<code>f16</code> -0","Named dimension macro.","Named dimension macro.","Named dimensions trait.","A tensor with named dimensions.","Normal distribution.","Normal distribution with the given mean and standard …","Trait that list all operations that can be applied on all …","<code>bf16</code> 1","<code>f16</code> 1","Other precision.","","","<code>bf16</code> Archimedes’ constant (π)","<code>f16</code> Archimedes’ constant (π)","Element precision trait for tensor.","The primitive type of the tensor.","Options for Tensor pretty printing","The radix or base of the internal representation of <code>bf16</code>","The radix or base of the internal representation of <code>f16</code>","Define how data is read, sync or async.","Trait used for reshape arguments.","","","<code>bf16</code> √2","<code>f16</code> √2","Shape of a tensor.","Standard distribution.","Sync data variant.","Transpose marker (zero-size type). Used to sugar the …","A tensor with a given backend, shape and data type.","Tensor type.","A type-level representation of the kind of a tensor.","Uniform distribution.","Uniform distribution. The range is inclusive.","<code>bf16</code> 0","<code>f16</code> 0","Calculate absolute value on all elements of a tensor","","","","","","","Apply element wise absolute value operation","","","","","","","","","","","","","","","The activation module.","Adds two tensors together.","","","","","","","","","","Applies element wise addition operation.","","","","","","","","Adds a scalar to a tensor element-wise.","Applies element wise addition operation with a scalar.","","","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Returns a new integer tensor on the default device.","Returns a new integer tensor on the specified device.","Gets the indices of the maximum elements of a tensor along …","Applies the argmax function along the given dimension and …","","","Gets the indices of the minimum elements of a tensor along …","Applies the argmin function along the given dimension and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Asserts the data is approximately equal to another data.","Asserts the data is approximately equal to another data.","Asserts each value is within a given range.","","","","","","","","","","","","","The backend module.","Backward pass of the tensor.","A 16-bit floating point type implementing the <code>bfloat16</code> …","","Inverses boolean values.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Concatenates the given tensors along the given dimension.","Concatenates all tensors into a new one along the given …","","","","","","","","","","","","","","We use a macro for all checks, since the panic message …","Clamp the tensor between the given min and max values.","Restrict a value to a certain interval unless it is NaN.","Restrict a value to a certain interval unless it is NaN.","Clamp the tensor between the given min and max values.","","","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","","","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","","","Returns the floating point category of the number.","","","","Returns the floating point category of the number.","","","","","","","","","","","","","","","","","","","","","","","","","","The container module.","Converts the data to a different element type.","Converts the data to a different element type.","Converts the data to a different element type.","Returns a number composed of the magnitude of <code>self</code> and the …","Returns a number composed of the magnitude of <code>self</code> and the …","","","","","Applies element wise cosine operation.","","","","","Calculate covaraince matrix between different entries …","","","","","","Detach the current tensor from the autodiff graph.","Returns the device on which the tensor is allocated.","Returns the device of the current tensor.","","","","Create diagonal matrix.","Returns the dimensions of the current tensor.","The dimensions of the tensor.","Divides two tensors.","","","","","","","","","Applies element wise division operation.","","","","","","","","","Divides a tensor by a scalar element-wise.","Applies element wise division operation with a scalar.","","","number of starting elements and ending elements to display","Converts and returns the converted element.","","","Returns the name of the element type.","Returns the name of the element type.","Creates an empty tensor with the given shape.","Create an empty tensor of the given shape.","","","","Create an empty tensor of the given shape.","","","","","","","","","","","","","Equates the given tensors.","Applies element wise equal comparison and returns a …","","","","Element-wise equality between two tensors.","Applies element wise equal comparison and returns a …","","","","","","","Applies the error function element wise.","","","","","Applies element wise exponential operation.","","","","","","","","","A 16-bit floating point type implementing the IEEE …","Flatten the tensor along a given range of dimensions.","Returns a new tensor with the same shape and device as the …","Convert the bool tensor into an float tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Constructs a <code>bf16</code> value from the raw bits.","Constructs a 16-bit floating point value from the raw bits.","Create a boolean tensor from data.","Create a boolean tensor from data on the given device.","Creates a tensor from the given data.","Create a tensor from the given data.","","","","Create a tensor from the given data on the given device.","Converts an element to another element.","","","Constructs a <code>bf16</code> value from a 32-bit floating point value.","","Constructs a 16-bit floating point value from a 32-bit …","","Constructs a <code>bf16</code> value from a 32-bit floating point value.","Constructs a 16-bit floating point value from a 32-bit …","","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","","Constructs a <code>bf16</code> value from a 64-bit floating point value.","Constructs a 16-bit floating point value from a 64-bit …","Create a tensor from floats (f32).","Returns a tensor on the selected backend from a full …","","","","","","","","","Convert a tensor to the autodiff backend.","Convert a tensor to the autodiff backend.","","","","Create a tensor from integers (i32).","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Creates a floating point value from its representation as …","Converts from a primitive tensor into a tensor.","","","","","Create a named tensor from a tensor.","","","","","","","","","Converts the usize data to a different element type.","Creates a tensor filled with elements equal to the given …","Create a tensor of the given shape where each element is …","","","Populates the data with the given value","Create a tensor of the given shape where each element is …","Gathers elements from a tensor along an axis.","Gather tensor elements corresponding to the given indices …","","","","","Get the gradients of a tensor if it exist.","Remove the grad tensor from the grads struct returning the …","Replace the grad tensor from the grads struct with the …","Element-wise greater than comparison between two tensors.","Applies element wise greater comparison and returns a …","","","Element-wise greater than comparison between a tensor and …","Applies element wise greater comparison and returns a …","","","Element-wise greater than or equal comparison between two …","Applies element wise greater-equal comparison and returns …","","","Element-wise greater than or equal comparison between a …","Applies element wise greater-equal comparison and returns …","","","","","","","","","","","","","Returns the inner tensor without the autodiff information.","Returns the inner tensor without the autodiff information.","","","","Executes an operation on the tensor and modifies its value.","Convert the bool tensor into an int tensor.","Returns a new tensor with the same shape and device as the …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the data from the tensor.","Returns the data of the current tensor.","","","","","Converts the tensor into a primitive tensor.","Convert the tensor into a scalar.","Converts to a shape.","","Returns <code>true</code> if this number is neither infinite nor NaN.","","","","","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","","Returns <code>true</code> if this value is ±∞ and <code>false</code> otherwise.","Returns <code>true</code> if this value is ±∞ and <code>false</code>. otherwise.","","","","","Returns <code>true</code> if this value is NaN and <code>false</code> otherwise.","Returns <code>true</code> if this value is <code>NaN</code> and <code>false</code> otherwise.","","","","Returns <code>true</code> if the number is neither zero, infinite, …","","Returns <code>true</code> if the number is neither zero, infinite, …","","","Returns true if the tensor requires gradients during the …","","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","","Returns <code>true</code> if and only if <code>self</code> has a negative sign, …","","","","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","","Returns <code>true</code> if and only if <code>self</code> has a positive sign, …","","","","","","Iterate over slices of tensors alongside a given dimension.","","","","","","","","","","","","","","","Applies element wise natural log operation <em>ln</em>.","","","","","Applies the natural logarithm of one plus the input …","","","","","The loss module.","Element-wise less than comparison between two tensors.","Applies element wise lower comparison and returns a …","","","Element-wise less than comparison between a tensor and a …","Applies element wise lower comparison and returns a …","","","Element-wise less than or equal comparison between two …","Applies element wise lower-equal comparison and returns a …","","","Element-wise less than or equal comparison between a …","Applies element wise lower-equal comparison and returns a …","","","","","Macro to implement the element trait for a type.","Macro to implement the element trait for a type.","Map the current reader to another type.","Fills elements of a tensor based on a boolean mask.","Update the given tensor with the value where the mask is …","","","Selects elements from a tensor based on a boolean mask.","Update the given tensor with the value tensor where the …","","","Applies the matrix multiplication operation.","Applies the matrix multiplication operation.","Gets the maximum elements of a tensor along an axis.","","","","Returns the maximum of the two numbers.","","","","Returns the maximum of the two numbers.","Find the maximum value.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","Gets the maximum elements of a tensor along an axis.","Find the maximum value along the given dimension.","","","","","","","","","","","","","Computes the mean of all the elements of the tensor.","Aggregate all elements in the tensor with the mean …","","","Computes the mean of all the elements of the tensor along …","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Gets the minimum elements of a tensor along an axis.","","","","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","","","","Find the minimum value.","","","Gets the minimum elements of a tensor along an axis.","Find the minimum value along the given dimension.","","","Gets the minimum elements and indices of a tensor along an …","Find the minimum value along the given dimension.","","","","","","","","","","","","","","","","","","","The burn module.","Multiplies two tensors.","","","","","","","","","Applies element wise multiplication operation.","","","","","Applies element wise multiplication operation.","","","","","","","","","Multiplies a tensor by a scalar element-wise.","Applies element wise multiplication operation with a …","","","The name of the tensor kind.","","","","","","","","Negates a tensor.","","","","","","Switch sign of each element in the tensor.","","","","","","","","","","","Constructs a new <code>Tensor</code>.","Constructs a new <code>DataSerialize</code>.","Constructs a new <code>Data</code>.","Constructs a new <code>DistributionSampler</code>.","Constructs a new <code>Shape</code>.","","Returns the total number of elements of a tensor having …","","","Create a one hot tensor.","Creates a tensor filled with ones.","Create a tensor of the given shape where each element is …","","","Populates the data with ones.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Operations on tensors module.","","","","","","","Applies element wise power operation.","","","","","","","Returns the precision of the element.","","","","","","","Returns a random value for the given distribution.","","","Create a random tensor of the given shape where each …","Populates the data with random values.","Create a random named tensor of the given shape where each …","Create a random tensor of the given shape on the given …","Returns a new tensor with the same shape and device as the …","Read the data.","Read the data only if sync, returns None if an async …","","","","","","","Applies element wise reciprocal operation.","","","","","","","","","","","","","Repeat the tensor along the given dimension.","Repeat the tensor along the given dimension.","","","","Mark the tensor to keep gradients during the backward pass.","Reshapes the tensor.","Reshape the tensor to have the given shape.","","","","Reshape the tensor to have the given shape.","","","","","","","Sames a random value from the distribution.","Creates a new distribution sampler.","Scatters elements into a tensor along an axis.","Assign the gathered elements corresponding to the given …","","","Select tensor elements along the given dimension …","Select the tensor elements along the given dimension …","","","Assign the selected elements along the given dimension …","Assign the selected elements along the given dimension …","","","","","","Serializes the data.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a float.","Alternate serialize adapter for serializing as a string.","Alternate serialize adapter for serializing as a string.","Set print options","Mark the tensor as tracked or untracked depending on the …","Returns the shape of the tensor.","Returns the shape of the current tensor.","","","","Returns the shape of the current tensor.","The shape of the tensor.","The shape of the tensor.","","Returns a number that represents the sign of <code>self</code>.","","","","Returns a number that represents the sign of <code>self</code>.","","","","","","","Applies element wise sine operation.","","","","","","","","","Select tensor elements corresponding for the given ranges.","Returns a tensor containing the elements selected from the …","","","","Assigns the given value to the tensor elements …","Returns a copy of the current tensor with the selected …","","","","","","","","Applies element wise root square operation.","Squeeze the tensor along the given dimension, removing the …","Subtracts two tensors.","","","","","","","","","","","Applies element wise subtraction operation.","","","","","","","Subtracts a scalar from a tensor element-wise.","Applies element wise subtraction operation with a scalar.","","","Sums all the elements of the tensor.","","","","","Aggregate all elements in the tensor with the sum …","","","Sums all the elements of the tensor along a dimension.","Aggregate all elements along the given <em>dimension</em> or <em>axis</em> …","","","Swaps two dimensions of a tensor.","Swaps two dimensions of a tensor.","","","","Swap two dimensions.","","","","","","","","","Applies element wise hyperbolic tangent operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","number of elements to start summarizing tensor","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Converts a <code>bf16</code> into the underlying bit representation.","Converts a <code>f16</code> into the underlying bit representation.","Returns the data of the current tensor without taking …","","","","","","","Moves the tensor to the given device.","Returns a new tensor on the given device.","","","","Converts a <code>bf16</code> value into an <code>f32</code> value.","","Converts a <code>f16</code> value into a <code>f32</code> value.","","Converts a <code>bf16</code> value into an <code>f32</code> value.","Converts a <code>f16</code> value into a <code>f32</code> value.","","Converts a <code>bf16</code> value into an <code>f64</code> value.","","Converts a <code>f16</code> value into a <code>f64</code> value.","Converts a <code>bf16</code> value into an <code>f64</code> value.","Converts a <code>f16</code> value into a <code>f64</code> value.","Returns a tensor with full precision based on the selected …","","","","","","","","","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","Returns the memory representation of the underlying bit …","","","","","","","","","","","","","","","","","","","Converts the dimension to a string.","Converts the named dimensions to a string.","","","","","","","","","","","","","","Returns the ordering between <code>self</code> and <code>other</code>.","Returns the ordering between <code>self</code> and <code>other</code>.","Transposes a tensor.","Transpose the tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsqueeze the current tensor. Create new dimensions to fit …","Creates a new tensor with a dimension of size one inserted …","The values of the tensor.","The values of the tensor.","Calculate the variance along the given dimension.","Calculate the variance along the given dimension without …","Calculate the variance along the given dimension and also …","Calculate the variance along the given dimension without …","","","","","","","","","","","","","","","","","","","","","Creates a tensor filled with zeros.","Create a tensor of the given shape where each element is …","","","Populates the data with zeros.","Create a tensor of the given shape where each element is …","Returns a new tensor with the same shape and device as the …","Applies the Gaussian Error Linear Units function as …","Applies the log sigmoid function.","Applies the log softmax function on the input tensor along …","Applies the rectified linear unit function.","Applies the sigmoid function.","Applies the silu function","Applies the softmax function on the input tensor along the …","Applies the tanh function","Trait that allows a backend to support autodiff.","This trait defines all types and functions needed for a …","Tensor primitive to be used for all bool operations.","Device type.","Float element type.","Pointer to another backend that have a full precision …","Full precision float element type.","Gradients type.","The inner backend type.","Int element type.","Tensor primitive to be used for all int operations.","Tensor primitive to be used for all float operations.","If autodiff is enabled.","If autodiff is enabled.","Backward pass.","Converts the inner backend tensor to the autodiff backend …","Returns the tensor with inner backend type.","Converts the inner backend tensor to the autodiff backend …","Returns the gradients of a tensor.","Pops the gradients of a tensor and returns them.","Replace the gradients of a tensor with the one provided.","Returns the tensor with inner backend type.","Converts the inner backend tensor to the autodiff backend …","Returns the tensor with inner backend type.","Name of the backend.","Seed the backend.","Sync the backend, ensure that all computation are finished.","Sync the backend, ensure that all computation are finished.","Contains tensor of arbitrary dimension.","","","","","Returns the argument unchanged.","Get a tensor with the given ID.","Calls <code>U::from(self)</code>.","If any tensor is contained.","The number of tensors registered.","Create an empty container.","Register a new tensor for the given ID.","Remove a tensor for the given ID and returns it.","","","","","Computes the log softmax cross entropy between logits and …","Applies a 1D adaptive avg pooling.","Applies a 2D adaptive avg pooling.","Applies a 1D avg pooling.","Applies a 2D avg pooling.","Applies a 1D convolution.","Applies a 2D convolution.","Applies a 1D transposed convolution.","Applies a 2D transposed convolution.","Applies the embedding module.","Applies a 1D max pooling.","Applies a 1D max pooling.","Applies a 2D max pooling.","Applies a 2D max pooling with indices.","Applies a 4D to 3D unfold.","Activation function operations.","Boolean tensor primitive type used by the backend.","Bool Tensor API for basic operations, see tensor for …","Gradient computed during the backward pass for each tensor …","Gradient computed during the backward pass for each tensor …","Convolution options.","Transposed convolution options.","Device type used by the backend.","Float element type used by backend.","Float tensor primitive type used by the backend.","Full precision float element type used by the backend.","Integer element type used by backend.","Integer tensor primitive type used by the backend.","Int Tensor API for basic and numeric operations, see tensor","Gradient computed during the backward pass for each tensor …","Results from max_pool1d.","Gradient computed during the backward pass for each tensor …","Results from max_pool2d.","Module operations trait.","Operations on float tensors.","Unfold operation options.","Returns a new tensor with absolute values.","One dimensional adaptive avg pooling.","One dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 1d operation.","Backward pass for the adaptive avg pooling 1d operation.","Two dimensional adaptive avg pooling.","Backward pass for the adaptive avg pooling 2d operation.","Adds two tensors together.","Adds a scalar to a tensor.","Creates a new tensor with values from the given range.","Creates a new tensor with values from the given range.","Creates a new tensor with values from the given range with …","Creates a new tensor with values from the given range with …","Gets the indices of the maximum elements of a tensor along …","Gets the indices of the minimum elements of a tensor along …","One dimensional avg pooling.","One dimensional avg pooling.","Backward pass for the avg pooling 1d operation.","Backward pass for the avg pooling 1d operation.","Two dimensional avg pooling.","Backward pass for the avg pooling 2d operation.","Bias gradient.","Bias gradient.","Concatenates the tensors along the given dimension.","Gets the device of the tensor.","Creates a new bool tensor.","Equates the two tensors.","Creates a tensor from the data structure.","Converts the tensor to a data structure.","Converts bool tensor to float tensor.","Converts bool tensor to int tensor.","Inverses boolean values.","Repeats one dimension of the tensor a given number of …","Repeats one dimension of the tensor a given number of …","Reshapes the tensor.","Returns the shape of the tensor.","Gets the values from the tensor for the given ranges.","Sets the values in the tensor for the given ranges.","Swaps two dimensions of a bool tensor.","Gets the data from the tensor.","Gets the data from the tensor.","Moves the tensor to the device.","Transposes a bool tensor.","Transposes a bool tensor.","","","","","","","","","","","","","","","","","","","Catcatenates tensors along a dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","","","","","","","Module with convolution operations.","One dimensional convolution.","One dimensional convolution.","Backward pass for the conv1d operation.","Backward pass for the conv1d operation.","Two dimensional convolution.","Backward pass for the conv2d operation.","Backward pass for the conv2d operation.","One dimensional transposed convolution.","One dimensional transposed convolution.","Backward pass for the conv transpose 1d operation.","Backward pass for the conv transpose 1d operation.","Two dimensional transposed convolution.","Backward pass for the conv transpose 2d operation.","Backward pass for the conv transpose 2d operation.","Returns a new tensor with cosine values.","Detaches a tensor from the computation graph.","Detaches a tensor from the computation graph.","Gets the device of the tensor.","Dilation.","Dilation.","The spacing between the blocks (patches) in the original …","Divides two tensors element-wise.","Divides a tensor by a scalar.","Embedding operation.","Embedding operation.","Embedding backward operation.","Embedding backward operation.","Creates an empty tensor with the given shape.","Equal comparison of two tensors.","Equal comparison of a tensor and a scalar.","Returns a new tensor with the error function values.","Returns a new tensor with exponential values.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new tensor from the data structure.","Converts a tensor from full precision.","Creates a tensor filled with given value.","Creates a tensor filled with given value.","Gather elements from a tensor.","Applies the Gelu activation function.","Applies the Gelu activation function.","Applies the Gelu activation function backward.","Applies the Gelu activation function backward.","Greater than comparison of two tensors.","Greater than comparison of a tensor and a scalar.","Greater than or equal comparison of two tensors.","Greater than or equal comparison of a tensor and a scalar.","Groups.","Groups.","","","The indices tensor.","The indices tensor.","Returns a new tensor with absolute values.","Elementwise addition.","Elementwise addition with a scalar.","Gets the indices of the maximum elements along a dimension.","Gets the indices of the minimum elements along a dimension.","Concatenates the given tensors along the given dimension.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor between a minimum and maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor over a maximum value.","Clamps a tensor under a minimum value.","Clamps a tensor under a minimum value.","Gets the device of the tensor.","Elementwise division.","Elementwise division with a scalar.","Creates a new int tensor.","Elementwise equality comparison.","Elementwise equality comparison with a scalar.","Creates a tensor from the data structure.","Creates a tensor filled with given value.","Creates a tensor filled with given value.","Gather elements from the tensor at the given indices.","Elementwise greater than comparison.","Elementwise greater than comparison with a scalar.","Elementwise greater than or equal comparison.","Elementwise greater than or equal comparison with a scalar.","Converts the tensor to a data structure.","Converts int tensor to float tensor.","Elementwise less than comparison.","Elementwise less than comparison with a scalar.","Elementwise less than or equal comparison.","Elementwise less than or equal comparison with a scalar.","Fills the tensor with the given value if the mask is true …","Fills the tensor with values from the source tensor if the …","Gets the maximum element in the tensor.","Gets the maximum element in the tensor.","Gets the maximum element in the tensor along a dimension.","Gets the maximum element in the tensor along a dimension.","Gets the maximum elements and corresponding indices along …","Gets the maximum elements and corresponding indices along …","Computes the mean of all elements in the tensor.","Computes the mean of all elements in the tensor.","Computes the mean of all elements in the tensor along a …","Gets the minimum element in the tensor.","Gets the minimum element in the tensor.","Gets the minimum elements in the tensor along a dimension.","Gets the minimum elements in the tensor along a dimension.","Gets the minimum elements and corresponding indices along …","Gets the minimum elements and corresponding indices along …","Elementwise multiplication.","Elementwise multiplication with a scalar.","Elementwise negation.","Elementwise negation.","Creates a tensor of ones.","Repeats the tensor along the given dimension the given …","Repeats the tensor along the given dimension the given …","Reshapes the tensor.","Scatter a given value to the tensor at the given indices.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Returns the shape of the tensor.","Gets the element at the given indices.","Sets the element at the given indices.","Elementwise subtraction.","Elementwise subtraction with a scalar.","Sums all elements in the tensor.","Sums all elements in the tensor along a dimension.","Swaps two dimensions of an int tensor.","Gets the data from the tensor.","Gets the data from the tensor.","Moves the tensor to the given device.","Transposes an int tensor.","Transposes an int tensor.","Creates a tensor of zeros.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the tensor to a data structure.","Converts float tensor to int tensor.","Returns the <code>require_grad</code> flag of a tensor.","Returns the <code>require_grad</code> flag of a tensor.","Returns a new tensor with natural logarithm values.","Returns a new tensor with logarithm values of (1 + Xi).","Less than comparison of two tensors.","Less than comparison of a tensor and a scalar.","Less than or equal comparison of two tensors.","Less than or equal comparison of a tensor and a scalar.","Update the given tensor with the value where the mask is …","Update the given tensor with the value tensor where the …","Multiplies two tensors together using matrix …","Gets the maximum element of a tensor.","Gets the maximum element of a tensor.","Gets the maximum elements of a tensor along an axis.","Gets the maximum elements of a tensor along an axis.","Gets the maximum elements of a tensor along an axis and …","Gets the maximum elements of a tensor along an axis and …","One dimensional max pooling.","One dimensional max pooling.","One dimensional max pooling with indices.","One dimensional max pooling with indices.","Backward pass for the max pooling 1d operation.","Backward pass for the max pooling 1d operation.","Two dimensional max pooling.","Two dimensional max pooling with indices.","Backward pass for the max pooling 2d operation.","Mean of all elements in a tensor.","Mean of all elements in a tensor.","Mean of all elements in a tensor along a dimension.","Gets the minimum element of a tensor.","Gets the minimum element of a tensor.","Gets the minimum elements of a tensor along an axis.","Gets the minimum elements of a tensor along an axis.","Gets the minimum elements of a tensor along an axis and …","Gets the minimum elements of a tensor along an axis and …","Multiplies two tensors together element-wise.","Multiplies a tensor by a scalar.","Negates a tensor element-wise.","Negates a tensor element-wise.","Constructs a new <code>Conv2dBackward</code>.","Constructs a new <code>MaxPool1dBackward</code>.","Constructs a new <code>MaxPool1dWithIndices</code>.","Constructs a new <code>MaxPool2dBackward</code>.","Constructs a new <code>MaxPool2dWithIndices</code>.","Constructs a new <code>Conv1dBackward</code>.","Constructs a new <code>ConvOptions</code>.","Constructs a new <code>ConvTransposeOptions</code>.","Constructs a new <code>UnfoldOptions</code>.","Creates a new tensor with ones.","Creates a new tensor with ones.","The output tensor.","The output tensor.","Padding.","Padding.","The number of zero-padding pixels added to each side of …","Padding out.","Module with pooling operations.","Returns a new tensor with values raised to the power of …","Creates a new tensor with random values.","Calculates the reciprocals elementwise","Applies the ReLU activation function.","Applies the ReLU activation function.","Applies the ReLU activation function backward.","Applies the ReLU activation function backward.","Repeat the tensor along the given dimension.","Repeat the tensor along the given dimension.","Reshapes a tensor.","Scatter elements into a tensor.","Select tensor elements along the given dimension …","Assign the selected elements along the given dimension …","Sets the <code>require_grad</code> flag of a tensor.","Sets the <code>require_grad</code> flag of a tensor.","Gets the shape of the tensor.","Returns a new tensor with sine values.","Select tensor elements corresponding for the given ranges.","Assign the selected elements corresponding for the given …","Returns a new tensor with square root values.","Stride.","Stride.","The number of positions to slide over the input tensor in …","Subtracts two tensors.","Subtracts a scalar from a tensor.","Sum of all elements in a tensor.","Sum of all elements in a tensor along a dimension.","Swaps two dimensions of a tensor.","Returns a new tensor with tangent values.","Converts the tensor to a data structure.","Converts the tensor to a data structure.","Moves the tensor to the given device.","Converts a tensor to full precision.","","","","Transposes a tensor.","Transposes a tensor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Four-dimensional unfolding.","Four-dimensional unfolding.","","","","","","","","","","Weights gradient.","Weights gradient.","Gradient.","Gradient.","Gradient.","Gradient.","Creates a new tensor with zeros.","Creates a new tensor with zeros.","Calculate the expected output size when doing a …","Calculate the expected padding size required when applying …","Calculate the expected output size when doing a transposed …","Calculate the expected output size when doing a pooling …"],"i":[0,0,62,37,0,59,1,2,0,0,37,0,0,0,0,0,0,38,1,2,1,2,1,2,32,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,38,38,1,2,55,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,0,0,0,62,37,0,1,2,38,1,2,1,2,0,34,0,1,2,0,0,1,2,1,2,0,62,59,0,0,41,0,62,37,1,2,5,1,1,1,2,2,2,3,35,10,1,1,2,2,1,1,2,2,1,1,2,2,0,5,1,1,1,1,2,2,2,2,3,3,3,35,10,1,1,2,2,5,3,35,10,3,3,3,3,5,3,35,10,5,3,35,10,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,1,2,2,22,22,22,1,1,2,2,1,1,2,2,1,1,2,2,0,3,0,3,3,59,60,72,29,62,1,1,2,2,3,35,10,30,36,22,37,63,38,39,40,59,60,72,29,62,1,2,3,35,10,30,36,22,37,63,38,39,40,32,3,35,10,30,1,1,2,2,1,1,1,2,2,2,0,5,1,2,3,35,10,5,3,35,10,5,3,35,10,1,1,1,2,2,2,1,2,3,35,10,30,36,22,37,38,39,40,1,2,3,35,10,30,36,22,37,38,39,40,0,36,22,22,1,2,1,1,2,2,3,1,1,2,2,3,1,2,1,2,36,3,32,3,35,10,30,3,3,39,5,1,1,1,1,2,2,2,2,3,3,3,35,10,1,1,2,2,5,3,35,10,72,6,1,2,32,32,32,3,35,10,30,3,1,1,1,2,2,2,1,2,36,22,38,39,32,3,35,10,30,5,3,35,10,36,22,38,39,3,1,1,2,2,3,1,1,2,2,1,1,2,2,0,3,3,3,1,1,1,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,35,10,30,36,22,22,37,38,39,40,40,1,1,1,2,2,2,59,60,72,29,62,1,1,1,1,2,2,2,2,3,3,35,10,30,36,22,22,22,22,22,22,22,22,37,63,38,39,39,39,39,39,39,40,40,1,2,1,2,3,3,32,3,35,10,30,3,6,1,2,1,1,2,2,1,2,1,1,2,2,1,2,3,3,1,2,1,2,1,2,1,2,55,3,35,10,30,3,1,2,1,2,3,1,2,1,2,40,1,2,1,2,1,2,1,2,22,5,3,35,10,22,3,5,3,35,10,1,2,3,3,3,5,3,35,10,5,3,35,10,5,3,35,10,5,3,35,10,1,2,1,1,2,2,1,1,2,2,55,3,35,10,30,3,3,3,1,1,2,2,59,60,72,29,62,1,2,3,35,10,30,36,22,37,63,38,39,40,32,3,35,10,30,60,3,3,69,39,1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,2,2,2,1,1,1,2,2,2,3,1,1,1,1,2,2,2,2,1,1,1,1,2,2,2,2,1,2,1,2,3,1,2,1,1,2,2,1,1,2,2,1,1,2,2,3,1,1,2,2,3,1,1,2,2,0,5,3,35,10,5,3,35,10,5,3,35,10,5,3,35,10,1,2,0,0,59,5,3,35,10,5,3,35,10,3,40,5,1,1,1,1,2,2,2,2,3,35,10,5,3,35,10,5,3,35,10,1,1,1,1,1,2,2,2,2,2,5,3,35,10,5,3,35,10,5,1,1,1,1,2,2,2,2,3,35,10,5,3,35,10,5,3,35,10,1,1,1,2,2,2,1,1,1,1,1,2,2,2,2,2,0,5,1,1,1,1,2,2,2,2,3,3,3,35,10,40,1,1,2,2,1,1,2,2,5,3,35,10,34,35,10,30,1,1,2,2,5,1,1,2,2,3,3,35,10,1,1,2,2,1,1,2,2,3,36,22,63,39,60,39,1,2,3,5,3,35,10,22,3,3,0,1,2,1,1,2,2,3,1,1,1,2,2,2,95,1,2,1,1,2,2,96,1,2,3,22,40,3,3,59,59,1,1,1,2,2,2,3,1,1,1,1,2,2,2,2,1,1,2,2,32,3,35,10,30,3,32,3,35,10,30,40,1,1,1,2,2,2,63,37,5,3,35,10,5,3,35,10,5,3,35,10,1,2,36,22,1,2,1,2,0,3,32,3,35,10,30,40,36,22,1,1,1,1,2,2,2,2,1,1,2,2,3,1,1,2,2,1,1,2,2,32,3,35,10,30,32,3,35,10,30,1,1,2,2,3,3,5,1,1,1,1,2,2,2,2,3,3,3,35,10,1,1,2,2,5,3,35,10,5,1,1,2,2,3,35,10,5,3,35,10,32,3,35,10,30,40,1,1,2,2,1,1,2,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,1,2,1,2,3,1,1,1,2,2,2,32,3,35,10,30,1,1,2,2,1,2,1,1,2,2,1,2,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,35,10,30,36,22,37,38,39,40,1,1,1,2,2,2,97,41,1,2,3,22,40,1,2,1,2,1,2,1,2,1,2,32,3,35,10,30,1,1,1,2,2,2,59,60,72,29,62,1,2,3,35,10,30,36,22,37,63,38,39,40,59,60,72,29,62,1,2,3,35,10,30,36,22,37,63,38,39,40,59,60,72,29,62,1,2,3,35,10,30,36,22,37,63,38,39,40,3,3,36,22,3,3,3,3,59,60,72,29,62,1,2,3,35,10,30,36,22,37,63,38,39,40,1,2,5,3,35,10,22,3,3,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,28,28,4,4,4,4,4,28,28,28,28,28,28,28,28,28,28,4,4,4,4,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,99,99,99,99,99,99,98,98,98,98,98,98,98,98,99,99,99,99,99,99,87,86,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,87,92,91,94,93,86,81,82,83,87,92,91,94,93,86,81,82,83,98,98,98,98,98,98,98,81,82,83,81,82,83,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,98,98,98,98,81,82,83,98,98,99,99,99,99,98,98,98,98,98,81,82,83,87,92,91,94,93,86,81,82,83,98,98,98,98,98,101,101,101,101,98,98,98,98,81,82,81,82,91,93,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,87,92,91,94,93,86,81,82,83,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,98,98,98,98,98,98,98,98,98,98,98,98,98,87,92,91,94,93,86,81,82,83,98,98,91,93,81,82,83,82,0,98,98,98,101,101,101,101,98,98,98,98,98,98,98,98,98,98,98,98,98,81,82,83,98,98,98,98,98,98,98,98,98,98,81,82,83,98,98,87,92,91,94,93,86,81,82,83,87,92,91,94,93,86,81,82,83,87,92,91,94,93,86,81,82,83,99,99,87,92,91,94,93,86,81,82,83,87,86,87,92,94,86,98,98,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,[[],1],[[],2],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[-1,-2,[],[]],[2,2],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[[-1,-2],-2,[],[]],[[1,1],1],[[2,2],2],[[-1,-2],-2,[],[]],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],0,[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],[[[9,[8]]],[[3,[-1,10]]],4],[[[9,[8]]],[[3,[-1,10]]],4],[[[9,[8]],8],[[3,[-1,10]]],4],[[[9,[8]],8],[[3,[-1,10]]],4],[8],[[[3,[-1,-2]],8],[[3,[-1,10]]],4,[[5,[-1]]]],[8],[8],[8],[[[3,[-1,-2]],8],[[3,[-1,10]]],4,[[5,[-1]]]],[8],[8],[1,11],[1,12],[1,13],[1,14],[1,15],[1,1],[1,16],[1,17],[1,18],[1,19],[1,8],[1,20],[1,21],[2,14],[2,8],[2,16],[2,17],[2,11],[2,19],[2,13],[2,15],[2,20],[2,21],[2,12],[2,18],[2,2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[[22,[-1]],[22,[-1]],8],7,[[23,[16]],24,25,26]],[[[22,[-1]],[22,[-1]],16],7,[[23,[16]],24,25,26]],[[[22,[-1]],[9,[-2]]],7,27,27],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],[[1,1],1],[[-1,-2],-2,[],[]],[[-1,-2],-2,[],[]],[[2,2],2],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],0,[[[3,[-1]]],[],28],0,[[[3,[-1]],29],[],4],[[[3,[-1,30]]],[[3,[-1,30]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[31,8]],[[[31,[[3,[-1,-2]]]],8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[31,8]],[[31,8]],[[31,8]],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[1,1],[1,1],[2,2],[2,2],[-1,-2,[],[]],0,[[]],[[1,1,1],1],[[2,2,2],2],[[[3,[-1,-2]],-3,-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[1,33],[1,33],[1,33],[2,33],[2,33],[2,33],[1,1],[2,2],[[[3,[-1,-2]]],[[3,[-1,-2]]],[4,24],[[34,[-1]],24]],[35,35],[10,10],[30,30],[[[36,[-1]]],[[36,[-1]]],24],[[[22,[-1]]],[[22,[-1]]],24],[37,37],[38,38],[39,39],[[[40,[-1,-2]]],[[40,[-1,-2]]],[24,4],[24,[41,[-1]]]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[[36,[-1]]],[[36,[-2]]],27,27],[[[22,[-1]]],[[22,[-2]]],27,27],[[[22,[42]]],[[22,[-1]]],27],[[1,1],1],[[2,2],2],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[[[3,[-1]],8,8],[[3,[-1]]],4],[[],1],[[],2],[-1,[[43,[1]]],44],[-1,[[43,[2]]],44],[-1,[[43,[[36,[-2]]]]],44,45],[[[3,[-1]]],[[3,[-1]]],4],[[]],[[[3,[-1,-2]]],[],4,[[32,[-1]]]],[[]],[[]],[[]],[8,[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]]],[[46,[8]]],4,[[32,[-1]]]],0,[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],0,[-1,-2,[],27],[1,-1,27],[2,-1,27],[[],47],[[],47],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[32,[-2]]]],[39],[39],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[32,[-2]]]],[[],1],[[],-1,[]],[[],1],[[],2],[[],-1,[]],[[],2],[[1,1],42],[[2,2],42],[[[36,[-1]],[36,[-1]]],42,26],[[[22,[-1]],[22,[-1]]],42,26],[[38,38],42],[[39,39],42],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[32,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],27],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[-1,-2],42,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],0,[[[3,[-1,-2]],8,8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[[3,[-1,10]]],[[3,[-1,35]]],4],[[[3,[-1,30]]],[[3,[-1]]],4],[1,1],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[2,2],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[1,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[2,48],[[43,[7,49]]]],[[[3,[-1,-2]],48],50,[4,25],[[34,[-1]],25]],[[[3,[-1,-2]],48],50,4,[[32,[-1]]]],[[35,48],50],[[10,48],50],[[30,48],50],[[[36,[-1]],48],50,25],[[[22,[-1]],48],50,25],[[[22,[-1]],48],50,25],[[37,48],50],[[38,48],50],[[39,48],50],[[[40,[-1,-2]],48],50,[25,4],[25,[41,[-1]]]],[[[40,[-1,-2]],48],50,4,[[41,[-1]],[41,[-1]]]],[1,1],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[2,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,1],[13,1],[-1,[[51,[1]]],52],[-1,-1,[]],[-1,[[51,[2]]],52],[19,2],[13,2],[-1,-1,[]],[-1,-1,[]],[[[40,[-1,-2]]],[[3,[-1]]],4,[[41,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[46,[[46,[-1]]]]],[[22,[-1]]],[25,53]],[[[36,[-1]]],[[22,[-1]]],24],[[[46,[[46,[[46,[-1]]]]]]],[[22,[-1]]],[25,53]],[[[46,[-1]]],[[22,[-1]]],[25,53]],[[[46,[[46,[[46,[[46,[-1]]]]]]]]],[[22,[-1]]],[25,53]],[[[36,[-1]]],[[22,[-1]]],[]],[[[54,[-1]]],[[22,[-1]]],[25,53]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[46,[8]]],39],[[[31,[18]]],39],[[[31,[8]]],39],[[[31,[17]]],39],[[[31,[8]]],39],[-1,-1,[]],[[[3,[-1]]],[[40,[-1,-2]]],4,[[41,[-1]]]],[-1,-1,[]],[[[46,[19]]],1],[[[46,[19]]],2],[15,1],[15,2],[[[22,[42]]],[[3,[-1,30]]],4],[[[22,[42]]],[[3,[-1,30]]],4],[22],[-1,[[3,[-2,-3]]],[[23,[22]]],4,[[32,[-2]]]],[22],[22],[22],[-1,[[3,[-2,-3]]],[[23,[22]]],4,[[32,[-2]]]],[-1,-2,52,[]],[-1,1,52],[-1,2,52],[20,1],[20,[[51,[1]]]],[20,2],[20,[[51,[2]]]],[20,1],[20,2],[16,[[51,[1]]]],[16,1],[16,2],[16,[[51,[2]]]],[16,1],[16,2],[-1,[[3,[-2]]],[[23,[[22,[20]]]]],4],[3,[[3,[-1]]],4],[11,[[51,[1]]]],[11,[[51,[2]]]],[21,[[51,[1]]]],[21,[[51,[2]]]],[17,[[51,[1]]]],[17,[[51,[2]]]],[13,[[51,[1]]]],[13,[[51,[2]]]],[[]],[3,[[3,[-1,-2]]],28,[[55,[-1]]]],[[]],[[]],[[]],[-1,[[3,[-2,10]]],[[23,[[22,[21]]]]],4],[[[46,[19]]],1],[[[46,[19]]],2],[[[46,[19]]],1],[[[46,[19]]],2],[[],[[3,[-1,-2]]],4,[[32,[-1]]]],[47,[[43,[1,56]]]],[47,[[43,[2,56]]]],[[47,14],[[43,[1]]]],[[47,14],[[43,[2]]]],[[[3,[-1]]],[[40,[-1,-2]]],4,[[41,[-1]]]],[15,[[51,[1]]]],[15,[[51,[2]]]],[14,[[51,[1]]]],[14,[[51,[2]]]],[18,[[51,[1]]]],[18,[[51,[2]]]],[19,[[51,[1]]]],[19,[[51,[2]]]],[[[22,[8]]],[[22,[-1]]],57],[[39,-1],[],6],[[-1,-2],[[3,[-3,-4]]],[[23,[39]]],6,4,[[5,[-3]]]],[[39,-1],[],6],[[39,-1],[],6],[[39,-1],[[22,[-1]]],[27,25]],[[-1,-2],[[3,[-3,-4]]],[[23,[39]]],6,4,[[5,[-3]]]],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[1,1],42],[[2,2],42],[[[3,[-1]]],[[51,[3]]],28],[[[3,[-1]]],[[51,[3]]],28],[[[3,[-1]],3],7,28],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[1,1],42],[[2,2],42],[[-1,-2],-2,[],[]],[[1,1],1],[[-1,-2],-2,[],[]],[[2,2],2],[[],1],[[],1],[[],2],[[],2],[[]],[[[3,[-1,-2]]],3,28,[[55,[-1]]]],[[]],[[]],[[]],[[[3,[-1]],-2],7,4,58],[[[3,[-1,30]]],[[3,[-1,10]]],4],[[[3,[-1]]],[[3,[-1,10]]],4],[1,[[7,[18,11,13]]]],[1,[[7,[18,11,13]]]],[2,[[7,[18,11,13]]]],[2,[[7,[18,11,13]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[59,[22]]]],[[[3,[-1,-2]]],22,4,[[32,[-1]]]],[[],[[59,[22]]]],[[],[[59,[22]]]],[[],[[59,[22]]]],[-1,-2,[],[]],[[[3,[-1,-2]]],[],4,[[32,[-1]]]],[[[3,[-1,-2]]],[],4,[[5,[-1]]]],[[-1,[3,[-2,-3]]],39,[],4,[[32,[-2]]]],[[39,[3,[-1,-2]]],39,4,[[32,[-1]]]],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[[[3,[-1]]],42,4],[1,42],[1,42],[-1,42,[]],[1,42],[2,42],[-1,42,[]],[2,42],[2,42],[-1,42,[]],[1,42],[1,42],[1,42],[2,42],[2,42],[2,42],[-1,42,[]],[-1,42,[]],[-1,42,[]],[1,42],[2,42],[[[3,[-1,-2]],8],[[60,[-1,-2]]],4,[[32,[-1]]]],[[1,1],42],[[2,2],42],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[1,1],1],[[-1,-2],-2,[],[]],[[2,2],2],[[-1,-2],-2,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],0,[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,30]]],4,[[5,[-1]]]],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],[]],[[[3,[-1,-2]],-3],[[3,[-1,30]]],4,[[5,[-1]]],6],[[],[[3,[-1,30]]],4],[[],[[3,[-1,30]]],4],[[1,1],42],[[2,2],42],0,0,[[[59,[-1]],-2],[[59,[-3]]],61,[58,61],61],[[[3,[-1,30]]],[],[]],[[[3,[-1,-2]],[3,[-1,30]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[[3,[-1,30]]],[],4],[[[3,[-1,30]]],[],4],[[[3,[-1,30]]],[],[]],[[[3,[-1,-2]],[3,[-1,30]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,30]]],[],4],[[[3,[-1,30]]],[],4],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[[40,[-1,-2]],[40,[-1,-3]]],[[40,[-1,-4]]],4,[[41,[-1]]],[[41,[-1]]],[[41,[-1]]]],[[]],[[-1,-2],-2,[],[]],[[1,1],1],[[1,1],1],[[1,1],1],[[-1,-2],-2,[],[]],[[2,2],2],[[2,2],2],[[2,2],2],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[8,7],[[[3,[-1,-2]],8],[[7,[[3,[-1,-2]],[3,[-1,10]]]]],4,[[5,[-1]]]],[8,7],[8,7],[[],1],[[],-1,[]],[[],1],[[],-1,[]],[[],1],[[],2],[[],2],[[],-1,[]],[[],-1,[]],[[],2],[[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[[]],[[1,1],1],[[-1,-2],-2,[],[]],[[1,1],1],[[1,1],1],[[2,2],2],[[2,2],2],[[-1,-2],-2,[],[]],[[2,2],2],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[8,7],[[[3,[-1,-2]],8],[[7,[[3,[-1,-2]],[3,[-1,10]]]]],4,[[5,[-1]]]],[8,7],[8,7],[[],-1,[]],[[],1],[[],1],[[],-1,[]],[[],2],[[],2],[[],1],[[],-1,[]],[[],1],[[],-1,[]],[[],1],[[],-1,[]],[[],2],[[],2],[[],-1,[]],[[],2],0,[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[]],[[]],[[[40,[-1,-2]],[40,[-1,-2]]],[[40,[-1,-2]]],4,[[41,[-1]]]],[[1,1,1],1],[[-1,-2,-2],-2,[],[]],[[2,2,2],2],[[-1,-2,-2],-2,[],[]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],[[],47],[[],47],[[],47],[[],47],[[],1],[[],1],[[],2],[[],2],[[]],[1],[1],[2],[2],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[[],1],[[],1],[[],2],[[],2],[[],1],[[],1],[[],2],[[],2],[[],[[3,[-1,-2]]],4,[[34,[-1]]]],[[[31,[-1]],[31,[8]]],[[36,[-1]]],[]],[[[31,[-1]],39],[[22,[-1]]],[]],[[[62,[-1]],-2],[[63,[-1,-2]]],64,65],[[[46,[8]]],39],[[[60,[-1,-2]]],51,4,[[32,[-1]]]],[39,8],[[],1],[[],2],[[8,8],[[3,[-1]]],4],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[39],[39],[39,[[22,[-1]]],[27,25]],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[[[3,[-1]]],[[3,[-1]]],4],0,[[1,1],[[51,[66]]]],[[2,2],[[51,[66]]]],[[1,1],1],[[-1,-2],-2,[],[]],[[2,2],2],[[-1,-2],-2,[],[]],[[[3,[-1]],20],[[3,[-1]]],4],[[1,21],1],[[1,21],1],[[-1,21],-2,[],[]],[[2,21],2],[[2,21],2],[[-1,21],-2,[],[]],[[],38],[[],38],[[],38],[-1,1,67],[-1,1,67],[-1,2,67],[-1,2,67],[[37,-1],-2,65,68],[[37,-1],1,65],[[37,-1],2,65],[[-1,37],[[3,[-2]]],[[23,[39]]],4],[[39,37,-1],[[22,[-2]]],65,27],[[-1,37],[[40,[-2,-3]]],[[23,[39]]],4,[[41,[-2]]]],[[-1,37],[[3,[-2]]],[[23,[39]]],4],[[[3,[-1]],37],[[3,[-1]]],4],[[[59,[-1]]],-1,[]],[[[59,[-1]]],[[51,[-1]]],[]],[1,1],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[[8,8]],[[[3,[-1,-2]],8,8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[8,8]],[[8,8]],[[8,8]],[[[3,[-1]]],[[3,[-1]]],4],[39],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[32,[-1]]],69],[39],[39],[39],[[[40,[-1,-2]],-3,-4],[[40,[-1,-4]]],4,[[41,[-1]]],[[23,[39]]],[[41,[-1]]]],[1,1],[1,1],[-1,-2,[],[]],[2,2],[2,2],[-1,-2,[],[]],[[[63,[-1,-2]]],-1,[64,27],65],[[37,-1],[[63,[-2,-1]]],65,[64,27]],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],[]],[[[3,[-1,-2]],8,[3,[-1,10]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[8,[3,[-1,10]]],[],4],[[8,[3,[-1,10]]],[],4],[[1,-1],43,70],[[2,-1],43,70],[[[36,[-1]],-2],43,71,70],[[[22,[-1]]],[[36,[-1]]],[25,53]],[[1,-1],43,70],[[2,-1],43,70],[[1,-1],43,70],[[2,-1],43,70],[72,7],[[[3,[-1]],42],[[3,[-1]]],4],[[],39],[[[3,[-1,-2]]],39,4,[[32,[-1]]]],[[],39],[[],39],[[],39],[[[40,[-1,-2]]],39,4,[[41,[-1]]]],0,0,[-1,-2,[],[]],[1,1],[1,1],[1,1],[2,2],[2,2],[-1,-2,[],[]],[2,2],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[[3,[-1]]],[[3,[-1]]],4],[1,[[7,[1,1]]]],[-1,[[7,[-2,-2]]],[],[]],[-1,[[7,[-2,-2]]],[],[]],[2,[[7,[2,2]]]],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[[[46,[[9,[8]]]]]],[[[3,[-1,-2]],[46,[[9,[8]]]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[3,[-1,-2]],[46,[[9,[8]]]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[[[46,[[9,[8]]]]]],[-1,-2,[],[]],[1,1],[2,2],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[[[3,[-1,-2]],[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[[1,1],7],[[1,1],7],[[2,2],7],[[2,2],7],[-1,[],6],[[[3,[-1,-2]],-3],[[3,[-1,-2]]],4,[[5,[-1]]],6],[-1,[],6],[-1,[],6],[[]],[-1,1,67],[-1,1,67],[-1,2,67],[-1,2,67],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[5,[-1]]]],[[]],[[]],[8],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[5,[-1]]]],[8],[8],[[8,8]],[[[3,[-1,-2]],8,8],[[3,[-1,-2]]],4,[[32,[-1]]]],[[8,8]],[[8,8]],[[8,8]],[[[40,[-1,-2]]],[[40,[-1,-3]]],4,[[41,[-1]]],[[41,[-1]]]],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[-1,-2,[],[]],[[[3,[-1]]],[[3,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[46,[19]]]],[2,[[46,[19]]]],[1,15],[2,15],[[[3,[-1,-2]]],22,4,[[32,[-1]]]],[-1,-2,[],[]],[1,1],[1,1],[2,2],[2,2],[-1,-2,[],[]],[[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[]],[[]],[[]],[1,20],[1,[[51,[20]]]],[2,20],[2,[[51,[20]]]],[1,20],[2,20],[1,[[51,[16]]]],[1,16],[2,[[51,[16]]]],[2,16],[1,16],[2,16],[[[3,[-1]]],3,4],[1,[[51,[11]]]],[2,[[51,[11]]]],[1,[[51,[21]]]],[2,[[51,[21]]]],[1,[[51,[17]]]],[2,[[51,[17]]]],[1,[[51,[13]]]],[2,[[51,[13]]]],[1,[[46,[19]]]],[2,[[46,[19]]]],[1,[[46,[19]]]],[2,[[46,[19]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[1,1],[-1,-2,[],[]],[2,2],[2,2],[[],73],[[],73],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[-1,73,[]],[1,[[51,[15]]]],[2,[[51,[15]]]],[1,[[51,[14]]]],[2,[[51,[14]]]],[1,[[51,[18]]]],[2,[[51,[18]]]],[1,[[51,[19]]]],[2,[[51,[19]]]],[[1,1],66],[[2,2],66],[[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[]],[[]],[[]],[1,1],[1,1],[-1,-2,[],[]],[2,2],[2,2],[-1,-2,[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[[[3,[-1,-2]]],[[3,[-1,-2]]],4,[[32,[-1]]]],[[[3,[-1,-2]],8],[[3,[-1,-2]]],4,[[32,[-1]]]],0,0,[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]],8],[[7,[[3,[-1]],[3,[-1]]]]],4],[[[3,[-1]],8],[[7,[[3,[-1]],[3,[-1]]]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[[],2],[39],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[39],[39],[-1,[[22,[-2]]],[[23,[39]]],[27,25]],[-1,[[3,[-2,-3]]],[[23,[39]]],4,[[5,[-2]]]],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]]],[[3,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,[[],42],[[],42],[[[75,[-1]]],[],[]],[76,[[76,[-1]]],[]],[[[76,[-1]]],76,[]],[75,[[75,[-1]]],[]],[[[75,[-1]]],[[51,[75]]],[]],[[[75,[-1]]],[[51,[75]]],[]],[[[75,[-1]],75],7,[]],[[[75,[-1]]],75,[]],[77,[[77,[-1]]],[]],[[[77,[-1]]],77,[]],[[],73],[18,7],[[],7],[[],7],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[78,[-1]]],[79,26,80,25]],[[[78,[-1]],48],50,25],[-1,-1,[]],[[[78,[-1]],-1],[[51,[[3,[-2]]]]],[79,26,80,25],4],[-1,-2,[],[]],[[[78,[-1]]],42,[79,26,80,25]],[[[78,[-1]]],8,[79,26,80,25]],[[],[[78,[-1]]],[79,26,80,25]],[[[78,[-1]],-1,[3,[-2]]],7,[79,26,80,25],4],[[[78,[-1]],-1],[[51,[[3,[-2]]]]],[79,26,80,25],4],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,74,[]],[-1,-2,[],[]],[[[3,[-1]],[3,[-1]]],[[3,[-1]]],4],[[[3,[-1]],8],[[3,[-1]]],4],[[[3,[-1]],[46,[8]]],[[3,[-1]]],4],[[[3,[-1]],8,8,8,42],[[3,[-1]]],4],[[[3,[-1]],[46,[8]],[46,[8]],[46,[8]],42],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],81],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],81],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],82],[[3,[-1]]],4],[[[3,[-1]],[3,[-1]],[51,[[3,[-1]]]],82],[[3,[-1]]],4],[[[3,[-1]],[3,[-1,10]]],[[3,[-1]]],4],[[[3,[-1]],8,8,8,8],[[3,[-1]]],4],[[[3,[-1]],8,8,8,8],[[7,[[3,[-1]],[3,[-1,10]]]]],4],[[[3,[-1]],[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[3,[-1]]],4],[[[3,[-1]],[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[7,[[3,[-1]],[3,[-1,10]]]]],4],[[[3,[-1]],[46,[8]],83],[[3,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[46,[8]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[9,[8]],[85,[-1]]],[[77,[-1]]],[]],[[[9,[8]],[85,[-1]]],[[77,[-1]]],[]],[[[9,[8]],8,[85,[-1]]],[[77,[-1]]],[]],[[[9,[8]],8,[85,[-1]]],[[77,[-1]]],[]],[[[75,[-1]],8],[[77,[-1]]],[]],[[[75,[-1]],8],[[77,[-1]]],[]],[[[75,[-1]],8,8,8,42],[[75,[-1]]],[]],[[[75,[-1]],8,8,8,42],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],8,8,8,42],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],8,8,8,42],[[75,[-1]]],[]],[[[75,[-1]],[46,[8]],[46,[8]],[46,[8]],42],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[46,[8]],[46,[8]],[46,[8]],42],[[75,[-1]]],[]],0,0,[[[31,[[76,[-1]]]],8],[[76,[-1]]],[]],[[[76,[-1]]],[[85,[-1]]],[]],[[39,[85,[-1]]],[[76,[-1]]],[]],[[[76,[-1]],[76,[-1]]],[[76,[-1]]],[]],[[[22,[42]],[85,[-1]]],[[76,[-1]]],[]],[[[76,[-1]]],[[59,[[22,[42]]]]],[]],[[[76,[-1]]],[[75,[-1]]],[]],[[[76,[-1]]],[[77,[-1]]],[]],[[[76,[-1]]],[[76,[-1]]],[]],[[[76,[-1]],8,8],[[76,[-1]]],[]],[[[76,[-1]],8,8],[[76,[-1]]],[]],[[[76,[-1]],39],[[76,[-1]]],[]],[[[76,[-1]]],39,[]],[[[76,[-1]],[46,[[9,[8]]]]],[[76,[-1]]],[]],[[[76,[-1]],[46,[[9,[8]]]],[76,[-1]]],[[76,[-1]]],[]],[[[76,[-1]],8,8],[[76,[-1]]],[]],[[[76,[-1]]],[[59,[[22,[42]]]]],[]],[[[76,[-1]]],[[59,[[22,[42]]]]],[]],[[[76,[-1]],[85,[-1]]],[[76,[-1]]],[]],[[[76,[-1]]],[[76,[-1]]],[]],[[[76,[-1]]],[[76,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[[75,[-1]]]],8],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[81,81],[82,82],[83,83],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],81],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],81],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],81],[[86,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],81],[[86,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],81],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],81],[[87,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],81],[[87,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],82],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],82],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],82],[[86,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],82],[[86,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],82],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],82],[[87,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]],[75,[-1]],82],[[87,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[85,[-1]]],[]],0,0,0,[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[77,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[77,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[77,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[77,[-1]]],[[75,[-1]]],[]],[[39,[85,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[76,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[81,48],50],[[82,48],50],[[83,48],50],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[22,[[84,[-1]]]],[85,[-1]]],[[75,[-1]]],[]],[[[75,[[88,[-1]]]]],[[75,[-1]]],[]],[[39,[84,[-1]],[85,[-1]]],[[75,[-1]]],[]],[[39,[84,[-1]],[85,[-1]]],[[75,[-1]]],[]],[[8,[75,[-1]],[77,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[76,[-1]]],[]],0,0,[[81,-1],7,89],[[82,-1],7,89],0,0,[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[31,[[77,[-1]]]],8],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[85,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[39,[85,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[76,[-1]]],[]],[[[22,[[90,[-1]]]],[85,[-1]]],[[77,[-1]]],[]],[[39,[90,[-1]],[85,[-1]]],[[77,[-1]]],[]],[[39,[90,[-1]],[85,[-1]]],[[77,[-1]]],[]],[[8,[77,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[76,[-1]]],[]],[[[77,[-1]]],[[59,[[22,[[90,[-1]]]]]]],[]],[[[77,[-1]]],[[75,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[76,[-1]]],[]],[[[77,[-1]],[76,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[76,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[77,[-1]],8],[[7,[[77,[-1]],[77,[-1]]]]],[]],[[[77,[-1]],8],[[7,[[77,[-1]],[77,[-1]]]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[77,[-1]],8],[[7,[[77,[-1]],[77,[-1]]]]],[]],[[[77,[-1]],8],[[7,[[77,[-1]],[77,[-1]]]]],[]],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[39,[85,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8,8],[[77,[-1]]],[]],[[[77,[-1]],8,8],[[77,[-1]]],[]],[[[77,[-1]],39],[[77,[-1]]],[]],[[8,[77,[-1]],[77,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8,[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8,[77,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],39,[]],[[[77,[-1]],[46,[[9,[8]]]]],[[77,[-1]]],[]],[[[77,[-1]],[46,[[9,[8]]]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],[90,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]],8],[[77,[-1]]],[]],[[[77,[-1]],8,8],[[77,[-1]]],[]],[[[77,[-1]]],[[59,[[22,[[90,[-1]]]]]]],[]],[[[77,[-1]]],[[59,[[22,[[90,[-1]]]]]]],[]],[[[77,[-1]],[85,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[[77,[-1]]],[[77,[-1]]],[]],[[39,[85,[-1]]],[[77,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[-1]]],[[59,[[22,[[84,[-1]]]]]]],[]],[[[75,[-1]]],[[77,[-1]]],[]],[[[75,[-1]]],42,[]],[[[75,[-1]]],42,[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[76,[-1]]],[]],[[[75,[-1]],[76,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[76,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]],8],[[7,[[75,[-1]],[77,[-1]]]]],[]],[[[75,[-1]],8],[[7,[[75,[-1]],[77,[-1]]]]],[]],[[[75,[-1]],8,8,8,8],[[75,[-1]]],[]],[[[75,[-1]],8,8,8,8],[[75,[-1]]],[]],[[[75,[-1]],8,8,8,8],[[91,[-1]]],[]],[[[75,[-1]],8,8,8,8],[[91,[-1]]],[]],[[[75,[-1]],8,8,8,8,[75,[-1]],[77,[-1]]],[[92,[-1]]],[]],[[[75,[-1]],8,8,8,8,[75,[-1]],[77,[-1]]],[[92,[-1]]],[]],[[[75,[-1]],[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[75,[-1]]],[]],[[[75,[-1]],[46,[8]],[46,[8]],[46,[8]],[46,[8]]],[[93,[-1]]],[]],[[[75,[-1]],[46,[8]],[46,[8]],[46,[8]],[46,[8]],[75,[-1]],[77,[-1]]],[[94,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]],8],[[7,[[75,[-1]],[77,[-1]]]]],[]],[[[75,[-1]],8],[[7,[[75,[-1]],[77,[-1]]]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]]],[[87,[-1]]],4],[[[75,[-1]]],[[92,[-1]]],4],[[[75,[-1]],[77,[-1]]],[[91,[-1]]],4],[[[75,[-1]]],[[94,[-1]]],4],[[[75,[-1]],[77,[-1]]],[[93,[-1]]],4],[[[75,[-1]],[75,[-1]],[51,[[75,[-1]]]]],[[86,[-1]]],4],[[[46,[8]],[46,[8]],[46,[8]],8],81],[[[46,[8]],[46,[8]],[46,[8]],[46,[8]],8],82],[[[46,[8]],[46,[8]],[46,[8]]],83],[[39,[85,[-1]]],[[75,[-1]]],[]],[[39,[85,[-1]]],[[75,[-1]]],[]],0,0,0,0,0,0,0,[[[75,[-1]],20],[[75,[-1]]],[]],[[39,37,[85,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8,8],[[75,[-1]]],[]],[[[75,[-1]],8,8],[[75,[-1]]],[]],[[[75,[-1]],39],[[75,[-1]]],[]],[[8,[75,[-1]],[77,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8,[77,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8,[77,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],42],[[75,[-1]]],[]],[[[75,[-1]],42],[[75,[-1]]],[]],[[[75,[-1]]],39,[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[46,[[9,[8]]]]],[[75,[-1]]],[]],[[[75,[-1]],[46,[[9,[8]]]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],0,0,0,[[[75,[-1]],[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],[84,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]],8],[[75,[-1]]],[]],[[[75,[-1]],8,8],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[59,[[22,[[84,[-1]]]]]]],[]],[[[75,[-1]]],[[59,[[22,[[84,[-1]]]]]]],[]],[[[75,[-1]],[85,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[[88,[-1]]]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[-1]]],[[75,[-1]]],[]],[[[75,[-1]]],[[75,[-1]]],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,[[43,[-2]]],[],[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[[[75,[-1]],[46,[8]],83],[[75,[-1]]],[]],[[[75,[-1]],[46,[8]],83],[[75,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[39,[85,[-1]]],[[75,[-1]]],[]],[[39,[85,[-1]]],[[75,[-1]]],[]],[[8,8,8,8,8],8],[[8,8,8,8],8],[[8,8,8,8,8,8],8],[[8,8,8,8,8],8]],"c":[],"p":[[3,"bf16",0],[3,"f16",0],[3,"Tensor",0],[8,"Backend",1380],[8,"Numeric",0],[8,"ElementConversion",0],[15,"tuple"],[15,"usize"],[3,"Range",1830],[3,"Int",0],[15,"i16"],[15,"isize"],[15,"i8"],[15,"u32"],[15,"u16"],[15,"f64"],[15,"i64"],[15,"u64"],[15,"u8"],[15,"f32"],[15,"i32"],[3,"Data",0],[8,"Into",1831],[8,"Clone",1832],[8,"Debug",1833],[8,"PartialEq",1834],[8,"Element",0],[8,"AutodiffBackend",1380],[3,"T",0],[3,"Bool",0],[3,"Vec",1835],[8,"BasicOps",0],[4,"FpCategory",1836],[8,"TensorKind",0],[3,"Float",0],[3,"DataSerialize",0],[4,"Distribution",0],[4,"Precision",0],[3,"Shape",0],[3,"NamedTensor",0],[8,"NamedDims",0],[15,"bool"],[4,"Result",1837],[8,"Deserializer",1838],[8,"Deserialize",1838],[15,"array"],[15,"str"],[3,"Formatter",1833],[3,"Error",1833],[6,"Result",1833],[4,"Option",1839],[8,"ToPrimitive",1840],[8,"Copy",1841],[15,"slice"],[8,"BasicAutodiffOps",0],[3,"ParseFloatError",1842],[8,"FromPrimitive",1840],[8,"FnOnce",1843],[4,"Reader",0],[3,"DimIter",0],[8,"Send",1841],[4,"DistributionSamplerKind",0],[3,"DistributionSampler",0],[8,"SampleUniform",1844],[8,"RngCore",1845],[4,"Ordering",1834],[8,"Iterator",1846],[8,"Sized",1841],[8,"ReshapeArgs",0],[8,"Serializer",1847],[8,"Serialize",1847],[3,"PrintOptions",0],[3,"String",1848],[3,"TypeId",1849],[6,"FloatTensor",1440],[6,"BoolTensor",1440],[6,"IntTensor",1440],[3,"TensorContainer",1408],[8,"Hash",1850],[8,"Eq",1834],[3,"ConvOptions",1440],[3,"ConvTransposeOptions",1440],[3,"UnfoldOptions",1440],[6,"FloatElem",1440],[6,"Device",1440],[3,"Conv1dBackward",1440],[3,"Conv2dBackward",1440],[6,"FullPrecisionBackend",1440],[8,"Hasher",1850],[6,"IntElem",1440],[3,"MaxPool1dWithIndices",1440],[3,"MaxPool1dBackward",1440],[3,"MaxPool2dWithIndices",1440],[3,"MaxPool2dBackward",1440],[8,"ElementPrecision",0],[8,"ElementRandom",0],[8,"Dim",0],[8,"TensorOps",1440],[8,"ModuleOps",1440],[8,"BoolTensorOps",1440],[8,"ActivationOps",1440],[8,"IntTensorOps",1440]]},\
"burn_tensor_testgen":{"doc":"","t":"X","n":["testgen"],"q":[[0,"burn_tensor_testgen"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"burn_train":{"doc":"A library for training neural networks using the burn …","t":"DIDDDDNDEDDIDDILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMLAMMALLLLLLLLLLLLLLLLMMALLLLKLLKKLMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDIEEIDDNDNDDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDDIQIILLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLDDIDDDDQDDDIDDSIKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLMMAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEENEIDNNNDNENNLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEINDDLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLMKLKLLLLLLLLLLLLLKLKLLLLDLLLLLLLLLLLLLLLLL","n":["ClassificationOutput","EarlyStoppingStrategy","Learner","LearnerBuilder","MetricEarlyStoppingStrategy","MultiDevicesTrainStep","NoImprovementSince","RegressionOutput","StoppingCondition","TrainEpoch","TrainOutput","TrainStep","TrainingInterrupter","ValidEpoch","ValidStep","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","checkpoint","checkpoint","clone","clone_into","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","devices","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","early_stopping","fit","from","from","from","from","from","from","from","from","from","from","grads","grads_accumulation","init","init","init","init","init","init","init","init","init","init","interrupter","into","into","into","into","into","into","into","into","into","into","item","log_to_file","logger","loss","loss","metric","metric_loggers","metric_train","metric_train_numeric","metric_valid","metric_valid_numeric","new","new","new","new","new","new","new","new","num_epochs","optimize","optimize","output","output","renderer","renderer","run","run","run_multi_device","should_stop","should_stop","should_stop","step","step","stop","targets","targets","to_owned","train","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_checkpointing_strategy","with_file_checkpointer","n_epochs","AsyncCheckpointer","Checkpointer","CheckpointerError","CheckpointingAction","CheckpointingStrategy","ComposedCheckpointingStrategy","ComposedCheckpointingStrategyBuilder","Delete","FileCheckpointer","IOError","KeepLastNCheckpoints","MetricCheckpointingStrategy","RecorderError","Save","Unknown","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","checkpointing","checkpointing","checkpointing","checkpointing","clone","clone_into","default","delete","delete","delete","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","new","new","new","new","restore","restore","restore","save","save","save","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AsyncLogger","FileLogger","FileMetricLogger","InMemoryLogger","InMemoryMetricLogger","Logger","Logger","LoggerBackend","MetricLogger","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","end_epoch","end_epoch","end_epoch","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","log","log","log","log","log","log","log","new","new","new","new","read_numeric","read_numeric","read_numeric","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","AccuracyInput","AccuracyMetric","Adaptor","CUDAMetric","CpuMemory","CpuTemperature","CpuUse","Input","LearningRateMetric","LossInput","LossMetric","Metric","MetricEntry","MetricMetadata","NAME","Numeric","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone_into","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","epoch","epoch_total","fmt","format_float","formatted","from","from","from","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","iteration","lr","name","new","new","new","new","new","new","new","new","new","new","progress","serialize","state","store","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","update","update","update","update","update","update","update","update","value","value","value","value","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_pad_token","FormatOptions","NumericMetricState","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","init","init","into","into","new","new","precision","reset","try_from","try_from","try_into","try_into","type_id","type_id","unit","upcast","upcast","update","value","vzip","vzip","Aggregate","Direction","EndEpoch","Event","EventStore","EventStoreClient","Highest","Lowest","Mean","MetricsUpdate","MetricsUpdate","Split","Train","Valid","adapt","adapt","adapt","adapt","adapt","adapt","add_event","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","drop","entries","entries_numeric","eq","equivalent","equivalent","equivalent","find_epoch","find_epoch","find_metric","find_metric","fmt","from","from","from","from","from","from","hash","init","init","init","init","init","init","into","into","into","into","into","into","new","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","Generic","MetricState","MetricsRenderer","Numeric","SelectedMetricsRenderer","TrainingProgress","adapt","adapt","adapt","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","drop","epoch","epoch_total","fmt","fmt","from","from","from","init","init","init","into","into","into","iteration","new","none","progress","render_train","render_train","render_valid","render_valid","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","update_train","update_train","update_valid","update_valid","vzip","vzip","vzip","MultiDevicesTrainStep","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","init","into","new","step","try_from","try_into","type_id","upcast","vzip"],"q":[[0,"burn_train"],[221,"burn_train::StoppingCondition"],[222,"burn_train::checkpoint"],[385,"burn_train::logger"],[490,"burn_train::metric"],[728,"burn_train::metric::state"],[768,"burn_train::metric::store"],[899,"burn_train::renderer"],[967,"burn_train::train"],[985,"burn_tensor::tensor::backend::base"],[986,"alloc::boxed"],[987,"burn_tensor::tensor::backend::base"],[988,"core::marker"],[989,"core::fmt"],[990,"burn_core::optim::base"],[991,"burn_core::lr_scheduler::base"],[992,"alloc::vec"],[993,"burn_core::data::dataloader::base"],[994,"alloc::sync"],[995,"burn_tensor::tensor::api::base"],[996,"burn_tensor::tensor::api::kind"],[997,"core::option"],[998,"burn_core::optim::grads"],[999,"core::result"],[1000,"core::any"],[1001,"burn_core::record::file"],[1002,"burn_core::record::base"],[1003,"core::fmt"],[1004,"core::default"],[1005,"core::hash"],[1006,"core::clone"],[1007,"burn_core::data::dataloader::base"]],"d":["Simple classification output adapted for multiple metrics.","A strategy that checks if the training should be stopped.","Learner struct encapsulating all components necessary to …","Struct to configure and create a learner.","An early stopping strategy based on a metrics collected …","Multi devices train step.","When no improvement has happened since the given number of …","Simple regression output adapted for multiple metrics.","The condition that early stopping strategies should follow.","A training epoch.","A training output.","Trait to be implemented for training models.","A handle that allows aborting the training process early.","A validation epoch.","Trait to be implemented for validating models.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create the learner from a model and an optimizer. The …","The checkpoint module.","The epoch from which the training must resume.","","","","","","","","","","","","","","","","","","","","","","","","Run the training loop on multiple devices.","","","","","","","","","","","","","","","","","","","","","Register an early stopping strategy to stop the training …","Fits the model.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The gradients.","Enable gradients accumulation.","","","","","","","","","","","Provides a handle that can be used to interrupt training.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The item.","By default, Rust logs are captured and written into …","The logger module.","The loss.","The loss.","The metric module.","Replace the default metric loggers with the provided ones.","Register a training metric.","Register a numeric training metric.","Register a validation metric.","Register a numeric validation metric.","Creates a new learner builder.","Create a new early stopping strategy based on a metrics …","Creates a new training output.","Create a new instance.","Constructs a new <code>ClassificationOutput</code>.","Constructs a new <code>ValidEpoch</code>.","Constructs a new <code>TrainEpoch</code>.","Constructs a new <code>RegressionOutput</code>.","The number of epochs the training should last.","Optimize the current module with the provided gradients …","Optimize the current module with the provided gradients …","The output.","The output.","Renderer modules to display metrics and training …","Replace the default CLI renderer with a custom one.","Runs the validation epoch.","Runs the training epoch.","Runs the training epoch on multiple devices.","Update its current state and returns if the training …","","True if .stop() has been called.","Runs the training step, which executes the forward and …","Runs a validation step.","Notify the learner that it should stop.","The targets.","The targets.","","The trainer module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the checkpointing_strategy.","Register a checkpointer that will save the optimizer, the …","The number of epochs allowed to worsen before it gets …","Async checkpointer.","The trait for checkpointer.","The error type for checkpointer.","Action to be taken by a checkpointer.","Define when checkpoint should be saved and deleted.","Compose multiple checkpointing strategy and only delete …","Help building a checkpointing strategy by combining …","Delete the given epoch.","The file checkpointer.","IO error.","Keep the last N checkpoints.","Keep the best checkpoint based on a metric.","Recorder error.","Save the current record.","Other errors.","","","","","","","","","Add a new checkpointing strategy.","","","","","","","","","","","","","","","","","Create a new composed checkpointing strategy.","Create a new builder which help compose multiple …","Based on the epoch, determine if the checkpoint should be …","","","","","","","Delete the record at the given epoch if present.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new async checkpointer.","Creates a new file checkpointer.","Create a new metric strategy.","Constructs a new <code>KeepLastNCheckpoints</code>.","Restore the record.","","","Save the record.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Async logger.","File logger.","The file metric logger.","In memory logger.","In memory metric logger, useful when testing and debugging.","The logger trait.","The logger type.","The logger backend trait.","Metric logger.","","","","","","","","","","","","","","","","Create a new logger.","","","","","","","","","","","","","","","","","","","","","","","","Logs an epoch.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Logs an item.","Logs an item.","","","","","","Create a new async logger.","Create a new file logger.","Create a new file metric logger.","Create a new in-memory metric logger.","Read the logs for an epoch.","","","","","","","","","","","","","","","","","","","","","","","","","","","","The accuracy metric input type.","The accuracy metric.","Adaptor are used to transform types so that they can be …","Track basic cuda infos.","Memory information","CPU Temperature in celsius degrees","General CPU Usage metric","The input type of the metric.","Track the learning rate across iterations.","The loss metric input type.","The loss metric.","Metric trait.","Data type that contains the current state of a metric at a …","Metric metadata that can be used when computing metrics.","The name of the metric.","Declare a metric to be numeric.","Adapt the type to be passed to a metric.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clear the metric state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The current epoch.","The total number of epochs.","","Format a float with the given precision. Will use …","The string to be displayed.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The current iteration.","The current learning rate.","The name of the metric.","Creates a new CPU temp metric","Creates a new CPU metric","Creates a new metric for CUDA.","Creates a new learning rate metric.","Creates a new memory metric","Creates the metric.","Constructs a new <code>AccuracyInput</code>.","Constructs a new <code>MetricEntry</code>.","Create the metric.","Constructs a new <code>LossInput</code>.","The current progress.","The string to be saved.","State module.","Module responsible to save and exposes data collected …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the metric state and returns the current metric …","","","","","","","","Returns the numeric value of the metric.","","","","","","","","","","","","","","","","","","Sets the pad token.","Formatting options for the numeric metric state.","Useful utility to implement numeric metrics.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new numeric metric state.","Create the formatting options with a name.","Specify the floating point precision.","Reset the state.","","","","","","","Specify the metric unit.","","","Update the state.","","","","How to aggregate the metric.","The direction of the query.","Signal the end of an epoch.","Event happening during the training/validation process.","Defines how training and validation events are collected …","Type that allows to communicate with an event store.","Higher is better.","Lower is better.","Compute the average.","Contains all metric information.","Signal that metrics have been updated.","The split to use.","The training split.","The validation split.","","","","","","","Collect a training/validation event.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metrics information related to non-numeric metrics.","Metrics information related to numeric metrics.","","","","","Find the epoch following the given criteria from the …","Find the epoch following the given criteria from the …","Find the metric value for the current epoch following the …","Find the metric value for the current epoch following the …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>MetricsUpdate</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A generic metric.","The state of a metric.","Trait for rendering metrics.","A numeric metric.","The terminal UI metrics renderer.","Training progress.","","","","","","","","","","","","","","","","","","","","","","","The epoch.","The total number of epochs.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The iteration.","Create a new terminal UI renderer.","Creates a new empty training progress.","The progress.","Renders the training progress.","","Renders the validation progress.","","","","","","","","","","","","","","Updates the training metric state.","","Updates the validation metric state.","","","","","Multi devices train step.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new multi devices train step.","Collect outputs from workers for one step.","","","","",""],"i":[0,0,0,0,0,0,34,0,0,0,0,0,0,0,0,11,7,34,35,36,20,2,2,2,39,41,6,6,11,7,34,35,36,20,2,39,41,6,11,7,34,35,36,20,2,39,41,6,7,0,7,20,20,20,11,7,34,35,36,20,2,39,41,6,11,7,34,35,36,20,2,39,41,6,7,11,7,34,35,36,20,2,39,41,6,11,7,34,35,36,20,2,39,41,6,7,11,11,7,34,35,36,20,2,39,41,6,36,7,11,7,34,35,36,20,2,39,41,6,7,11,7,34,35,36,20,2,39,41,6,36,7,0,2,6,0,7,7,7,7,7,7,35,36,20,2,39,41,6,7,87,87,2,6,0,7,39,41,41,22,35,20,87,90,20,2,6,20,0,11,7,34,35,36,20,2,39,41,6,11,7,34,35,36,20,2,39,41,6,11,7,34,35,36,20,2,39,41,6,11,7,34,35,36,20,2,39,41,6,11,7,34,35,36,20,2,39,41,6,7,7,91,0,0,0,0,0,0,0,51,0,54,0,0,54,51,54,8,56,50,52,54,51,49,53,49,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,49,50,9,50,52,53,51,51,49,59,8,56,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,8,8,56,50,52,54,51,49,53,51,54,51,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,8,56,52,53,59,8,56,59,8,56,51,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,8,56,50,52,54,51,49,53,0,0,0,0,0,0,92,0,0,62,65,63,60,61,62,65,63,60,61,62,65,63,60,61,92,60,61,62,65,63,60,61,62,65,63,60,61,62,65,63,60,61,62,62,65,63,60,61,26,63,61,62,65,63,60,61,62,65,63,60,61,62,65,63,60,61,66,26,62,65,63,60,61,62,65,63,61,26,63,61,62,65,63,60,61,62,65,63,60,61,62,65,63,60,61,62,65,63,60,61,62,65,63,60,61,0,0,0,0,0,0,0,28,0,0,0,0,0,0,28,0,27,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,28,68,69,70,71,72,73,74,64,64,68,69,70,71,72,73,74,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,76,64,0,64,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,76,64,68,69,70,71,72,73,3,64,74,5,76,64,0,0,64,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,76,68,69,70,71,72,73,3,64,74,5,28,68,69,70,71,72,73,74,29,68,69,71,72,73,74,76,68,69,70,71,72,73,3,64,74,5,73,0,0,77,78,77,78,77,78,77,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,78,77,77,78,77,78,77,78,78,77,78,77,77,77,78,0,0,79,0,0,0,32,32,31,0,79,0,33,33,79,45,80,31,33,32,93,79,45,80,31,33,32,79,45,80,31,33,32,80,31,33,32,80,31,33,32,79,45,80,31,33,32,79,45,80,31,33,32,79,45,80,31,33,32,79,45,45,80,31,33,32,80,80,31,31,31,31,93,45,93,45,31,79,45,80,31,33,32,31,79,45,80,31,33,32,79,45,80,31,33,32,80,80,31,33,32,79,45,80,31,33,32,79,45,80,31,33,32,79,45,80,31,33,32,79,45,80,31,33,32,79,45,80,31,33,32,83,0,0,83,0,0,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,82,83,84,84,84,83,84,82,83,84,82,83,84,82,83,84,84,82,84,84,44,82,44,82,82,83,84,82,83,84,82,83,84,82,83,84,44,82,44,82,82,83,84,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[2,[-1]]],[[3,[-1]]],4],[[[2,[-1]]],[[5,[-1]]],4],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[[6,[-1]]],[[5,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1,-2,-3,-4,-5,-6]],-4,-5,-6],[[11,[[0,[-1,-6,-4,-5,8,8,8,[0,[-2,-3]],[10,[9]]]]]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],0,[[[7,[-1,-2,-3,-4,-5,-6]],19],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],[20,20],[[-1,-2],1,[],[]],[[],20],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[[[7,[-1,-2,-3,-4,-5,-6]],21],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[[[7,[-1,-2,-3,-4,-5,-6]],-7],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,22],[[[11,[-1]],[24,[23]],[24,[23]]],[],0],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[7,[-1,-2,-3,-4,-5,-6]],19],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[[7,[-1,-2,-3,-4,-5,-6]]],20,12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[7,[-1,-2,-3,-4,-5,-6]],25],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],0,0,0,0,[[[7,[-1,-2,-3,-4,-5,-6]],-7,-8],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,26,26],[[[7,[-1,-2,-3,-4,-5,-6]],-7],[[7,[-1,-2,-3,-4,-5,-6]]],12,[27,13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,28],[[[7,[-1,-2,-3,-4,-5,-6]],-7],[[7,[-1,-2,-3,-4,-5,-6]]],12,[27,13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,[28,29]],[[[7,[-1,-2,-3,-4,-5,-6]],-7],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[27,13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,28],[[[7,[-1,-2,-3,-4,-5,-6]],-7],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[27,13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,[28,29]],[30,[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],[[31,32,33,34],35],[[-2,-3],[[36,[-3]]],12,[[15,[-1]]],[]],[[],20],[[[37,[-1]],[37,[-1]],[37,[-1,38]]],[[2,[-1]]],4],[[[24,[23]],19,19],[[39,[-1]]],[]],[[[24,[23]],19,19,[40,[19]]],[[41,[-1]]],[]],[[[37,[-1]],[37,[-1]],[37,[-1]]],[[6,[-1]]],4],[[[7,[-1,-2,-3,-4,-5,-6]],19],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18],[[-2,-3,42,43],-2,12,[[15,[-1]]],[[17,[-2,-1]]]],[[-2,-3,42,43],-2,12,[[15,[-1]]],[[17,[-2,-1]]]],0,0,0,[[[7,[-1,-2,-3,-4,-5,-6]],-7],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,44],[[[39,[-1]],20],1,[]],[[[41,[-1]],20],1,[]],[[[41,[-1]],21,20],1,13],[[-1,19,45],25,[]],[[35,19,45],25],[20,25],[[-1,-2],[[36,[-3]]],[],[],[]],[[-1,-2],-3,[],[],[]],[20,1],0,0,[-1,-2,[],[]],0,[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[7,[-1,-2,-3,-4,-5,-6]],-7],1,12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,9],[[[7,[-1,-2,-3,-4,-5,-6]],-7],[[7,[-1,-2,-3,-4,-5,-6]]],12,[13,14],[13,14],[[15,[-1]],16],[[17,[-4,-1]]],18,48],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[49,-1],49,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[49,50],[[],49],[[-1,19,45],[[21,[51]]],[]],[[50,19,45],[[21,[51]]]],[[52,19,45],[[21,[51]]]],[[53,19,45],[[21,[51]]]],[51,51],[[-1,-2],1,[],[]],[[],49],[[-1,19],[[46,[1,54]]],[]],[[[8,[-1]],19],[[46,[1,54]]],55],[[[56,[-1]],19],[[46,[1,54]]],48],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[8,[-1]]],1,[]],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[[51,51],25],[[54,57],58],[[51,57],58],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-2,[[8,[-1]]],55,[[59,[-1]],13]],[[-1,30,30],[[56,[-1]]],[]],[[31,32,33],52],[19,53],[[-1,19],[[46,[-2,54]]],[],[]],[[[8,[-1]],19],[[46,[-1,54]]],55],[[[56,[-1]],19],[[46,[-2,54]]],48,55],[[-1,19,-2],[[46,[1,54]]],[],[]],[[[8,[-1]],19,-1],[[46,[1,54]]],55],[[[56,[-1]],19,-2],[[46,[1,54]]],48,55],[-1,-2,[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,19],[],[]],[[],60],[[],61],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,1],[[[62,[-1]]],1,[]],[19,1],[19,1],[19,1],[19,1],[[-1,19],1,[]],[[63,19],1],[[61,19],1],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],19],[[],19],[[],19],[[],19],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],1,[],[]],[[-1,64],1,[]],[[[62,[-1]],-1],1,13],[[65,-1],1,16],[[63,64],1],[[60,-1],1,16],[[61,64],1],[-2,[[62,[-1]]],[13,14],[[66,[-1]]]],[30,65],[30,63],[[],61],[[-1,30,19],[[46,[[21,[42]],67]]],[]],[[63,30,19],[[46,[[21,[42]],67]]]],[[61,30,19],[[46,[[21,[42]],67]]]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,1,[]],[68,1],[69,1],[70,1],[71,1],[72,1],[[[73,[-1]]],1,4],[[[74,[-1]]],1,4],[64,64],[[-1,-2],1,[],[]],[[],68],[[],69],[[],70],[[],71],[[],72],[[],[[73,[-1]]],[75,4]],[[],[[74,[-1]]],[75,4]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],0,0,[[64,57],58],[[42,19],67],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[],68],[[],69],[[],70],[[],71],[[],72],[[],[[73,[-1]]],4],[[[37,[-1]],[37,[-1,38]]],[[3,[-1]]],4],[[67,67,67],64],[[],[[74,[-1]]],4],[[[37,[-1]]],[[5,[-1]]],4],0,0,0,0,[-1,-2,[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[[-1,76],64,[]],[[68,76],64],[[69,76],64],[[70,1,76],64],[[71,1,76],64],[[72,76],64],[[[73,[-1]],[3,[-1]],76],64,4],[[[74,[-1]],76],64,4],[-1,42,[]],[68,42],[69,42],[71,42],[72,42],[[[73,[-1]]],42,4],[[[74,[-1]]],42,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[73,[-1]],19],[[73,[-1]]],4],0,0,[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],77],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,1],[19,1],[-1,-1,[]],[-1,-1,[]],[[],19],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[[],77],[30,78],[[78,19],78],[77,1],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[[78,30],78],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[[77,42,19,78],64],[77,42],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[[-1,79,33],1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[80,80],[31,31],[33,33],[32,32],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,1],[19,1],[45,1],[19,1],[19,1],[19,1],[19,1],0,0,[[31,31],25],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,30,31,32,33],[[40,[19]]],[]],[[45,30,31,32,33],[[40,[19]]]],[[-1,30,19,31,33],[[40,[42]]],[]],[[45,30,19,31,33],[[40,[42]]]],[[31,57],58],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[31,-1],1,81],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[64]],[21,[[1,[64,42]]]]],80],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[19,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[82,1],[19,1],[19,1],[19,1],0,0,[[83,57],58],[[84,57],58],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],19],[[],19],[[],19],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[20,[40,[19]]],82],[[],84],0,[[-1,84],1,[]],[[82,84],1],[[-1,84],1,[]],[[82,84],1],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,47,[]],[-1,47,[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[-1,[[40,[-2]]],[],[]],[[-1,83],1,[]],[[82,83],1],[[-1,83],1,[]],[[82,83],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[19,-1,[]],[19,-1,[]],[-1,-2,[],[]],[19,1],[-1,-1,[]],[[],19],[-1,-2,[],[]],[85,[[86,[-1,-4,-2,-3]]],12,[13,13],13,[[15,[-1]],[87,[-2,-3]],13,88]],[[[86,[-1,-4,-2,-3]],[10,[89]],-4],[[21,[[36,[-3]]]]],12,13,13,[[15,[-1]],[87,[-2,-3]],13,88]],[-1,[[46,[-2]]],[],[]],[-1,[[46,[-2]]],[],[]],[-1,47,[]],[-1,[[40,[-2]]],[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"tuple"],[3,"ClassificationOutput",0],[3,"AccuracyInput",490],[8,"Backend",985],[3,"LossInput",490],[3,"RegressionOutput",0],[3,"LearnerBuilder",0],[3,"AsyncCheckpointer",222],[8,"CheckpointingStrategy",222],[3,"Box",986],[3,"Learner",0],[8,"AutodiffBackend",985],[8,"Send",987],[8,"Sync",987],[8,"AutodiffModule",988],[8,"Display",989],[8,"Optimizer",990],[8,"LrScheduler",991],[15,"usize"],[3,"TrainingInterrupter",0],[3,"Vec",992],[8,"EarlyStoppingStrategy",0],[8,"DataLoader",993],[3,"Arc",994],[15,"bool"],[8,"MetricLogger",385],[8,"Adaptor",490],[8,"Metric",490],[8,"Numeric",490],[15,"str"],[4,"Aggregate",768],[4,"Direction",768],[4,"Split",768],[4,"StoppingCondition",0],[3,"MetricEarlyStoppingStrategy",0],[3,"TrainOutput",0],[3,"Tensor",995],[3,"Int",996],[3,"ValidEpoch",0],[4,"Option",997],[3,"TrainEpoch",0],[15,"f64"],[3,"GradientsParams",998],[8,"MetricsRenderer",899],[3,"EventStoreClient",768],[4,"Result",999],[3,"TypeId",1000],[8,"FileRecorder",1001],[3,"ComposedCheckpointingStrategyBuilder",222],[3,"ComposedCheckpointingStrategy",222],[4,"CheckpointingAction",222],[3,"MetricCheckpointingStrategy",222],[3,"KeepLastNCheckpoints",222],[4,"CheckpointerError",222],[8,"Record",1002],[3,"FileCheckpointer",222],[3,"Formatter",989],[6,"Result",989],[8,"Checkpointer",222],[3,"InMemoryLogger",385],[3,"InMemoryMetricLogger",385],[3,"AsyncLogger",385],[3,"FileMetricLogger",385],[3,"MetricEntry",490],[3,"FileLogger",385],[8,"Logger",385],[3,"String",1003],[3,"CpuTemperature",490],[3,"CpuUse",490],[3,"CUDAMetric",490],[3,"LearningRateMetric",490],[3,"CpuMemory",490],[3,"AccuracyMetric",490],[3,"LossMetric",490],[8,"Default",1004],[3,"MetricMetadata",490],[3,"NumericMetricState",728],[3,"FormatOptions",728],[4,"Event",768],[3,"MetricsUpdate",768],[8,"Hasher",1005],[3,"SelectedMetricsRenderer",899],[4,"MetricState",899],[3,"TrainingProgress",899],[15,"slice"],[3,"MultiDevicesTrainStep",967],[8,"TrainStep",0],[8,"Clone",1006],[8,"DataLoaderIterator",993],[8,"ValidStep",0],[13,"NoImprovementSince",221],[8,"LoggerBackend",385],[8,"EventStore",768]]},\
"burn_wgpu":{"doc":"Burn WGPU Backend","t":"DNNNDDIIINDDNDDDELLLLLLLLLLKLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOOOALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAOLLLLLLLLLLLLLLLLLLLLLOLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOOOLLLLLLLLLLLLLLLLLLLDNINNGNDNEGGDEDDDLLLLLLLLLLLLLLLLLLMLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLFLLLLLLLLMMLLLLLLLLLLFLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLMMMDDDDDIDDIDDDDLFOFFOFLLLLLLLLLLLLLLLLLLLLLLFFFLALLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLFFOALLLLLLLLLLAAALKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFOFFOFFOFFOFLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFLLLLLLLLLLLLLLLLLLLALLLLAAALLLLDLLLLLFLLLLLLLFDLLLLLFLLLLLLLDLLLLLFLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFDDDDDDDFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLFFFLLLLLLLLLFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLMLLLMLLLMLLLMMLLLLLLL","n":["AutoGraphicsApi","BestAvailable","Cpu","DiscreteGpu","Dx11","Dx12","FloatElement","GraphicsApi","IntElement","IntegratedGpu","Metal","OpenGl","VirtualGpu","Vulkan","WebGpu","Wgpu","WgpuDevice","abs","ad_enabled","adaptive_avg_pool2d","adaptive_avg_pool2d_backward","add","add_scalar","argmax","argmin","avg_pool2d","avg_pool2d_backward","backend","backend","backend","backend","backend","backend","backend","backend","binary_elemwise","binary_elemwise_inplace","bool_cat","bool_device","bool_empty","bool_equal","bool_from_data","bool_into_data","bool_into_float","bool_into_int","bool_not","bool_reshape","bool_shape","bool_slice","bool_slice_assign","bool_swap_dims","bool_tensor","bool_tensor_handle","bool_to_device","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cat","clamp","clamp_max","clamp_min","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comparison","comparison_elem","comparison_elem_inplace","comparison_inplace","compute","conv2d","conv_transpose2d","cos","default","default","default","default","default","default","default","default","default","device","div","div_scalar","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","empty","eq","equal","equal_elem","equivalent","equivalent","equivalent","erf","exp","float_tensor","float_tensor_handle","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_data","from_full_precision","full","gather","greater","greater_elem","greater_equal","greater_equal_elem","hash","id","int_abs","int_add","int_add_scalar","int_argmax","int_argmin","int_cat","int_clamp","int_clamp_max","int_clamp_min","int_device","int_div","int_div_scalar","int_empty","int_equal","int_equal_elem","int_from_data","int_gather","int_greater","int_greater_elem","int_greater_equal","int_greater_equal_elem","int_into_data","int_into_float","int_lower","int_lower_elem","int_lower_equal","int_lower_equal_elem","int_mask_fill","int_mask_where","int_mean_dim","int_mul","int_mul_scalar","int_ones","int_reshape","int_scatter","int_select","int_select_assign","int_shape","int_slice","int_slice_assign","int_sub","int_sub_scalar","int_sum","int_sum_dim","int_swap_dims","int_tensor","int_tensor_handle","int_to_device","int_zeros","into","into","into","into","into","into","into","into","into","into_data","into_int","kernel","kernel_wgsl","log","log1p","lower","lower_elem","lower_equal","lower_equal_elem","mask_fill","mask_where","matmul","max_pool2d","max_pool2d_with_indices","max_pool2d_with_indices_backward","mean_dim","mul","mul_scalar","name","ones","operations","powf","random","recip","reduce_tune_ops","relu","reshape","scatter","seed","select","select_assign","shape","sin","slice","slice_assign","sqrt","sub","sub_scalar","sum","sum_dim","swap_dims","sync","tanh","tensor","to_device","to_full_precision","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary_inplace","unary_scalar","unary_scalar_inplace","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zeros","DynamicKernel","Full","Kernel","Matmul","MeanDim","Server","Slice","StaticKernel","SumDim","WgpuAutotuneKey","WgpuComputeClient","WgpuHandle","WgpuResource","WgpuResourceKind","WgpuServer","WgpuStorage","WorkGroup","alloc","as_binding","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone","clone_into","clone_into","compute_client","create","dealloc","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","empty","eq","equivalent","equivalent","equivalent","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","hash","id","id","id","init_async","into","into","into","into","into","into","into","into","kind","memory","new","new","new","new","new","new","num_invocations","offset","perform_deallocations","read","select_device","size","source","source","source","sync","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","workgroup","workgroup","workgroup","x","y","z","BinaryElemwiseInplaceRaw","BinaryElemwiseRaw","CastRaw","ContiguousRaw","DynamicKernelSettings","DynamicKernelSource","KernelSettings","SourceTemplate","StaticKernelSource","UnaryInplaceRaw","UnaryRaw","UnaryScalarInplaceRaw","UnaryScalarRaw","add_template","binary_elemwise","binary_elemwise","binary_elemwise_default","binary_elemwise_inplace","binary_elemwise_inplace","binary_elemwise_inplace_default","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_info","build_info_dyn","cast","complete","conv","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","downcast","fmt","from","from","from","from","from","from","from","from","from","from","from","id","id","into","into","into","into","into","into","into","into","into","into","into","into_contiguous","into_contiguous_dyn","kernel_wgsl","matmul","new","new","new","new","new","new","new","new","new","new","pool","prng","reduce","register","source","source","source","source","source","source","source","source","source","source","source","source","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unary","unary","unary_default","unary_inplace","unary_inplace","unary_inplace_default","unary_scalar","unary_scalar","unary_scalar_default","unary_scalar_inplace","unary_scalar_inplace","unary_scalar_inplace_default","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Conv2d","ConvTranspose2d","borrow","borrow","borrow_mut","borrow_mut","downcast","downcast","from","from","into","into","new","new","source","source","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","MatmulAutotuneKey","MatmulAutotuneOperationSet","MatmulMemCoalescingRaw","MatmulNaiveRaw","autotunables","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","downcast","downcast","downcast","downcast","eq","equivalent","equivalent","equivalent","fastest","fmt","fmt","from","from","from","from","hash","into","into","into","into","key","matmul_autotune","matmul_mem_coalescing","matmul_mem_coalescing_default","matmul_naive","matmul_naive_default","new","new","new","source","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unpadded","upcast","upcast","upcast","upcast","utils","vec4","vec4_lhs","vzip","vzip","vzip","vzip","MatmulTiling2DUnpaddedRaw","borrow","borrow_mut","downcast","from","into","matmul_tiling_2d_unpadded","new","source","try_from","try_into","type_id","upcast","vzip","init_matmul_output","MatmulTiling2Dvec4Raw","borrow","borrow_mut","downcast","from","into","matmul_tiling_2d_vec4","new","source","try_from","try_into","type_id","upcast","vzip","MatmulTiling2DVec4LhsRaw","borrow","borrow_mut","downcast","from","into","matmul_tiling_2d_vec4_lhs","new","source","try_from","try_into","type_id","upcast","vzip","AvgPool2dBackwardRaw","AvgPool2dRaw","MaxPool2d","MaxPool2dWithIndices","MaxPool2dWithIndicesBackward","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","downcast","downcast","downcast","downcast","downcast","from","from","from","from","from","into","into","into","into","into","new","new","new","new","new","source","source","source","source","source","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","random_bernoulli","random_like_uniform","random_normal","random_uniform","MeanDimAutotuneOperationSet","RecursiveSumRaw","ReduceAutotuneKey","ReductionArgsRaw","ReductionDimRaw","ReductionDimSharedMemoryRaw","SumDimAutotuneOperationSet","argmax","argmin","autotunables","autotunables","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","downcast","downcast","downcast","downcast","downcast","downcast","downcast","eq","equivalent","equivalent","equivalent","fastest","fastest","fmt","fmt","from","from","from","from","from","from","from","hash","init_reduce_output","into","into","into","into","into","into","into","key","key","mean_dim","mean_dim_autotune","mean_dim_shared_memory","new","new","new","new","new","source","source","source","source","sum","sum_dim","sum_dim_autotune","sum_dim_shared_memory","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","upcast","vzip","vzip","vzip","vzip","vzip","vzip","vzip","WgpuTensor","assert_is_on_same_device","borrow","borrow_mut","can_mut","client","clone","clone_into","copy","device","downcast","fmt","from","handle","into","is_contiguous","new","shape","strides","to_client","to_owned","try_from","try_into","type_id","upcast","vzip"],"q":[[0,"burn_wgpu"],[326,"burn_wgpu::compute"],[479,"burn_wgpu::kernel"],[659,"burn_wgpu::kernel::conv"],[685,"burn_wgpu::kernel::matmul"],[757,"burn_wgpu::kernel::matmul::unpadded"],[771,"burn_wgpu::kernel::matmul::utils"],[772,"burn_wgpu::kernel::matmul::vec4"],[786,"burn_wgpu::kernel::matmul::vec4_lhs"],[800,"burn_wgpu::kernel::pool"],[865,"burn_wgpu::kernel::prng"],[869,"burn_wgpu::kernel::reduce"],[982,"burn_wgpu::tensor"],[1008,"burn_tensor::tensor::ops::alias"],[1009,"burn_tensor::tensor::ops::alias"],[1010,"burn_tensor::tensor::ops::alias"],[1011,"burn_tensor::tensor::ops::alias"],[1012,"burn_tensor::tensor::data"],[1013,"burn_common::reader"],[1014,"core::ops::range"],[1015,"core::clone"],[1016,"core::option"],[1017,"burn_tensor::tensor::ops::modules::base"],[1018,"burn_tensor::tensor::ops::modules::base"],[1019,"core::fmt"],[1020,"core::fmt"],[1021,"burn_fusion::backend"],[1022,"burn_tensor::tensor::ops::alias"],[1023,"burn_fusion::backend"],[1024,"burn_tensor::tensor::data"],[1025,"core::any"],[1026,"burn_compute::storage::base"],[1027,"wgpu"],[1028,"burn_compute::channel::mutex"],[1029,"burn_compute::client"],[1030,"burn_compute::server"],[1031,"burn_compute::memory_management::base"],[1032,"burn_compute::storage::base"],[1033,"wgpu"],[1034,"burn_compute::tune::operation"],[1035,"burn_tensor::tensor::element"]],"d":["Automatic graphics API based on OS.","The best available device found with the current graphics …","CPU.","Discrete GPU with the given index. The index is the index …","DirectX 11 graphics API.","DirectX 12 graphics API.","The float element type for the wgpu backend.","The basic trait to specify which graphics API to use as …","The int element type for the wgpu backend.","Integrated GPU with the given index. The index is the …","Metal graphics API.","OpenGL graphics API.","Virtual GPU with the given index. The index is the index …","Vulkan graphics API.","WebGpu graphics API.","Tensor backend that uses the wgpu crate for executing GPU …","The device struct when using the <code>wgpu</code> backend.","","","","","","","","","","","The wgpu backend.","","","","","","","","Creates a binary elementwise kernel.","Creates a binary elementwise inplace kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a comparison kernel.","Creates a comparison elementwise kernel.","Creates a comparison elementwise inplace kernel.","Creates a comparison inplace kernel.","Compute related module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Kernel module","Generates kernel source code by replacing some information …","","","","","","","","","","","","","","","","","","","","","","Generate an autotune operation for a reduce kernel","","","","","","","","","","","","","","","","","","","Tensor module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a unary kernel.","Creates a unary inplace kernel.","Creates a unary scalar kernel.","Creates a unary scalar inplace kernel.","","","","","","","","","","","","","","","","","","","","Wraps a dynamic kernel source into a kernel with launch …","Represents an entire buffer.","Kernel trait with the source that will be compiled and …","Key for matmul operation","Key for mean_dim operations","Wgpu compute server","A slice over a buffer.","Wraps a static kernel source into a kernel with launch …","Key for sum_dim operations","Key for all autotune-enabled operations","Wgpu compute client to communicate with the compute server.","Wgpu server handle.","The memory resource that can be allocated for wgpu.","How the resource is used, either as a slice or fully.","Wgpu compute server.","Buffer storage for wgpu.","Provides launch information specifying the number of work …","","Return the binding view of the buffer.","","","","","","","","","","","","","","","","","The wgpu buffer.","","","","","Get the compute client for the given device.","When we create a new handle from existing data, we use …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Identifier for the kernel, used for caching kernel …","","","Init the client async, necessary for wasm.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How the resource is used.","Handle for the memory in use.","Create a new storage on the given device.","Constructs a new <code>WorkGroup</code>.","Constructs a new <code>DynamicKernel</code>.","Constructs a new <code>StaticKernel</code>.","Create a new server.","Constructs a new <code>WgpuResource</code>.","Calculate the number of invocations of a compute shader.","Return the buffer offset.","Actually deallocates buffers tagged to be deallocated.","","Select the wgpu device and queue based on the provided …","Return the buffer size.","Source template for the kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Launch information.","","","Work groups for the x axis.","Work groups for the y axis.","Work groups for the z axis.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generate kernel source code by replacing some information …","Dynamic wgpu kernel to create a source template.","Generates kernel source code by replacing some information …","Kernel source code abstraction allowing for templating.","Static wgpu kernel to create a source template.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Add a new template.","Execute a binary kernel using the provided WORKGROUP.","Creates a binary elementwise kernel.","Execute a binary kernel using the default settings.","Execute a binary inplace kernel using the provided …","Creates a binary elementwise inplace kernel.","Execute a binary inplace kernel using the default settings.","","","","","","","","","","","","","","","","","","","","","","","Create a vector containing the dimension, strides and …","Similar to build info but with dynamic rank.","Cast a tensor to the given element type.","Complete the template and returns the source code.","Convolution kernels","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Identifier for the kernel, used for caching kernel …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Make a wgpu tensor contiguous.","Similar to into contiguous but with dynamic rank.","Generates kernel source code by replacing some information …","Matmul kernels","Constructs a new <code>ContiguousRaw</code>.","Constructs a new <code>DynamicKernelSettings</code>.","Constructs a new <code>BinaryElemwiseRaw</code>.","Constructs a new <code>BinaryElemwiseInplaceRaw</code>.","Constructs a new <code>CastRaw</code>.","Create a new source template.","Constructs a new <code>UnaryRaw</code>.","Constructs a new <code>UnaryInplaceRaw</code>.","Constructs a new <code>UnaryScalarRaw</code>.","Constructs a new <code>UnaryScalarInplaceRaw</code>.","Pooling kernels","Pseudo-random number generator kernels","Reduction algorithms","Register the value for a placeholder item.","Source template for the kernel.","Source template for the kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute a unary kernel using the provided WORKGROUP.","Creates a unary kernel.","Execute a unary kernel using the default settings.","Execute a unary inplace kernel using the provided …","Creates a unary inplace kernel.","Execute a unary inplace kernel using the default settings.","Execute a unary scalar kernel using the provided WORKGROUP.","Creates a unary scalar kernel.","Execute a unary scalar kernel using the default settings.","Execute a unary scalar inplace kernel using the provided …","Creates a unary scalar inplace kernel.","Execute a unary scalar inplace kernel using the default …","","","","","","","","","","","","","","","","","","","","","","","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>Conv2d</code>.","Constructs a new <code>ConvTranspose2d</code>.","","","","","","","","","","","","","Autotune key representative of matmul versions","Set of matmul implementations available for autotune …","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Executes autotune on matmul operations","Matrix multiplication using memory coalescing algorithm …","Matrix multiplication using memory coalescing algorithm …","Matrix multiplication using naive algorithm with custom …","Matrix multiplication using naive algorithm with …","Constructs a new <code>MatmulMemCoalescingRaw</code>.","Constructs a new <code>MatmulNaiveRaw</code>.","Create a matmul autotune key from the input shapes","","","","","","","","","","","","","","","","","WGSL vec4 primitives are used on left and right hand …","","","","","Contains utilitary for matmul operation","WGSL vec4 primitives are used on left and right hand tensor","WGSL vec4 primitives are used on left hand tensor","","","","","Generated kernel from wgsl file.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Matrix multiplication using tiling 2d algorithm with vec4 …","Constructs a new <code>MatmulTiling2DUnpaddedRaw</code>.","","","","","","","Creates an empty output tensor with matmul output shape","Generated kernel from wgsl file.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Matrix multiplication using tiling 2d algorithm with vec4 …","Constructs a new <code>MatmulTiling2Dvec4Raw</code>.","","","","","","","Generated kernel from wgsl file.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Matrix multiplication using tiling 2d algorithm with vec4 …","Constructs a new <code>MatmulTiling2DVec4LhsRaw</code>.","","","","","","","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a new <code>AvgPool2dRaw</code>.","Constructs a new <code>AvgPool2dBackwardRaw</code>.","Constructs a new <code>MaxPool2d</code>.","Constructs a new <code>MaxPool2dWithIndicesBackward</code>.","Constructs a new <code>MaxPool2dWithIndices</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Pseudo-random generator for bernoulli","Pseudo-random generator for uniform distribution, based on …","Pseudo-random generator for normal distribution","Pseudo-random generator for uniform distribution","Set of mean_dim implementations available for autotune …","Generated kernel from wgsl file.","Autotune key representative of reduce versions","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Generated kernel from wgsl file.","Set of sum_dim implementations available for autotune …","Execute the argmax kernel.","Execute the argmin kernel.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates an empty output tensor with reduce output shape","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Execute the mean dim kernel.","Executes autotune on mean_dim operation","Execute the mean dim kernel leveraging shared memory …","Constructs a new <code>RecursiveSumRaw</code>.","Constructs a new <code>ReductionDimRaw</code>.","Constructs a new <code>ReductionArgsRaw</code>.","Constructs a new <code>ReductionDimSharedMemoryRaw</code>.","Create a reduce autotune key from the input shape and …","","","","","Sum all elements in the input buffer.","Execute the sum dim kernel.","Executes autotune on sum_dim operation","Execute the sum dim kernel leveraging shared memory …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The basic tensor primitive struct.","Assert that both tensors are on the same device.","","","Check if the tensor is safe to mutate.","Compute client for wgpu.","","","Copy the current tensor.","The device of the current tensor.","","","Returns the argument unchanged.","The buffer where the data are stored.","Calls <code>U::from(self)</code>.","Check if the current tensor is contiguous.","Create a new tensor.","The shape of the current tensor.","The strides of the current tensor.","Change the context of the current tensor and return the …","","","","","",""],"i":[0,19,19,19,0,0,0,0,0,19,0,0,19,0,0,0,0,1,1,1,1,1,1,1,1,1,1,3,21,22,23,24,25,26,27,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,19,1,21,22,23,24,25,26,27,19,1,21,22,23,24,25,26,27,1,1,1,1,19,1,21,22,23,24,25,26,27,19,1,21,22,23,24,25,26,27,0,0,0,0,0,1,1,1,19,1,21,22,23,24,25,26,27,1,1,1,19,1,21,22,23,24,25,26,27,1,19,1,1,19,19,19,1,1,1,1,19,1,21,22,23,24,25,26,27,19,1,21,22,23,24,25,26,27,1,1,1,1,1,1,1,1,19,19,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,19,1,21,22,23,24,25,26,27,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,19,1,21,22,23,24,25,26,27,19,1,21,22,23,24,25,26,27,19,1,21,22,23,24,25,26,27,19,1,21,22,23,24,25,26,27,0,0,0,0,19,1,21,22,23,24,25,26,27,19,1,21,22,23,24,25,26,27,1,0,65,0,55,55,0,65,0,55,0,0,0,0,0,0,0,0,50,52,50,54,66,68,59,52,65,55,50,54,66,68,59,52,65,55,52,54,55,54,55,0,59,50,50,54,66,68,59,52,65,55,59,55,55,55,55,59,50,54,59,52,65,55,55,50,54,66,68,59,52,65,55,50,55,113,66,68,0,50,54,66,68,59,52,65,55,52,81,50,54,66,68,59,52,54,52,50,59,0,52,113,66,68,59,54,55,55,50,54,66,68,59,52,65,55,50,54,66,68,59,52,65,55,50,54,66,68,59,52,65,55,50,54,66,68,59,52,65,55,50,54,66,68,59,52,65,55,113,66,68,54,54,54,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,114,82,79,83,84,85,76,86,87,88,89,114,82,79,83,84,85,76,86,87,88,89,0,0,0,76,0,114,82,79,83,84,85,76,86,87,88,89,76,114,82,79,83,84,85,76,86,87,88,89,67,79,114,82,79,83,84,85,76,86,87,88,89,0,0,0,0,82,79,83,84,85,76,86,87,88,89,0,0,0,76,69,67,114,82,79,83,84,85,86,87,88,89,114,82,79,83,84,85,76,86,87,88,89,114,82,79,83,84,85,76,86,87,88,89,114,82,79,83,84,85,76,86,87,88,89,0,0,0,0,0,0,0,0,0,0,0,0,114,82,79,83,84,85,76,86,87,88,89,114,82,79,83,84,85,76,86,87,88,89,0,0,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,90,91,0,0,0,0,92,92,96,97,95,92,96,97,95,95,95,92,96,97,95,95,95,95,95,92,95,95,92,96,97,95,95,92,96,97,95,92,0,0,0,0,0,96,97,95,96,97,95,95,92,96,97,95,92,96,97,95,92,96,97,95,0,92,96,97,95,0,0,0,92,96,97,95,0,98,98,98,98,98,0,98,98,98,98,98,98,98,0,0,99,99,99,99,99,0,99,99,99,99,99,99,99,0,100,100,100,100,100,0,100,100,100,100,100,100,100,0,0,0,0,0,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,101,102,103,104,105,0,0,0,0,0,0,0,0,0,0,0,0,0,106,107,106,107,109,110,111,112,108,106,107,109,110,111,112,108,108,108,106,107,109,110,111,112,108,108,108,108,108,106,107,108,108,106,107,109,110,111,112,108,108,0,106,107,109,110,111,112,108,106,107,0,0,0,109,110,111,112,108,109,110,111,112,0,0,0,0,108,108,106,107,109,110,111,112,108,106,107,109,110,111,112,108,106,107,109,110,111,112,108,106,107,109,110,111,112,108,106,107,109,110,111,112,108,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[],6],[[[2,[[1,[-1,-2,-3]]]],[8,[7]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[8,[7]],[8,[7]],[8,[7]],6],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]],[8,[7]],[8,[7]],[8,[7]],6],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,[[[13,[[12,[[1,[-1,-2,-3]]]]]],7],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]]],[[14,[[1,[-1,-2,-3]]]]],3,4,5],[[15,[14,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]],[12,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[16,[6]],[14,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]]],[[17,[[16,[6]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]],15],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]]],15,3,4,5],[[[12,[[1,[-1,-2,-3]]]],[8,[[18,[7]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]],[8,[[18,[7]]]],[12,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[12,[[1,[-1,-2,-3]]]],7,7],[],3,4,5],[15],[[]],[[[12,[[1,[-1,-2,-3]]]],[14,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[13,[[2,[[1,[-1,-2,-3]]]]]],7],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[19,19],[[[1,[-1,-2,-3]]],[[1,[-1,-2,-3]]],[3,20],[4,20],[5,20]],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],0,0,0,0,0,[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]],[29,[[2,[[1,[-1,-2,-3]]]]]],30],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]],[29,[[2,[[1,[-1,-2,-3]]]]]],31],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[],19],[[],[[1,[-1,-2,-3]]],[3,32],[4,32],[5,32]],[[],21],[[],22],[[],23],[[],24],[[],25],[[],26],[[],27],[[[2,[[1,[-1,-2,-3]]]]],[[14,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,[14,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[19,19],6],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[15],[[]],[[19,33],34],[[[1,[-1,-2,-3]],33],34,[3,35],[4,35],[5,35]],[[21,33],34],[[22,33],34],[[23,33],34],[[24,33],34],[[25,33],34],[[26,33],34],[[27,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[16,[[9,[[1,[-1,-2,-3]]]]]],[14,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[36,[[1,[-1,-2,-3]]]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[15,[9,[[1,[-1,-2,-3]]]],19],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[7,[2,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[19,-1],28,37],[19,38],[[[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[13,[[10,[[1,[-1,-2,-3]]]]]],7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]]],[[14,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[15,[14,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[16,[-1]],[14,[[1,[-2,-3,-1]]]]],[[10,[[1,[-2,-3,-1]]]]],5,3,4],[[7,[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]]],[[17,[[16,[-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[12,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[12,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[15,[14,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],15],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[7,[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],7,[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],7,[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]]],15,3,4,5],[[[10,[[1,[-1,-2,-3]]]],[8,[[18,[7]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[8,[[18,[7]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],[39,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[[10,[[1,[-1,-2,-3]]]],7,7],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[15],[[]],[[[10,[[1,[-1,-2,-3]]]],[14,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[[15,[14,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[[1,[-1,-2,-3]]]]],[[17,[[16,[[9,[[1,[-1,-2,-3]]]]]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[10,[[1,[-1,-2,-3]]]]],3,4,5],0,0,[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[12,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[12,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[12,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[8,[7]],[8,[7]],[8,[7]],[8,[7]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[8,[7]],[8,[7]],[8,[7]],[8,[7]]],[[40,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[8,[7]],[8,[7]],[8,[7]],[8,[7]],[2,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]]],[[41,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],7],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[],42],[[15,[14,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[19,[[13,[[44,[43]]]]]],[[[2,[[1,[-1,-2,-3]]]],45],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[15,46,[14,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],0,[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],15],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[7,[2,[[1,[-1,-2,-3]]]],[10,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[47,28],[[[2,[[1,[-1,-2,-3]]]],7,[10,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],7,[10,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],15,3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[8,[[18,[7]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[8,[[18,[7]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],[9,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],7],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]],7,7],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[],28],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],0,[[[2,[[1,[-1,-2,-3]]]],[14,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],[[[2,[[1,[-1,-2,-3]]]]],[[2,[[36,[[1,[-1,-2,-3]]]]]]],3,4,5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],0,0,0,0,[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,[14,[[1,[-1,-2,-3]]]]],[[2,[[1,[-1,-2,-3]]]]],3,4,5],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[50,7],51],[52,53],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[54,54],[55,55],[[-1,-2],28,[],[]],[[-1,-2],28,[],[]],[19,[[58,[56,[57,[56]]]]]],[[[59,[-1]],[61,[60]]],[[62,[[59,[-1]]]]],[[63,[50]]]],[[50,64],28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[59,[-1]],7],[[62,[[59,[-1]]]]],[[63,[50]]]],[[55,55],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[59,[-1]],[61,[[62,[[59,[-1]]]]]]],28,[[63,[50]]]],[[50,33],34],[[54,33],34],[[[59,[-1]],33],34,[35,[63,[50]]]],[[52,33],34],[[65,33],34],[[55,33],34],[[55,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[50,51]],[[55,-1],28,37],[-1,42,[]],[[[66,[-1]]],42,67],[[[68,[-1]]],42,69],[19,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[71,[70]]],50],[[72,72,72],54],[[-1,54],[[66,[-1]]],[]],[54,[[68,[-1]]],[]],[[-1,[71,[70]],73,7],[[59,[-1]]],[[63,[50]]]],[[[71,[74]],65],52],[54,7],[52,47],[50,28],[[[59,[-1]],[62,[[59,[-1]]]]],[[17,[[13,[60]]]]],[[63,[50]]]],[19,[[28,[70,73,75]]]],[52,47],[-1,76,[]],[[[66,[-1]]],76,67],[[[68,[-1]]],76,69],[[[59,[-1]]],28,[[63,[50]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,42,[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,54,[]],[[[66,[-1]]],54,67],[[[68,[-1]]],54,69],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[76,-1],76,[[77,[42]]]],[[[78,[-1]],[78,[-1]]],[[78,[-1]]],0],0,[[[78,[-1]],[78,[-1]]],[[78,[-1]]],0],[[[78,[-1]],[78,[-1]]],[[78,[-1]]],0],0,[[[78,[-1]],[78,[-1]]],[[78,[-1]]],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[61,[[78,[-1]]]]],[[13,[72]]],0],[[[61,[[61,[7]]]],[61,[[61,[7]]]]],[[13,[72]]]],[[[78,[-1]]],[[78,[-2]]],0,0],[76,42],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[76,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,42,[]],[[[79,[-1,-2,-3]]],42,69,0,0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1]]],[[78,[-1]]],0],[[80,81,[61,[7]],[61,[7]],[61,[7]],[61,[7]],7],81],0,0,[[],82],[[7,7,7],[[79,[-1,-2,-3]]],69,0,0],[[],83],[[],84],[[],85],[-1,76,[[77,[42]]]],[[],86],[[],87],[[],88],[[],89],0,0,0,[[76,-1,-2],76,[[77,[42]]],[[77,[42]]]],[[],76],[-1,76,[]],[[],76],[[],76],[[[79,[-1,-2,-3]]],76,69,0,0],[[],76],[[],76],[[],76],[[],76],[[],76],[[],76],[[],76],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[[[78,[-1]]],[[78,[-1]]],0],0,[[[78,[-1]]],[[78,[-1]]],0],[[[78,[-1]]],[[78,[-1]]],0],0,[[[78,[-1]]],[[78,[-1]]],0],[[[78,[-1]],-1],[[78,[-1]]],0],0,[[[78,[-1]],-1],[[78,[-1]]],0],[[[78,[-1]],-1],[[78,[-1]]],0],0,[[[78,[-1]],-1],[[78,[-1]]],0],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],90],[[],91],[[],76],[[],76],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[92,[-1]]],[[13,[[44,[93]]]]],[0,94]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[95,95],[[-1,-2],28,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[95,95],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[44,[[92,[-1]]]],7],[[44,[93]]],[0,94]],[[95,33],34],[[95,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[95,-1],28,37],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[92,[-1]]],55,[0,94]],[[[78,[-1]],[78,[-1]]],[[78,[-1]]],[0,94]],[[[78,[-1]],[78,[-1]],[78,[-1]],7,7],[[78,[-1]]],0],[[[78,[-1]],[78,[-1]],[78,[-1]]],[[78,[-1]]],0],[[[78,[-1]],[78,[-1]],[78,[-1]]],[[78,[-1]]],0],[[[78,[-1]],[78,[-1]],[78,[-1]]],[[78,[-1]]],0],[[],96],[[],97],[[15,15],95],[[],76],[[],76],[-1,-2,[],[]],[-1,42,[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],0,[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[78,[-1]],[78,[-1]],[78,[-1]]],[[78,[-1]]],[0,94]],[[],98],[[],76],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],[[[78,[-1]],[78,[-1]]],[[78,[-1]]],0],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[78,[-1]],[78,[-1]],[78,[-1]]],[[78,[-1]]],[0,94]],[[],99],[[],76],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[[78,[-1]],[78,[-1]],[78,[-1]]],[[78,[-1]]],[0,94]],[[],100],[[],76],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],101],[[],102],[[],103],[[],104],[[],105],[[],76],[[],76],[[],76],[[],76],[[],76],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,19,-1],[[78,[-1]]],0],[[[78,[-1]],-1,-1],[[78,[-1]]],0],[[15,19,-1,-1],[[78,[-1]]],0],[[15,19,-1,-1],[[78,[-1]]],0],0,0,0,0,0,0,0,[[[78,[-1]],7],[[78,[-2]]],0,0],[[[78,[-1]],7],[[78,[-2]]],0,0],[[[106,[-1]]],[[13,[[44,[93]]]]],[0,94]],[[[107,[-1]]],[[13,[[44,[93]]]]],[0,94]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[108,108],[[-1,-2],28,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[108,108],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[44,[[106,[-1]]]],7],[[44,[93]]],[0,94]],[[[44,[[107,[-1]]]],7],[[44,[93]]],[0,94]],[[108,33],34],[[108,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[108,-1],28,37],[[[78,[-1]],7],[[78,[-1]]],0],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[106,[-1]]],55,[0,94]],[[[107,[-1]]],55,[0,94]],[[[78,[-1]],[78,[-1]],7],[[78,[-1]]],0],[[[78,[-1]],7],[[78,[-1]]],[0,94]],[[[78,[-1]],[78,[-1]],7],[[78,[-1]]],0],[[],109],[[],110],[[],111],[[],112],[[15,7],108],[[],76],[[],76],[[],76],[[],76],[[[78,[-1]]],[[78,[-1]]],0],[[[78,[-1]],[78,[-1]],7],[[78,[-1]]],0],[[[78,[-1]],7],[[78,[-1]]],[0,94]],[[[78,[-1]],[78,[-1]],7],[[78,[-1]]],0],[-1,-2,[],[]],[-1,42,[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[78,[-1]],[78,[-1]]],28,0],[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1]]],6,0],0,[[[78,[-1]]],[[78,[-1]]],[20,0]],[[-1,-2],28,[],[]],[[[78,[-1]]],[[78,[-1]]],0],0,[-1,-2,[],[]],[[[78,[-1]],33],34,[35,0]],[-1,-1,[]],0,[-1,-2,[],[]],[[[78,[-1]]],6,0],[[80,19,15,81],[[78,[-1]]],0],0,0,[[[78,[-1]],80,19],[[78,[-1]]],0],[-1,-2,[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,49,[]],[-1,[[29,[-2]]],[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Wgpu",0],[6,"FloatTensor",1008],[8,"GraphicsApi",0],[8,"FloatElement",0],[8,"IntElement",0],[15,"bool"],[15,"usize"],[15,"array"],[6,"FloatElem",1008],[6,"IntTensor",1008],[4,"Backend",1009],[6,"BoolTensor",1008],[3,"Vec",1010],[6,"Device",1008],[3,"Shape",1011],[3,"Data",1012],[4,"Reader",1013],[3,"Range",1014],[4,"WgpuDevice",0],[8,"Clone",1015],[3,"Vulkan",0],[3,"Metal",0],[3,"OpenGl",0],[3,"Dx11",0],[3,"Dx12",0],[3,"WebGpu",0],[3,"AutoGraphicsApi",0],[15,"tuple"],[4,"Option",1016],[3,"ConvOptions",1017],[3,"ConvTransposeOptions",1017],[8,"Default",1018],[3,"Formatter",1019],[6,"Result",1019],[8,"Debug",1019],[6,"FullPrecisionBackend",1008],[8,"Hasher",1020],[3,"DeviceId",1021],[6,"IntElem",1008],[3,"MaxPool2dWithIndices",1017],[3,"MaxPool2dBackward",1017],[3,"String",1022],[8,"FusionOps",1021],[3,"Box",1023],[15,"f32"],[4,"Distribution",1012],[15,"u64"],[4,"Result",1024],[3,"TypeId",1025],[3,"WgpuStorage",326],[3,"StorageHandle",1026],[3,"WgpuResource",326],[4,"BindingResource",1027],[3,"WorkGroup",326],[4,"WgpuAutotuneKey",326],[6,"Server",326],[3,"MutexComputeChannel",1028],[3,"ComputeClient",1029],[3,"WgpuServer",326],[15,"u8"],[15,"slice"],[3,"Handle",1030],[8,"MemoryManagement",1031],[3,"StorageId",1026],[4,"WgpuResourceKind",326],[3,"DynamicKernel",326],[8,"DynamicKernelSource",479],[3,"StaticKernel",326],[8,"StaticKernelSource",479],[3,"Device",1027],[3,"Arc",1032],[15,"u32"],[3,"Queue",1027],[3,"Buffer",1027],[3,"AdapterInfo",1009],[3,"SourceTemplate",479],[8,"Into",1033],[3,"WgpuTensor",982],[3,"DynamicKernelSettings",479],[6,"WgpuComputeClient",326],[6,"WgpuHandle",326],[3,"ContiguousRaw",479],[3,"BinaryElemwiseRaw",479],[3,"BinaryElemwiseInplaceRaw",479],[3,"CastRaw",479],[3,"UnaryRaw",479],[3,"UnaryInplaceRaw",479],[3,"UnaryScalarRaw",479],[3,"UnaryScalarInplaceRaw",479],[3,"Conv2d",659],[3,"ConvTranspose2d",659],[3,"MatmulAutotuneOperationSet",685],[8,"AutotuneOperation",1034],[8,"Element",1035],[3,"MatmulAutotuneKey",685],[3,"MatmulMemCoalescingRaw",685],[3,"MatmulNaiveRaw",685],[3,"MatmulTiling2DUnpaddedRaw",757],[3,"MatmulTiling2Dvec4Raw",772],[3,"MatmulTiling2DVec4LhsRaw",786],[3,"AvgPool2dRaw",800],[3,"AvgPool2dBackwardRaw",800],[3,"MaxPool2d",800],[3,"MaxPool2dWithIndicesBackward",800],[3,"MaxPool2dWithIndices",800],[3,"MeanDimAutotuneOperationSet",869],[3,"SumDimAutotuneOperationSet",869],[3,"ReduceAutotuneKey",869],[3,"RecursiveSumRaw",869],[3,"ReductionDimRaw",869],[3,"ReductionArgsRaw",869],[3,"ReductionDimSharedMemoryRaw",869],[8,"Kernel",326],[3,"KernelSettings",479]]},\
"custom_renderer":{"doc":"","t":"DLMLLLLLLLLLLLLLMMLMMMFMLLLLLLLLLLLLL","n":["MnistTrainingConfig","adapt","batch_size","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","downcast","drop","fmt","from","init","into","lr","model","new","num_epochs","num_workers","optimizer","run","seed","serialize","to_owned","to_string","try_from","try_into","type_id","upcast","vzip","with_batch_size","with_lr","with_num_epochs","with_num_workers","with_seed"],"q":[[0,"custom_renderer"],[37,"core::result"],[38,"serde::de"],[39,"core::fmt"],[40,"core::fmt"],[41,"burn_core::optim::adam"],[42,"serde::ser"],[43,"alloc::string"],[44,"core::any"],[45,"core::option"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Create a new instance of the config.","","","","","","","","","","","","","","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field."],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],1,[],[]],[3,-1,[]],[3,-1,[]],[-1,[[4,[2]]],5],[-1,-2,[],[]],[3,1],[[2,6],7],[-1,-1,[]],[[],3],[-1,-2,[],[]],0,0,[[8,9],2],0,0,0,[[],1],0,[[2,-1],4,10],[-1,-2,[],[]],[-1,11,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,12,[]],[-1,[[13,[-2]]],[],[]],[-1,-2,[],[]],[[2,3],2],[[2,14],2],[[2,3],2],[[2,3],2],[[2,15],2]],"c":[],"p":[[15,"tuple"],[3,"MnistTrainingConfig",0],[15,"usize"],[4,"Result",37],[8,"Deserializer",38],[3,"Formatter",39],[6,"Result",39],[3,"ModelConfig",40],[3,"AdamConfig",41],[8,"Serializer",42],[3,"String",43],[3,"TypeId",44],[4,"Option",45],[15,"f64"],[15,"u64"]]},\
"custom_training_loop":{"doc":"","t":"DLMLLLLLLLLLLLLLMMLMMMFMLLLLLLLLLLLLL","n":["MnistTrainingConfig","adapt","batch_size","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","downcast","drop","fmt","from","init","into","lr","model","new","num_epochs","num_workers","optimizer","run","seed","serialize","to_owned","to_string","try_from","try_into","type_id","upcast","vzip","with_batch_size","with_lr","with_num_epochs","with_num_workers","with_seed"],"q":[[0,"custom_training_loop"],[37,"core::result"],[38,"serde::de"],[39,"core::fmt"],[40,"core::fmt"],[41,"burn_core::optim::adam"],[42,"serde::ser"],[43,"alloc::string"],[44,"core::any"],[45,"core::option"]],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Create a new instance of the config.","","","","","","","","","","","","","","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field."],"i":[0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"f":[0,[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[[-1,-2],1,[],[]],[3,-1,[]],[3,-1,[]],[-1,[[4,[2]]],5],[-1,-2,[],[]],[3,1],[[2,6],7],[-1,-1,[]],[[],3],[-1,-2,[],[]],0,0,[[8,9],2],0,0,0,[[],1],0,[[2,-1],4,10],[-1,-2,[],[]],[-1,11,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,12,[]],[-1,[[13,[-2]]],[],[]],[-1,-2,[],[]],[[2,3],2],[[2,14],2],[[2,3],2],[[2,3],2],[[2,15],2]],"c":[],"p":[[15,"tuple"],[3,"MnistTrainingConfig",0],[15,"usize"],[4,"Result",37],[8,"Deserializer",38],[3,"Formatter",39],[6,"Result",39],[3,"ModelConfig",40],[3,"AdamConfig",41],[8,"Serializer",42],[3,"String",43],[3,"TypeId",44],[4,"Option",45],[15,"f64"],[15,"u64"]]},\
"custom_wgpu_kernel":{"doc":"","t":"IIGKFF","n":["AutodiffBackend","Backend","FloatTensor","fused_matmul_add_relu","matmul_add_relu_custom","matmul_add_relu_reference"],"q":[[0,"custom_wgpu_kernel"],[6,"burn_tensor::tensor::api::base"]],"d":["We create our own AutodiffBackend trait that extends the …","We create our own Backend trait that extends the Burn …","We use a type alias for better readability.","","We define our custom implementation using the added …","We define a reference implementation using basic tensor …"],"i":[0,0,0,3,0,0],"f":[0,0,0,[[[1,[-1]],[1,[-1]],[1,[-1]]],[[1,[-1]]],[]],[[[2,[-1]],[2,[-1]],[2,[-1]]],[[2,[-1]]],3],[[[2,[-1]],[2,[-1]],[2,[-1]]],[[2,[-1]]],3]],"c":[],"p":[[6,"FloatTensor",0],[3,"Tensor",6],[8,"Backend",0]]},\
"guide":{"doc":"","t":"AAAADDLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLFDDDDMMLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLMLLLLLLLLLLLLLMMLMMMMLLLFLLLLLLLLLL","n":["data","inference","model","training","MNISTBatch","MNISTBatcher","adapt","adapt","batch","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","fmt","from","from","images","init","init","into","into","new","targets","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","infer","Model","ModelConfig","ModelRecord","ModelRecordItem","activation","activation","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","conv1","conv1","conv2","conv2","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","downcast","downcast","downcast","downcast","drop","drop","drop","drop","dropout","dropout","fmt","fmt","fmt","fmt","fmt","fmt","fork","forward","forward_classification","from","from","from","from","from_item","init","init","init","init","init","init_with","into","into","into","into","into_item","into_record","linear1","linear1","linear2","linear2","load_record","map","new","num_params","pool","pool","serialize","serialize","step","step","to_device","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","valid","visit","vzip","vzip","vzip","vzip","with_dropout","TrainingConfig","adapt","batch_size","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","downcast","drop","fmt","from","init","into","learning_rate","model","new","num_epochs","num_workers","optimizer","seed","serialize","to_owned","to_string","train","try_from","try_into","type_id","upcast","vzip","with_batch_size","with_learning_rate","with_num_epochs","with_num_workers","with_seed"],"q":[[0,"guide"],[4,"guide::data"],[44,"guide::inference"],[45,"guide::model"],[166,"guide::training"],[203,"burn_dataset::source::huggingface::mnist"],[204,"alloc::vec"],[205,"burn_tensor::tensor::backend::base"],[206,"core::clone"],[207,"core::fmt"],[208,"core::fmt"],[209,"core::any"],[210,"core::option"],[211,"burn_core::record::settings"],[212,"serde::de"],[213,"burn_core::module::base"],[214,"burn_tensor::tensor::api::base"],[215,"burn_tensor::tensor::api::kind"],[216,"burn_train::learner::classification"],[217,"burn_core::module::base"],[218,"burn_train::learner::train_val"],[219,"burn_tensor::tensor::backend::base"],[220,"burn_core::module::base"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The record type for the module.","The record item type for the module.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","Shapes","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the initialized model.","","Returns the initialized model using the recorded weights.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","Create a new instance of the config.","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the default value for the field.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Create a new instance of the config.","","","","","","","","","","","","","","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field."],"i":[0,0,0,0,0,0,2,5,2,2,5,2,5,5,5,2,5,2,5,2,5,2,5,5,2,5,5,2,5,2,5,2,5,5,2,5,2,5,2,5,2,5,2,5,0,0,0,0,0,17,18,16,17,18,20,16,17,18,20,16,17,18,20,16,17,18,20,16,17,18,20,17,18,17,18,16,17,18,20,16,17,18,20,18,20,16,16,17,18,20,16,17,18,20,17,18,16,16,17,18,20,20,16,16,16,16,17,18,20,17,16,17,18,20,20,20,16,17,18,20,17,16,17,18,17,18,16,16,20,16,17,18,18,20,16,16,16,16,17,18,20,16,20,16,17,18,20,16,17,18,20,16,17,18,20,16,17,18,20,16,16,16,17,18,20,20,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,33,33,33,33,33,33,33,33,33,33],"f":[0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[[[2,[-1]],[4,[3]]],[[5,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[-1]]],[7,6]],[[-1,-2],1,[],[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,1],[8,1],[[[5,[-1]],9],10,[11,6]],[-1,-1,[]],[-1,-1,[]],0,[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[2,[-1]]],6],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[15,3],1],0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],[[16,[-1]]],6],[[[17,[-1]]],[[17,[-1]]],[7,6]],[[[18,[-1,-2]]],[[18,[-1,-2]]],[7,6],[7,19]],[20,20],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[12,[[18,[-2,-3]]]]],21,6,19],[-1,[[12,[20]]],21],[[[16,[-1]],[22,[-1]]],[[22,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,1],[8,1],[8,1],[8,1],0,0,[[[16,[-1]],9],10,[11,6]],[[[16,[-1]],9],10,6],[[[17,[-1]],9],10,[11,6]],[[[18,[-1,-2]],9],10,[11,6],[11,19]],[[20,9],10],[[20,9],10],[[[16,[-1]]],[[16,[-1]]],6],[[[16,[-1]],[23,[-1]]],[[23,[-1]]],6],[[[16,[-1]],[23,[-1]],[23,[-1,24]]],[[25,[-1]]],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[17,[-1]]],6],[[],8],[[],8],[[],8],[20,[[16,[-1]]],6],[[],8],[[20,[17,[-1]]],[[16,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]]],[],6],[[[16,[-1]]],[],6],0,0,0,0,[[[16,[-1]]],[[16,[-1]]],6],[[[16,[-1]],-2],[[16,[-1]]],6,[[26,[-1]]]],[[8,8],20],[[[16,[-1]]],8,6],0,0,[[[18,[-1,-2]],-3],12,6,19,27],[[20,-1],12,27],[[[16,[-1]],[5,[-1]]],[[25,[-1]]],6],[[[16,[-1]],[5,[-1]]],[[28,[[25,[-1]]]]],29],[[[16,[-1]]],[[16,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,30,[]],[-1,30,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[16,[-1]]],[],[29,6]],[[[16,[-1]],-2],1,6,[[31,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[20,32],20],0,[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],1,[],[]],[8,-1,[]],[8,-1,[]],[-1,[[12,[33]]],21],[-1,-2,[],[]],[8,1],[[33,9],10],[-1,-1,[]],[[],8],[-1,-2,[],[]],0,0,[[20,34],33],0,0,0,0,[[33,-1],12,27],[-1,-2,[],[]],[-1,30,[]],[[15,33],1],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,-2,[],[]],[[33,8],33],[[33,32],33],[[33,8],33],[[33,8],33],[[33,35],33]],"c":[],"p":[[15,"tuple"],[3,"MNISTBatcher",4],[3,"MNISTItem",203],[3,"Vec",204],[3,"MNISTBatch",4],[8,"Backend",205],[8,"Clone",206],[15,"usize"],[3,"Formatter",207],[6,"Result",207],[8,"Debug",207],[4,"Result",208],[3,"TypeId",209],[4,"Option",210],[15,"str"],[3,"Model",45],[3,"ModelRecord",45],[3,"ModelRecordItem",45],[8,"PrecisionSettings",211],[3,"ModelConfig",45],[8,"Deserializer",212],[6,"Devices",213],[3,"Tensor",214],[3,"Int",215],[3,"ClassificationOutput",216],[8,"ModuleMapper",213],[8,"Serializer",217],[3,"TrainOutput",218],[8,"AutodiffBackend",205],[3,"String",219],[8,"ModuleVisitor",213],[15,"f64"],[3,"TrainingConfig",166],[3,"AdamConfig",220],[15,"u64"]]},\
"image_classification_web":{"doc":"","t":"AAAAAHDLLLLLLLLLLLMLLMLLLLLDDDLLLMMLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLMMLLLLLLLLLLLLLLLLLLLLLLLDDDENNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["model","web","label","normalizer","squeezenet","LABELS","Normalizer","adapt","borrow","borrow_mut","default","deref","deref_mut","downcast","drop","from","init","into","mean","new","normalize","std","try_from","try_into","type_id","upcast","vzip","Model","ModelRecord","ModelRecordItem","adapt","adapt","adapt","averagepool2d1","averagepool2d1","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","conv2d1","conv2d1","conv2d10","conv2d10","conv2d11","conv2d11","conv2d12","conv2d12","conv2d13","conv2d13","conv2d14","conv2d14","conv2d15","conv2d15","conv2d16","conv2d16","conv2d17","conv2d17","conv2d18","conv2d18","conv2d19","conv2d19","conv2d2","conv2d2","conv2d20","conv2d20","conv2d21","conv2d21","conv2d22","conv2d22","conv2d23","conv2d23","conv2d24","conv2d24","conv2d25","conv2d25","conv2d26","conv2d26","conv2d3","conv2d3","conv2d4","conv2d4","conv2d5","conv2d5","conv2d6","conv2d6","conv2d7","conv2d7","conv2d8","conv2d8","conv2d9","conv2d9","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","devices","downcast","downcast","downcast","drop","drop","drop","dropout1","dropout1","fmt","fmt","fmt","fmt","fork","forward","from","from","from","from_embedded","from_item","init","init","init","into","into","into","into_item","into_record","load_record","map","maxpool2d1","maxpool2d1","maxpool2d2","maxpool2d2","maxpool2d3","maxpool2d3","new","new_with","num_params","phantom","phantom","serialize","to_device","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","valid","visit","vzip","vzip","vzip","ImageClassifier","InferenceResult","Model","ModelType","WithCandleBackend","WithNdArrayBackend","WithWgpuBackend","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","describe","describe","describe_vector","describe_vector","downcast","downcast","downcast","downcast","drop","drop","drop","drop","forward","from","from","from","from","from_abi","from_abi","inference","init","init","init","init","into","into","into","into","into_abi","into_abi","is_none","is_none","long_ref_from_abi","long_ref_from_abi","new","new","none","none","ref_from_abi","ref_from_abi","ref_mut_from_abi","ref_mut_from_abi","return_abi","return_abi","serialize","set_backend_candle","set_backend_ndarray","set_backend_wgpu","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","vector_from_abi","vector_from_abi","vector_into_abi","vector_into_abi","vzip","vzip","vzip","vzip"],"q":[[0,"image_classification_web"],[2,"image_classification_web::model"],[5,"image_classification_web::model::label"],[6,"image_classification_web::model::normalizer"],[27,"image_classification_web::model::squeezenet"],[171,"image_classification_web::web"],[272,"burn_tensor::tensor::backend::base"],[273,"burn_tensor::tensor::api::base"],[274,"core::result"],[275,"core::any"],[276,"core::option"],[277,"core::clone"],[278,"burn_core::record::settings"],[279,"serde::de"],[280,"burn_core::module::base"],[281,"core::fmt"],[282,"core::fmt"],[283,"alloc::string"],[284,"burn_tensor::tensor::backend::base"],[285,"wasm_bindgen"],[286,"alloc::boxed"]],"d":["","","","","","","Normalizer for the imagenet dataset.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates a new normalizer.","Normalizes the input image according to the imagenet …","","","","","","","","The record type for the module.","The record item type for the module.","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","The image classifier","","The image classifier model","The model is loaded to a specific backend","The model is loaded to the Candle backend","The model is loaded to the NdArray backend","The model is loaded to the Wgpu backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Normalizes input and runs inference on the image","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Runs inference on the image","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Constructor","Constructor called by JavaScripts with the new keyword.","","","","","","","","","","Sets the backend to Candle","Sets the backend to NdArray","Sets the backend to Wgpu","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,9,10,12,10,12,9,10,12,9,10,12,9,10,12,9,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,10,12,9,9,10,12,9,10,12,12,9,9,10,12,9,10,12,10,12,9,9,10,12,9,9,9,10,12,9,10,9,10,12,9,10,12,10,9,9,9,10,12,10,12,10,12,9,9,9,10,12,12,9,9,10,12,9,9,10,12,9,10,12,9,10,12,9,10,12,9,9,9,10,12,0,0,0,0,34,34,34,34,24,29,30,34,24,29,30,34,24,29,30,34,24,29,30,34,24,29,30,29,30,29,30,34,24,29,30,34,24,29,30,24,34,24,29,30,29,30,29,34,24,29,30,34,24,29,30,29,30,29,30,29,30,24,29,29,30,29,30,29,30,29,30,30,29,29,29,34,24,29,29,30,30,34,24,29,30,34,24,29,30,34,24,29,30,29,30,29,30,34,24,29,30],"f":[0,0,0,0,0,0,0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[2,[-1]]],3],[4,-1,[]],[4,-1,[]],[-1,-2,[],[]],[4,1],[-1,-1,[]],[[],4],[-1,-2,[],[]],0,[[],[[2,[-1]]],3],[[[2,[-1]],[5,[-1]]],[[5,[-1]]],3],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,[[8,[-2]]],[],[]],[-1,-2,[],[]],0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[9,[-1]]],[[9,[-1]]],3],[[[10,[-1]]],[[10,[-1]]],[11,3]],[[[12,[-1,-2]]],[[12,[-1,-2]]],[11,3],[11,13]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[9,[-1]]],3],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[-1,[[6,[[12,[-2,-3]]]]],14,3,13],[[[9,[-1]],[15,[-1]]],[[15,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,1],[4,1],[4,1],0,0,[[[9,[-1]],16],17,[18,3]],[[[9,[-1]],16],17,3],[[[10,[-1]],16],17,[18,3]],[[[12,[-1,-2]],16],17,[18,3],[18,13]],[[[9,[-1]]],[[9,[-1]]],3],[[[9,[-1]],[5,[-1]]],[[5,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[9,[-1]]],3],[[],[[10,[-1]]],3],[[],4],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[10,[-1]]],[],3],[[[9,[-1]]],[],3],[[[9,[-1]]],[[9,[-1]]],3],[[[9,[-1]],-2],[[9,[-1]]],3,[[19,[-1]]]],0,0,0,0,0,0,[[],[[9,[-1]]],3],[[[10,[-1]]],[[9,[-1]]],3],[[[9,[-1]]],4,3],0,0,[[[12,[-1,-2]],-3],6,3,13,20],[[[9,[-1]]],[[9,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,21,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[[[9,[-1]]],[],[22,3]],[[[9,[-1]],-2],1,3,[[23,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[4,-1,[]],[[],1],[[],1],[[],1],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[4,1],[4,1],[4,1],[4,1],[[[24,[-1]],[26,[25]]],[[27,[25]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[28,29],[28,30],[[29,[26,[25]]],[[6,[31,31]]]],[[],4],[[],4],[[],4],[[],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[29,28],[30,28],[[],32],[[],32],[[]],[[]],[[],[[24,[-1]]],3],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[],[]],[-1,[],[]],[[30,-1],6,20],[29,[[6,[1,31]]]],[29,[[6,[1,31]]]],[29,[[6,[1,31]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[31,[[6,[29]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[31,[[6,[30]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,7,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[[],[[33,[[26,[29]]]]]],[[],[[33,[[26,[30]]]]]],[[[33,[[26,[29]]]]]],[[[33,[[26,[30]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"tuple"],[3,"Normalizer",6],[8,"Backend",272],[15,"usize"],[3,"Tensor",273],[4,"Result",274],[3,"TypeId",275],[4,"Option",276],[3,"Model",27],[3,"ModelRecord",27],[8,"Clone",277],[3,"ModelRecordItem",27],[8,"PrecisionSettings",278],[8,"Deserializer",279],[6,"Devices",280],[3,"Formatter",281],[6,"Result",281],[8,"Debug",281],[8,"ModuleMapper",280],[8,"Serializer",282],[3,"String",283],[8,"AutodiffBackend",272],[8,"ModuleVisitor",280],[3,"Model",171],[15,"f32"],[15,"slice"],[3,"Vec",284],[15,"u32"],[3,"ImageClassifier",171],[3,"InferenceResult",171],[3,"JsValue",285],[15,"bool"],[3,"Box",286],[4,"ModelType",171]]},\
"mnist":{"doc":"","t":"AAADDLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLDDDDDDMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLMLLLLLLLLLLLLLLMMMFMLLLLLLLLLLLL","n":["data","model","training","MNISTBatch","MNISTBatcher","adapt","adapt","batch","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","fmt","from","from","images","init","init","into","into","new","targets","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","ConvBlock","ConvBlockRecord","ConvBlockRecordItem","Model","ModelRecord","ModelRecordItem","activation","activation","activation","activation","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conv","conv","conv1","conv1","conv2","conv2","conv3","conv3","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","devices","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","dropout","dropout","fc1","fc1","fc2","fc2","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","forward","forward","forward_classification","from","from","from","from","from","from","from_item","from_item","init","init","init","init","init","init","into","into","into","into","into","into","into_item","into_item","into_record","into_record","load_record","load_record","map","map","new","new","norm","norm","num_params","num_params","serialize","serialize","step","step","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","MnistTrainingConfig","adapt","batch_size","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","downcast","drop","fmt","from","init","into","new","num_epochs","num_workers","optimizer","run","seed","serialize","to_owned","to_string","try_from","try_into","type_id","upcast","vzip","with_batch_size","with_num_epochs","with_num_workers","with_seed"],"q":[[0,"mnist"],[3,"mnist::data"],[43,"mnist::model"],[221,"mnist::training"],[255,"burn_dataset::source::huggingface::mnist"],[256,"alloc::vec"],[257,"burn_tensor::tensor::backend::base"],[258,"core::clone"],[259,"core::fmt"],[260,"core::fmt"],[261,"core::any"],[262,"core::option"],[263,"burn_core::record::settings"],[264,"serde::de"],[265,"burn_core::module::base"],[266,"burn_tensor::tensor::api::base"],[267,"burn_train::learner::classification"],[268,"burn_core::module::base"],[269,"burn_train::learner::train_val"],[270,"burn_tensor::tensor::backend::base"],[271,"burn_core::module::base"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The record type for the module.","The record item type for the module.","","The record type for the module.","The record item type for the module.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new instance of the config.","","","","","","","","","","","","","","Set the default value for the field.","Set the default value for the field.","Set the default value for the field.","Set the default value for the field."],"i":[0,0,0,0,0,2,5,2,2,5,2,5,5,5,2,5,2,5,2,5,2,5,5,2,5,5,2,5,2,5,2,5,5,2,5,2,5,2,5,2,5,2,5,0,0,0,0,0,0,16,17,20,21,15,16,17,19,20,21,15,16,17,19,20,21,15,16,17,19,20,21,15,16,17,19,20,21,15,16,17,19,20,21,20,21,16,17,16,17,16,17,15,15,16,17,19,20,21,15,16,17,19,20,21,17,21,15,19,15,16,17,19,20,21,15,16,17,19,20,21,16,17,16,17,16,17,15,15,16,17,19,19,20,21,15,19,15,19,15,15,16,17,19,20,21,16,20,15,16,17,19,20,21,15,16,17,19,20,21,16,20,15,19,15,19,15,19,15,19,20,21,15,19,17,21,15,15,15,19,15,16,17,19,20,21,15,19,15,16,17,19,20,21,15,16,17,19,20,21,15,16,17,19,20,21,15,16,17,19,20,21,15,19,15,19,15,16,17,19,20,21,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33],"f":[0,0,0,0,0,[-1,1,[]],[-1,1,[]],[[[2,[-1]],[4,[3]]],[[5,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[5,[-1]]],[[5,[-1]]],[7,6]],[[-1,-2],1,[],[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,1],[8,1],[[[5,[-1]],9],10,[11,6]],[-1,-1,[]],[-1,-1,[]],0,[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[2,[-1]]],6],0,[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[-1]]],[[15,[-1]]],6],[[[16,[-1]]],[[16,[-1]]],[7,6]],[[[17,[-1,-2]]],[[17,[-1,-2]]],[7,6],[7,18]],[[[19,[-1]]],[[19,[-1]]],6],[[[20,[-1]]],[[20,[-1]]],[7,6]],[[[21,[-1,-2]]],[[21,[-1,-2]]],[7,6],[7,18]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,[[],[[15,[-1]]],6],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[12,[[17,[-2,-3]]]]],22,6,18],[-1,[[12,[[21,[-2,-3]]]]],22,6,18],[[[15,[-1]],[23,[-1]]],[[23,[-1]]],6],[[[19,[-1]],[23,[-1]]],[[23,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],0,0,0,0,0,0,[[[15,[-1]],9],10,6],[[[15,[-1]],9],10,[11,6]],[[[16,[-1]],9],10,[11,6]],[[[17,[-1,-2]],9],10,[11,6],[11,18]],[[[19,[-1]],9],10,6],[[[19,[-1]],9],10,[11,6]],[[[20,[-1]],9],10,[11,6]],[[[21,[-1,-2]],9],10,[11,6],[11,18]],[[[15,[-1]]],[[15,[-1]]],6],[[[19,[-1]]],[[19,[-1]]],6],[[[15,[-1]],[24,[-1]]],[[24,[-1]]],6],[[[19,[-1]],[24,[-1]]],[[24,[-1]]],6],[[[15,[-1]],[5,[-1]]],[[25,[-1]]],6],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[16,[-1]]],6],[[],[[20,[-1]]],6],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[-1]]],[],6],[[[20,[-1]]],[],6],[[[15,[-1]]],[],6],[[[19,[-1]]],[],6],[[[15,[-1]]],[[15,[-1]]],6],[[[19,[-1]]],[[19,[-1]]],6],[[[15,[-1]],-2],[[15,[-1]]],6,[[26,[-1]]]],[[[19,[-1]],-2],[[19,[-1]]],6,[[26,[-1]]]],[[],[[15,[-1]]],6],[[[27,[8]],[27,[8]]],[[19,[-1]]],6],0,0,[[[15,[-1]]],8,6],[[[19,[-1]]],8,6],[[[17,[-1,-2]],-3],12,6,18,28],[[[21,[-1,-2]],-3],12,6,18,28],[[[15,[-1]],[5,[-1]]],[[29,[[25,[-1]]]]],30],[[[15,[-1]],[5,[-1]]],[[25,[-1]]],6],[[[15,[-1]]],[[15,[-1]]],6],[[[19,[-1]]],[[19,[-1]]],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,31,[]],[-1,31,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[-1,[[14,[-2]]],[],[]],[[[15,[-1]]],[],[30,6]],[[[19,[-1]]],[],[30,6]],[[[15,[-1]],-2],1,6,[[32,[-1]]]],[[[19,[-1]],-2],1,6,[[32,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[33,33],[[-1,-2],1,[],[]],[8,-1,[]],[8,-1,[]],[-1,[[12,[33]]],22],[-1,-2,[],[]],[8,1],[[33,9],10],[-1,-1,[]],[[],8],[-1,-2,[],[]],[34,33],0,0,0,[[],1],0,[[33,-1],12,28],[-1,-2,[],[]],[-1,31,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,13,[]],[-1,[[14,[-2]]],[],[]],[-1,-2,[],[]],[[33,8],33],[[33,8],33],[[33,8],33],[[33,35],33]],"c":[],"p":[[15,"tuple"],[3,"MNISTBatcher",3],[3,"MNISTItem",255],[3,"Vec",256],[3,"MNISTBatch",3],[8,"Backend",257],[8,"Clone",258],[15,"usize"],[3,"Formatter",259],[6,"Result",259],[8,"Debug",259],[4,"Result",260],[3,"TypeId",261],[4,"Option",262],[3,"Model",43],[3,"ModelRecord",43],[3,"ModelRecordItem",43],[8,"PrecisionSettings",263],[3,"ConvBlock",43],[3,"ConvBlockRecord",43],[3,"ConvBlockRecordItem",43],[8,"Deserializer",264],[6,"Devices",265],[3,"Tensor",266],[3,"ClassificationOutput",267],[8,"ModuleMapper",265],[15,"array"],[8,"Serializer",268],[3,"TrainOutput",269],[8,"AutodiffBackend",257],[3,"String",270],[8,"ModuleVisitor",265],[3,"MnistTrainingConfig",221],[3,"AdamConfig",271],[15,"u64"]]},\
"mnist_inference":{"doc":"","t":"RF","n":["IMAGE_INX","main"],"q":[[0,"mnist_inference"]],"d":["",""],"i":[0,0],"f":[0,[[],1]],"c":[],"p":[[15,"tuple"]]},\
"mnist_inference_web":{"doc":"","t":"AAADDDDDDMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGFDLLLLLLLLLLLLLLLLL","n":["model","state","web","ConvBlock","ConvBlockRecord","ConvBlockRecordItem","Model","ModelRecord","ModelRecordItem","activation","activation","activation","activation","adapt","adapt","adapt","adapt","adapt","adapt","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","conv","conv","conv1","conv1","conv2","conv2","conv3","conv3","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","devices","devices","downcast","downcast","downcast","downcast","downcast","downcast","drop","drop","drop","drop","drop","drop","dropout","dropout","fc1","fc1","fc2","fc2","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fork","fork","forward","forward","from","from","from","from","from","from","from_item","from_item","init","init","init","init","init","init","into","into","into","into","into","into","into_item","into_item","into_record","into_record","load_record","load_record","map","map","new","new","norm","norm","num_params","num_params","serialize","serialize","to_device","to_device","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","upcast","upcast","valid","valid","visit","visit","vzip","vzip","vzip","vzip","vzip","vzip","Backend","build_and_load_model","Mnist","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","inference","init","into","new","try_from","try_into","type_id","upcast","vzip"],"q":[[0,"mnist_inference_web"],[3,"mnist_inference_web::model"],[177,"mnist_inference_web::state"],[179,"mnist_inference_web::web"],[197,"burn_tensor::tensor::backend::base"],[198,"core::clone"],[199,"burn_core::record::settings"],[200,"core::result"],[201,"serde::de"],[202,"burn_core::module::base"],[203,"core::fmt"],[204,"core::fmt"],[205,"burn_core::module::base"],[206,"alloc::string"],[207,"core::any"],[208,"core::option"],[209,"burn_tensor::tensor::backend::base"]],"d":["","","","","The record type for the module.","The record item type for the module.","","The record type for the module.","The record item type for the module.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds and loads trained parameters into the model.","Mnist structure that corresponds to JavaScript class. See:…","","","","","","","","Returns the argument unchanged.","Returns the inference results.","","Calls <code>U::from(self)</code>.","Constructor called by JavaScripts with the new keyword.","","","","",""],"i":[0,0,0,0,0,0,0,0,0,4,6,9,10,2,4,6,8,9,10,2,4,6,8,9,10,2,4,6,8,9,10,2,4,6,8,9,10,2,4,6,8,9,10,9,10,4,6,4,6,4,6,2,4,6,8,9,10,2,4,6,8,9,10,6,10,2,8,2,4,6,8,9,10,2,4,6,8,9,10,4,6,4,6,4,6,2,2,4,6,8,8,9,10,2,8,2,8,2,4,6,8,9,10,4,9,2,4,6,8,9,10,2,4,6,8,9,10,4,9,2,8,2,8,2,8,2,8,9,10,2,8,6,10,2,8,2,4,6,8,9,10,2,8,2,4,6,8,9,10,2,4,6,8,9,10,2,4,6,8,9,10,2,4,6,8,9,10,2,8,2,8,2,4,6,8,9,10,0,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],[5,3]],[[[6,[-1,-2]]],[[6,[-1,-2]]],[5,3],[5,7]],[[[8,[-1]]],[[8,[-1]]],3],[[[9,[-1]]],[[9,[-1]]],[5,3]],[[[10,[-1,-2]]],[[10,[-1,-2]]],[5,3],[5,7]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,0,0,[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[11,-1,[]],[-1,[[12,[[6,[-2,-3]]]]],13,3,7],[-1,[[12,[[10,[-2,-3]]]]],13,3,7],[[[2,[-1]],[14,[-1]]],[[14,[-1]]],3],[[[8,[-1]],[14,[-1]]],[[14,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],0,0,0,0,0,0,[[[2,[-1]],15],16,3],[[[2,[-1]],15],16,[17,3]],[[[4,[-1]],15],16,[17,3]],[[[6,[-1,-2]],15],16,[17,3],[17,7]],[[[8,[-1]],15],16,[17,3]],[[[8,[-1]],15],16,3],[[[9,[-1]],15],16,[17,3]],[[[10,[-1,-2]],15],16,[17,3],[17,7]],[[[2,[-1]]],[[2,[-1]]],3],[[[8,[-1]]],[[8,[-1]]],3],[[[2,[-1]],[18,[-1]]],[[18,[-1]]],3],[[[8,[-1]],[18,[-1]]],[[18,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[4,[-1]]],3],[[],[[9,[-1]]],3],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],[],3],[[[9,[-1]]],[],3],[[[2,[-1]]],[],3],[[[8,[-1]]],[],3],[[[2,[-1]]],[[2,[-1]]],3],[[[8,[-1]]],[[8,[-1]]],3],[[[2,[-1]],-2],[[2,[-1]]],3,[[19,[-1]]]],[[[8,[-1]],-2],[[8,[-1]]],3,[[19,[-1]]]],[[],[[2,[-1]]],3],[[[20,[11]],[20,[11]]],[[8,[-1]]],3],0,0,[[[2,[-1]]],11,3],[[[8,[-1]]],11,3],[[[6,[-1,-2]],-3],12,3,7,21],[[[10,[-1,-2]],-3],12,3,7,21],[[[2,[-1]]],[[2,[-1]]],3],[[[8,[-1]]],[[8,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,22,[]],[-1,22,[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[-1,[[24,[-2]]],[],[]],[[[2,[-1]]],[],[25,3]],[[[8,[-1]]],[],[25,3]],[[[2,[-1]],-2],1,3,[[26,[-1]]]],[[[8,[-1]],-2],1,3,[[26,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[2,[27]]]],0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,-1,[]],[11,-1,[]],[-1,-2,[],[]],[11,1],[-1,-1,[]],[[28,[30,[29]]],[[12,[31,22]]]],[[],11],[-1,-2,[],[]],[[],28],[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,23,[]],[-1,[[24,[-2]]],[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"tuple"],[3,"Model",3],[8,"Backend",197],[3,"ModelRecord",3],[8,"Clone",198],[3,"ModelRecordItem",3],[8,"PrecisionSettings",199],[3,"ConvBlock",3],[3,"ConvBlockRecord",3],[3,"ConvBlockRecordItem",3],[15,"usize"],[4,"Result",200],[8,"Deserializer",201],[6,"Devices",202],[3,"Formatter",203],[6,"Result",203],[8,"Debug",203],[3,"Tensor",204],[8,"ModuleMapper",202],[15,"array"],[8,"Serializer",205],[3,"String",206],[3,"TypeId",207],[4,"Option",208],[8,"AutodiffBackend",197],[8,"ModuleVisitor",202],[6,"Backend",177],[3,"Mnist",179],[15,"f32"],[15,"slice"],[3,"Array",209]]},\
"named_tensor":{"doc":"","t":"DDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLL","n":["Batch","DModel","SeqLength","adapt","adapt","adapt","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","downcast","downcast","downcast","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","run","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","vzip","vzip","vzip"],"q":[[0,"named_tensor"],[64,"core::fmt"],[65,"core::fmt"],[66,"core::result"],[67,"core::any"],[68,"core::option"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,0,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4],"f":[0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,2],[3,3],[4,4],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,1],[5,1],[5,1],[[2,6],7],[[3,6],7],[[4,6],7],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],8],[[],8],[[],8],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]],[-1,10,[]],[-1,10,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"tuple"],[3,"Batch",0],[3,"SeqLength",0],[3,"DModel",0],[15,"usize"],[3,"Formatter",64],[6,"Result",64],[3,"String",65],[4,"Result",66],[3,"TypeId",67],[4,"Option",68]]},\
"onnx_inference":{"doc":"","t":"CAADDDLLLMMMMLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLMMLLLLLLLLLLLLLLLLLLLLLLL","n":["mnist","model","mnist","Model","ModelRecord","ModelRecordItem","adapt","adapt","adapt","batchnormalization1","batchnormalization1","batchnormalization2","batchnormalization2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","conv2d1","conv2d1","conv2d2","conv2d2","conv2d3","conv2d3","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","devices","downcast","downcast","downcast","drop","drop","drop","fmt","fmt","fmt","fmt","fork","forward","from","from","from","from_embedded","from_item","init","init","init","into","into","into","into_item","into_record","linear1","linear1","linear2","linear2","load_record","map","new","new_with","num_params","phantom","phantom","serialize","to_device","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast","valid","visit","vzip","vzip","vzip"],"q":[[0,"onnx_inference"],[2,"onnx_inference::model"],[3,"onnx_inference::model::mnist"],[99,"burn_tensor::tensor::backend::base"],[100,"core::clone"],[101,"burn_core::record::settings"],[102,"core::result"],[103,"serde::de"],[104,"burn_core::module::base"],[105,"core::fmt"],[106,"core::fmt"],[107,"burn_core::module::base"],[108,"alloc::string"],[109,"core::any"],[110,"core::option"],[111,"burn_tensor::tensor::backend::base"]],"d":["","","","","The record type for the module.","The record item type for the module.","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The module record associative type.","Field to be serialized.","The module record associative type.","Field to be serialized.","","","","","","The module record associative type.","Field to be serialized.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,4,6,4,6,4,6,2,4,6,2,4,6,2,4,6,2,4,6,4,6,4,6,4,6,2,2,4,6,2,4,6,6,2,2,4,6,2,4,6,2,2,4,6,2,2,2,4,6,2,4,2,4,6,2,4,6,4,2,4,6,4,6,2,2,2,2,2,4,6,6,2,2,4,6,2,2,4,6,2,4,6,2,4,6,2,4,6,2,2,2,4,6],"f":[0,0,0,0,0,0,[-1,1,[]],[-1,1,[]],[-1,1,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],[[2,[-1]]],3],[[[4,[-1]]],[[4,[-1]]],[5,3]],[[[6,[-1,-2]]],[[6,[-1,-2]]],[5,3],[5,7]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],0,0,0,0,0,0,[[],[[2,[-1]]],3],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[9,[[6,[-2,-3]]]]],10,3,7],[[[2,[-1]],[11,[-1]]],[[11,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,1],[8,1],[8,1],[[[2,[-1]],12],13,[14,3]],[[[2,[-1]],12],13,3],[[[4,[-1]],12],13,[14,3]],[[[6,[-1,-2]],12],13,[14,3],[14,7]],[[[2,[-1]]],[[2,[-1]]],3],[[[2,[-1]],[15,[-1]]],[[15,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],[[2,[-1]]],3],[[],[[4,[-1]]],3],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[4,[-1]]],[],3],[[[2,[-1]]],[],3],0,0,0,0,[[[2,[-1]]],[[2,[-1]]],3],[[[2,[-1]],-2],[[2,[-1]]],3,[[16,[-1]]]],[[],[[2,[-1]]],3],[[[4,[-1]]],[[2,[-1]]],3],[[[2,[-1]]],8,3],0,0,[[[6,[-1,-2]],-3],9,3,7,17],[[[2,[-1]]],[[2,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,18,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],[-1,19,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[[[2,[-1]]],[],[21,3]],[[[2,[-1]],-2],1,3,[[22,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[15,"tuple"],[3,"Model",3],[8,"Backend",99],[3,"ModelRecord",3],[8,"Clone",100],[3,"ModelRecordItem",3],[8,"PrecisionSettings",101],[15,"usize"],[4,"Result",102],[8,"Deserializer",103],[6,"Devices",104],[3,"Formatter",105],[6,"Result",105],[8,"Debug",105],[3,"Tensor",106],[8,"ModuleMapper",104],[8,"Serializer",107],[3,"String",108],[3,"TypeId",109],[4,"Option",110],[8,"AutodiffBackend",99],[8,"ModuleVisitor",104]]},\
"onnx_tests":{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":[],"c":[],"p":[]},\
"text_classification":{"doc":"","t":"DDILLLLLLKLLLLLLLLLLLLALLLLLLKLLLLLLALLLLLLLLLLFDLMLLLLLLLLLLLLLMLMMLLLFMLLLLLLLL","n":["AgNewsDataset","DbPediaDataset","TextClassificationDataset","adapt","adapt","borrow","borrow","borrow_mut","borrow_mut","class_name","class_name","class_name","deref","deref","deref_mut","deref_mut","downcast","downcast","drop","drop","from","from","inference","init","init","into","into","new","new","num_classes","num_classes","num_classes","test","test","train","train","training","try_from","try_from","try_into","try_into","type_id","type_id","upcast","upcast","vzip","vzip","infer","ExperimentConfig","adapt","batch_size","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","downcast","drop","fmt","from","init","into","max_seq_length","new","num_epochs","optimizer","serialize","to_owned","to_string","train","transformer","try_from","try_into","type_id","upcast","vzip","with_batch_size","with_max_seq_length","with_num_epochs"],"q":[[0,"text_classification"],[47,"text_classification::inference"],[48,"text_classification::training"],[81,"alloc::string"],[82,"core::result"],[83,"core::any"],[84,"core::option"],[85,"alloc::vec"],[86,"serde::de"],[87,"core::fmt"],[88,"core::fmt"],[89,"burn_core::optim::adam"],[90,"serde::ser"]],"d":["","Struct for the DbPedia dataset","","","","","","","","","Returns the name of a class given its label","Returns the name of a class given its label","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the dataset from a split (either “train” or …","Constructs the dataset from a split (either “train” or …","","Returns the number of unique classes in the dataset","Returns the number of unique classes in the dataset","Returns the testing portion of the dataset","Returns the testing portion of the dataset","Returns the training portion of the dataset","Returns the training portion of the dataset","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new instance of the config.","","","","","","","","","","","","","Set the default value for the field.","Set the default value for the field.","Set the default value for the field."],"i":[0,0,0,5,6,5,6,5,6,18,5,6,5,6,5,6,5,6,5,6,5,6,0,5,6,5,6,5,6,18,5,6,5,6,5,6,0,5,6,5,6,5,6,5,6,5,6,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11],"f":[0,0,0,[-1,1,[]],[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,3],[2,3],[2,3],[2,-1,[]],[2,-1,[]],[2,-1,[]],[2,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,1],[2,1],[-1,-1,[]],[-1,-1,[]],0,[[],2],[[],2],[-1,-2,[],[]],[-1,-2,[],[]],[4,5],[4,6],[[],2],[[],2],[[],2],[[],5],[[],6],[[],5],[[],6],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,[10,[3]]],1],0,[-1,1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[[-1,-2],1,[],[]],[2,-1,[]],[2,-1,[]],[-1,[[7,[11]]],12],[-1,-2,[],[]],[2,1],[[11,13],14],[-1,-1,[]],[[],2],[-1,-2,[],[]],0,[[15,16],11],0,0,[[11,-1],7,17],[-1,-2,[],[]],[-1,3,[]],[[10,-1,-1,11,4],1,18],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,[[9,[-2]]],[],[]],[-1,-2,[],[]],[[11,2],11],[[11,2],11],[[11,2],11]],"c":[],"p":[[15,"tuple"],[15,"usize"],[3,"String",81],[15,"str"],[3,"AgNewsDataset",0],[3,"DbPediaDataset",0],[4,"Result",82],[3,"TypeId",83],[4,"Option",84],[3,"Vec",85],[3,"ExperimentConfig",48],[8,"Deserializer",86],[3,"Formatter",87],[6,"Result",87],[3,"TransformerEncoderConfig",88],[3,"AdamConfig",89],[8,"Serializer",90],[8,"TextClassificationDataset",0]]},\
"text_generation":{"doc":"","t":"DLLLLLLLLLLLLLALLLLLDLLLLLLLLLLLLLLLLLLFLLLLLLLL","n":["DbPediaDataset","adapt","borrow","borrow_mut","deref","deref_mut","downcast","drop","from","init","into","new","test","train","training","try_from","try_into","type_id","upcast","vzip","ExperimentConfig","adapt","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","downcast","drop","fmt","from","init","into","new","serialize","to_owned","to_string","train","try_from","try_into","type_id","upcast","vzip","with_batch_size","with_max_seq_length","with_num_epochs"],"q":[[0,"text_generation"],[20,"text_generation::training"],[48,"core::result"],[49,"core::any"],[50,"core::option"],[51,"serde::de"],[52,"core::fmt"],[53,"core::fmt"],[54,"burn_core::optim::adam"],[55,"serde::ser"],[56,"alloc::string"],[57,"burn_dataset::dataset::base"]],"d":["","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new instance of the config.","","","","","","","","","","Set the default value for the field.","Set the default value for the field.","Set the default value for the field."],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,0,4,4,4,4,4,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8,8],"f":[0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[2,-1,[]],[2,-1,[]],[-1,-2,[],[]],[2,1],[-1,-1,[]],[[],2],[-1,-2,[],[]],[3,4],[[],4],[[],4],0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,-2,[],[]],0,[-1,1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,8],[[-1,-2],1,[],[]],[2,-1,[]],[2,-1,[]],[-1,[[5,[8]]],9],[-1,-2,[],[]],[2,1],[[8,10],11],[-1,-1,[]],[[],2],[-1,-2,[],[]],[[12,13],8],[[8,-1],5,14],[-1,-2,[],[]],[-1,15,[]],[[-1,-1,8,3],1,[[16,[0]]]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,-2,[],[]],[[8,2],8],[[8,2],8],[[8,2],8]],"c":[],"p":[[15,"tuple"],[15,"usize"],[15,"str"],[3,"DbPediaDataset",0],[4,"Result",48],[3,"TypeId",49],[4,"Option",50],[3,"ExperimentConfig",20],[8,"Deserializer",51],[3,"Formatter",52],[6,"Result",52],[3,"TransformerEncoderConfig",53],[3,"AdamConfig",54],[8,"Serializer",55],[3,"String",56],[8,"Dataset",57]]},\
"xtask":{"doc":"","t":"DENNLLLLLLLLLMLLLLLLLLLLLFAALLLLLLLLLLMMRFFFFFRNENNDNNRLLLLLFFFFFFFFFFFLLLLLLLLLLFLLFMFFFFFFFLLLLLLLLLL","n":["Args","Command","Publish","RunChecks","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","command","command","command_for_update","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","into","into","main","publish","runchecks","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","env","name","CRATES_IO_API_TOKEN","cargo_publish","local_version","publish","remote_version","run","ARM_TARGET","All","CheckType","Examples","NoStd","Params","Std","Typos","WASM32_TARGET","add","borrow","borrow","borrow_mut","borrow_mut","build_and_test_no_std","burn_core_std","burn_dataset_features_std","cargo_build","cargo_clippy","cargo_doc","cargo_fmt","cargo_install","cargo_test","check_examples","check_typos","clone","clone_into","default","eq","equivalent","fmt","from","from","from","from","handle_child_process","into","into","no_std_checks","params","run","run_cargo","run_command","run_grcov","rustup","setup_coverage","std_checks","to_owned","to_possible_value","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value_variants"],"q":[[0,"xtask"],[38,"xtask::Command"],[40,"xtask::publish"],[46,"xtask::runchecks"],[103,"clap_builder::builder::command"],[104,"clap_builder::parser::matches::arg_matches"],[105,"clap_builder"],[106,"core::result"],[107,"clap_builder::util::id"],[108,"core::option"],[109,"anyhow"],[110,"core::any"],[111,"alloc::string"],[112,"core::convert"],[113,"core::fmt"],[114,"core::fmt"],[115,"clap_builder::builder::possible_value"]],"d":["","","Publish a crate to crates.io","Run the specified <code>burn</code> tests and checks locally.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","This script publishes a crate on <code>crates.io</code>.","This script is run before a PR is created.","","","","","","","","","","","The environment to run checks against","The name of the crate to publish on crates.io","","","","","","","","Run all checks.","","Test the examples","Run <code>no-std</code> environment checks","","Run <code>std</code> environment checks","Check for typos","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,6,6,3,3,6,6,3,6,3,6,3,3,3,3,6,3,6,3,6,3,6,3,6,0,0,0,3,6,3,6,3,6,3,6,3,6,24,25,0,0,0,0,0,0,0,19,0,19,19,0,19,19,0,16,16,19,16,19,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,19,16,16,16,16,19,0,16,19,0,16,0,0,0,0,0,0,0,19,19,16,16,19,16,19,16,19,19],"f":[0,0,0,0,[1,1],[1,1],[1,1],[1,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],0,[[],1],[-1,-1,[]],[-1,-1,[]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[[],[[8,[7]]]],[9,10],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[12,[11]]]],0,0,[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[3,2],[[5,[11,4]]]],[[6,2],[[5,[11,4]]]],[[3,2],[[5,[11,4]]]],[[6,2],[[5,[11,4]]]],0,0,0,[[[14,[9]]],11],[9,15],[15,11],[9,[[8,[15]]]],[15,[[12,[11]]]],0,0,0,0,0,0,0,0,0,[[16,-1],[],[[17,[16]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,[18,[9]]],11],[[],11],[[],11],[16,11],[[],11],[16,11],[[],11],[16,11],[16,11],[[],11],[[],11],[19,19],[[-1,-2],11,[],[]],[[],19],[[19,19],10],[[-1,-2],10,[],[]],[[16,20],21],[[[18,[9]]],16],[-1,-1,[]],[9,16],[-1,-1,[]],[[22,9],11],[-1,-2,[],[]],[-1,-2,[],[]],[[],11],0,[19,[[12,[11]]]],[[9,16,9],11],[[9,[14,[9]],9,9],11],[[],11],[[9,9],11],[[],11],[[],11],[-1,-2,[],[]],[19,[[8,[23]]]],[-1,15,[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,[[5,[-2]]],[],[]],[-1,13,[]],[-1,13,[]],[[],[[14,[19]]]]],"c":[],"p":[[3,"Command",103],[3,"ArgMatches",104],[3,"Args",0],[6,"Error",105],[4,"Result",106],[4,"Command",0],[3,"Id",107],[4,"Option",108],[15,"str"],[15,"bool"],[15,"tuple"],[6,"Result",109],[3,"TypeId",110],[15,"slice"],[3,"String",111],[3,"Params",46],[8,"Into",112],[15,"array"],[4,"CheckType",46],[3,"Formatter",113],[6,"Result",113],[3,"Child",114],[3,"PossibleValue",115],[13,"RunChecks",38],[13,"Publish",38]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
