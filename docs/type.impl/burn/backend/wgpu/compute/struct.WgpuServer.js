(function() {var type_impls = {
"burn":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-WgpuServer%3CMM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#77-79\">source</a><a href=\"#impl-WgpuServer%3CMM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MM&gt; <a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;<span class=\"where fmt-newline\">where\n    MM: <a class=\"trait\" href=\"burn_compute/memory_management/base/trait.MemoryManagement.html\" title=\"trait burn_compute::memory_management::base::MemoryManagement\">MemoryManagement</a>&lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuStorage.html\" title=\"struct burn::backend::wgpu::compute::WgpuStorage\">WgpuStorage</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#82-87\">source</a><h4 class=\"code-header\">pub fn <a href=\"burn/backend/wgpu/compute/struct.WgpuServer.html#tymethod.new\" class=\"fn\">new</a>(\n    memory_management: MM,\n    device: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Device&gt;,\n    queue: Queue,\n    max_tasks: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new server.</p>\n</div></details></div></details>",0,"burn::backend::wgpu::compute::Server"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-WgpuServer%3CMM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#16\">source</a><a href=\"#impl-Debug-for-WgpuServer%3CMM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MM&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;<span class=\"where fmt-newline\">where\n    MM: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"burn_compute/memory_management/base/trait.MemoryManagement.html\" title=\"trait burn_compute::memory_management::base::MemoryManagement\">MemoryManagement</a>&lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuStorage.html\" title=\"struct burn::backend::wgpu::compute::WgpuStorage\">WgpuStorage</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#16\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","burn::backend::wgpu::compute::Server"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ComputeServer-for-WgpuServer%3CMM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#282-284\">source</a><a href=\"#impl-ComputeServer-for-WgpuServer%3CMM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;MM&gt; <a class=\"trait\" href=\"burn_compute/server/trait.ComputeServer.html\" title=\"trait burn_compute::server::ComputeServer\">ComputeServer</a> for <a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;<span class=\"where fmt-newline\">where\n    MM: <a class=\"trait\" href=\"burn_compute/memory_management/base/trait.MemoryManagement.html\" title=\"trait burn_compute::memory_management::base::MemoryManagement\">MemoryManagement</a>&lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuStorage.html\" title=\"struct burn::backend::wgpu::compute::WgpuStorage\">WgpuStorage</a>&gt;,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#307\">source</a><a href=\"#method.create\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"burn_compute/server/trait.ComputeServer.html#tymethod.create\" class=\"fn\">create</a>(&amp;mut self, data: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"struct\" href=\"burn_compute/server/struct.Handle.html\" title=\"struct burn_compute::server::Handle\">Handle</a>&lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>When we create a new handle from existing data, we use custom allocations so that we don’t\nhave to execute the current pending tasks.</p>\n<p>This is important, otherwise the compute passes are going to be too small and we won’t be able to\nfully utilize the GPU.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Kernel\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Kernel\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"burn_compute/server/trait.ComputeServer.html#associatedtype.Kernel\" class=\"associatedtype\">Kernel</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"burn/backend/wgpu/compute/trait.Kernel.html\" title=\"trait burn::backend::wgpu::compute::Kernel\">Kernel</a>&gt;</h4></section></summary><div class='docblock'>The kernel type defines the computation algorithms.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Storage\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Storage\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"burn_compute/server/trait.ComputeServer.html#associatedtype.Storage\" class=\"associatedtype\">Storage</a> = <a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuStorage.html\" title=\"struct burn::backend::wgpu::compute::WgpuStorage\">WgpuStorage</a></h4></section></summary><div class='docblock'>The <a href=\"burn_compute/storage/base/trait.ComputeStorage.html\" title=\"trait burn_compute::storage::base::ComputeStorage\">storage</a> type defines how data is stored and accessed.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.MemoryManagement\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.MemoryManagement\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"burn_compute/server/trait.ComputeServer.html#associatedtype.MemoryManagement\" class=\"associatedtype\">MemoryManagement</a> = MM</h4></section></summary><div class='docblock'>The <a href=\"burn_compute/memory_management/base/trait.MemoryManagement.html\" title=\"trait burn_compute::memory_management::base::MemoryManagement\">memory management</a> type defines strategies for allocation in the <a href=\"burn_compute/storage/base/trait.ComputeStorage.html\" title=\"trait burn_compute::storage::base::ComputeStorage\">storage</a> type.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.AutotuneKey\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.AutotuneKey\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"burn_compute/server/trait.ComputeServer.html#associatedtype.AutotuneKey\" class=\"associatedtype\">AutotuneKey</a> = <a class=\"enum\" href=\"burn/backend/wgpu/compute/enum.WgpuAutotuneKey.html\" title=\"enum burn::backend::wgpu::compute::WgpuAutotuneKey\">WgpuAutotuneKey</a></h4></section></summary><div class='docblock'>The key used to cache operations used on specific inputs in autotune</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#291\">source</a><a href=\"#method.read\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"burn_compute/server/trait.ComputeServer.html#tymethod.read\" class=\"fn\">read</a>(&amp;mut self, handle: &amp;<a class=\"struct\" href=\"burn_compute/server/struct.Handle.html\" title=\"struct burn_compute::server::Handle\">Handle</a>&lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;&gt;) -&gt; <a class=\"enum\" href=\"burn/tensor/enum.Reader.html\" title=\"enum burn::tensor::Reader\">Reader</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.u8.html\">u8</a>&gt;&gt;</h4></section></summary><div class='docblock'>Given a handle, returns the owned resource as bytes.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.empty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#329\">source</a><a href=\"#method.empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"burn_compute/server/trait.ComputeServer.html#tymethod.empty\" class=\"fn\">empty</a>(&amp;mut self, size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"burn_compute/server/struct.Handle.html\" title=\"struct burn_compute::server::Handle\">Handle</a>&lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;&gt;</h4></section></summary><div class='docblock'>Reserves <code>size</code> bytes in the storage, and returns a handle over them.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.execute\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#333\">source</a><a href=\"#method.execute\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"burn_compute/server/trait.ComputeServer.html#tymethod.execute\" class=\"fn\">execute</a>(\n    &amp;mut self,\n    kernel: &lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt; as <a class=\"trait\" href=\"burn_compute/server/trait.ComputeServer.html\" title=\"trait burn_compute::server::ComputeServer\">ComputeServer</a>&gt;::<a class=\"associatedtype\" href=\"burn_compute/server/trait.ComputeServer.html#associatedtype.Kernel\" title=\"type burn_compute::server::ComputeServer::Kernel\">Kernel</a>,\n    handles: &amp;[&amp;<a class=\"struct\" href=\"burn_compute/server/struct.Handle.html\" title=\"struct burn_compute::server::Handle\">Handle</a>&lt;<a class=\"struct\" href=\"burn/backend/wgpu/compute/struct.WgpuServer.html\" title=\"struct burn::backend::wgpu::compute::WgpuServer\">WgpuServer</a>&lt;MM&gt;&gt;]\n)</h4></section></summary><div class='docblock'>Executes the <code>kernel</code> over the given memory <code>handles</code>. <a href=\"burn_compute/server/trait.ComputeServer.html#tymethod.execute\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sync\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/burn_wgpu/compute/server.rs.html#367\">source</a><a href=\"#method.sync\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"burn_compute/server/trait.ComputeServer.html#tymethod.sync\" class=\"fn\">sync</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Wait for the completion of every task in the server.</div></details></div></details>","ComputeServer","burn::backend::wgpu::compute::Server"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()